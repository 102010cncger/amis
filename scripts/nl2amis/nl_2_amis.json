[{"instruction": "用 AMIS 生成一个基本的amis页面配置示例", "input": "", "output": "{\"type\": \"page\",\"title\": \"AMIS 页面配置示例\",\"body\": [{\"type\": \"alert\",\"level\": \"info\",\"content\": \"这是一个基本的 AMIS 页面配置示例\"},{\"type\": \"button\",\"label\": \"点击按钮\",\"level\": \"primary\",\"actionType\": \"dialog\",\"dialog\": {\"title\": \"提示\",\"body\": \"你点击了按钮！\"}}]}"}, {"instruction": "用 AMIS 生成一个 Container 容器，并将其背景色设置为灰色", "input": "", "output": "{\"type\": \"Container\",\"props\": {\"style\": {\"backgroundColor\": \"gray\"}},\"children\": []}"}, {"instruction": "用 AMIS 生成一个 Container 容器，让其外层标签使用 pre 标签，并将字体颜色设置为灰色", "input": "", "output": "{\"type\": \"Container\",\"props\": {\"style\": {\"color\": \"gray\"}},\"children\": [{\"type\": \"pre\",\"children\": [\"This is a container with pre tag\"]}]}"}, {"instruction": "用 AMIS 生成一个 Container容器，指定其外层类名为 myClass", "input": "", "output": "{\"type\": \"Container\",\"className\": \"myClass\",\"children\": []}"}, {"instruction": "用 AMIS 生成一个包含四个面板的折叠布局示例，面板中随意放置一些组件", "input": "", "output": "{\"type\": \"amis\",\"body\": {\"type\": \"foldable\",\"panels\": [{\"title\": \"Panel 1\",\"body\": [{\"type\": \"button\",\"label\": \"Button 1\"},{\"type\": \"input\",\"name\": \"input1\",\"label\": \"Input 1\"}]},{\"title\": \"Panel 2\",\"body\": [{\"type\": \"checkbox\",\"name\": \"checkbox1\",\"label\": \"Checkbox 1\"},{\"type\": \"select\",\"name\": \"select1\",\"label\": \"Select 1\",\"options\": [{\"label\": \"Option 1\",\"value\": \"option1\"},{\"label\": \"Option 2\",\"value\": \"option2\"}]}]},{\"title\": \"Panel 3\",\"body\": [{\"type\": \"radio\",\"name\": \"radio1\",\"label\": \"Radio 1\",\"options\": [{\"label\": \"Option 1\",\"value\": \"option1\"},{\"label\": \"Option 2\",\"value\": \"option2\"}]},{\"type\": \"textarea\",\"name\": \"textarea1\",\"label\": \"Textarea 1\"}]},{\"title\": \"Panel 4\",\"body\": [{\"type\": \"switch\",\"name\": \"switch1\",\"label\": \"Switch 1\"},{\"type\": \"slider\",\"name\": \"slider1\",\"label\": \"Slider 1\",\"min\": 0,\"max\": 100,\"step\": 1}]}]}}"}, {"instruction": "有三组表单，分别为基本信息、高级信息、扩展信息，用一个折叠器来布局这三组表单", "input": "", "output": "{\"formGroups\": [{\"title\": \"基本信息\",\"forms\": [{\"label\": \"姓名\",\"type\": \"text\",\"name\": \"name\"},{\"label\": \"年龄\",\"type\": \"number\",\"name\": \"age\"},{\"label\": \"性别\",\"type\": \"radio\",\"name\": \"gender\",\"options\": [{\"label\": \"男\",\"value\": \"male\"},{\"label\": \"女\",\"value\": \"female\"}]}]},{\"title\": \"高级信息\",\"forms\": [{\"label\": \"职业\",\"type\": \"text\",\"name\": \"occupation\"},{\"label\": \"学历\",\"type\": \"select\",\"name\": \"education\",\"options\": [{\"label\": \"小学\",\"value\": \"primary\"},{\"label\": \"初中\",\"value\": \"middle\"},{\"label\": \"高中\",\"value\": \"high\"},{\"label\": \"大学\",\"value\": \"university\"}]}]},{\"title\": \"扩展信息\",\"forms\": [{\"label\": \"爱好\",\"type\": \"checkbox\",\"name\": \"hobbies\",\"options\": [{\"label\": \"篮球\",\"value\": \"basketball\"},{\"label\": \"足球\",\"value\": \"football\"},{\"label\": \"游泳\",\"value\": \"swimming\"}]},{\"label\": \"自我介绍\",\"type\": \"textarea\",\"name\": \"introduction\"}]}]}"}, {"instruction": "用 AMIS 生成一个包含三个面板的折叠布局，当其中一组布局展开时其他布局关闭", "input": "", "output": "{\"type\": \"amis\",\"body\": {\"type\": \"panel\",\"title\": \"折叠布局\",\"collapsible\": true,\"activeKey\": \"panel1\",\"items\": [{\"title\": \"面板1\",\"name\": \"panel1\",\"body\": {\"type\": \"panel\",\"title\": \"面板1内容\",\"collapsible\": true,\"activeKey\": \"panel1-1\",\"items\": [{\"title\": \"面板1-1\",\"name\": \"panel1-1\",\"body\": \"面板1-1的内容\"},{\"title\": \"面板1-2\",\"name\": \"panel1-2\",\"body\": \"面板1-2的内容\"}]}},{\"title\": \"面板2\",\"name\": \"panel2\",\"body\": {\"type\": \"panel\",\"title\": \"面板2内容\",\"collapsible\": true,\"activeKey\": \"panel2-1\",\"items\": [{\"title\": \"面板2-1\",\"name\": \"panel2-1\",\"body\": \"面板2-1的内容\"},{\"title\": \"面板2-2\",\"name\": \"panel2-2\",\"body\": \"面板2-2的内容\"}]}},{\"title\": \"面板3\",\"name\": \"panel3\",\"body\": {\"type\": \"panel\",\"title\": \"面板3内容\",\"collapsible\": true,\"activeKey\": \"panel3-1\",\"items\": [{\"title\": \"面板3-1\",\"name\": \"panel3-1\",\"body\": \"面板3-1的内容\"},{\"title\": \"面板3-2\",\"name\": \"panel3-2\",\"body\": \"面板3-2的内容\"}]}}]}}"}, {"instruction": "用 AMIS 生成一个包含订餐服务、后勤服务、安保服务的折叠布局，将展开图标样式设为 caret-right 并放置在右侧", "input": "", "output": "{\"type\": \"fold\",\"icon\": \"caret-right\",\"iconPosition\": \"right\",\"panels\": [{\"title\": \"订餐服务\",\"content\": \"这里是订餐服务的内容\"},{\"title\": \"后勤服务\",\"content\": \"这里是后勤服务的内容\"},{\"title\": \"安保服务\",\"content\": \"这里是安保服务的内容\"}]}"}, {"instruction": "用 AMIS 生成一个包含 “标题一”“标题二”两个面板的折叠面板，禁用“标题二”面板", "input": "", "output": "{\"type\": \"amis\",\"body\": {\"type\": \"panel\",\"title\": \"折叠面板\",\"collapsible\": true,\"activeKey\": \"1\",\"items\": [{\"title\": \"标题一\",\"body\": \"内容一\"},{\"title\": \"标题二\",\"body\": \"内容二\",\"disabled\": true}]}}"}, {"instruction": "用 AMIS 生成一个包含 “标题一”“标题二”两个面板的折叠面板，在“标题一”面板中嵌套一个包含“标题三”“标题四”两个标题的折叠面板", "input": "", "output": "{\"type\": \"amis\",\"body\": {\"type\": \"panel\",\"title\": \"折叠面板\",\"collapsible\": true,\"expanded\": true,\"body\": [{\"type\": \"panel\",\"title\": \"标题一\",\"collapsible\": true,\"expanded\": true,\"body\": [{\"type\": \"panel\",\"title\": \"标题三\",\"collapsible\": true,\"expanded\": true},{\"type\": \"panel\",\"title\": \"标题四\",\"collapsible\": true,\"expanded\": true}]},{\"type\": \"panel\",\"title\": \"标题二\",\"collapsible\": true,\"expanded\": true}]}}"}, {"instruction": "用 AMIS 生成一个包含 “标题一”“标题二”两个面板的折叠面板，隐藏“标题二”面板的图标", "input": "", "output": "{\"type\": \"amis\",\"body\": {\"type\": \"panel\",\"title\": \"折叠面板\",\"collapsible\": true,\"defaultActiveKey\": \"1\",\"items\": [{\"title\": \"标题一\",\"body\": \"内容一\"},{\"title\": \"标题二\",\"body\": \"内容二\",\"icon\": \"none\"}]}}"}, {"instruction": "用 AMIS 生成一个表单，包含姓名、手机号、邮箱、身份证号几个字段，其中姓名、手机号占一行，邮箱、身份证号占一行，两行间有一条分割线", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"group\",\"controls\": [{\"type\": \"input\",\"name\": \"姓名\",\"label\": \"姓名\",\"required\": true},{\"type\": \"input\",\"name\": \"手机号\",\"label\": \"手机号\",\"required\": true}]},{\"type\": \"divider\"},{\"type\": \"group\",\"controls\": [{\"type\": \"input\",\"name\": \"邮箱\",\"label\": \"邮箱\",\"required\": true},{\"type\": \"input\",\"name\": \"身份证号\",\"label\": \"身份证号\",\"required\": true}]}]}"}, {"instruction": "用 AMIS 生成一条虚线类型的分割线，并包裹在一个表单中", "input": "", "output": "{\"type\": \"form\",\"body\": [{\"type\": \"divider\",\"style\": \"dashed\"}]}"}, {"instruction": "有三个图表组件，用AMIS生成一个 flex布局组件将其包裹，使其水平均匀排布", "input": "", "output": "{\"type\": \"flex\",\"direction\": \"row\",\"children\": [{\"type\": \"chart1\"},{\"type\": \"chart2\"},{\"type\": \"chart3\"}]}"}, {"instruction": "有三个按钮组件，用AMIS生成一个 flex布局组件将其包裹，使其水平居中，垂直排布", "input": "", "output": "{\"type\": \"flex\",\"direction\": \"column\",\"align\": \"center\",\"children\": [{\"type\": \"button\",\"content\": \"按钮1\"},{\"type\": \"button\",\"content\": \"按钮2\"},{\"type\": \"button\",\"content\": \"按钮3\"}]}"}, {"instruction": "用 AMIS 生成一个水平分栏组件，分左右两栏，两栏的宽度比例为 3: 9，并向两栏中均放置一个文本框组件", "input": "", "output": "{\"type\": \"horizontal\",\"columns\": [{\"span\": 3,\"components\": [{\"type\": \"textbox\"}]},{\"span\": 9,\"components\": [{\"type\": \"textbox\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，并在其中放置一个水平的三栏布局，宽度比为 1: 3: 9，第一栏放置一个图片组件和一个文件上传组件，第二栏放置三个文本框组件，第三栏放置一个 combo 组件，其元素为一个标签为 “项目经历” 的富文本组件", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"row\",\"columns\": [{\"type\": \"column\",\"width\": 1,\"controls\": [{\"type\": \"image\",\"src\": \"path/to/image.jpg\"},{\"type\": \"file-upload\"}]},{\"type\": \"column\",\"width\": 3,\"controls\": [{\"type\": \"text\"},{\"type\": \"text\"},{\"type\": \"text\"}]},{\"type\": \"column\",\"width\": 9,\"controls\": [{\"type\": \"combo\",\"options\": [{\"label\": \"项目经历\",\"value\": \"<p>项目经历内容</p>\"}]}]}]}]}"}, {"instruction": "用 AMIS 生成一个三栏的水平布局，指定其间隙为最大", "input": "", "output": "{\"type\": \"horizontal\",\"columns\": [{\"type\": \"column\",\"width\": \"1\",\"items\": []},{\"type\": \"column\",\"width\": \"1\",\"items\": []},{\"type\": \"column\",\"width\": \"1\",\"items\": []}],\"spacing\": \"max\"}"}, {"instruction": "用 AMIS 生成一个水平的两栏布局，设置小屏幕下的分栏宽度为 0: 12，中等屏幕下的分栏宽度为 2: 10，大屏幕下的分栏宽度为 3:9", "input": "", "output": "{\"type\": \"horizontal\",\"columns\": [{\"type\": \"column\",\"width\": \"0:12\",\"blocks\": []},{\"type\": \"column\",\"width\": \"2:10\",\"blocks\": []},{\"type\": \"column\",\"width\": \"3:9\",\"blocks\": []}]}"}, {"instruction": "用 AMIS 生成一个 Grid2d 布局的示例", "input": "", "output": "{\"type\": \"Grid2d\",\"rows\": 3,\"columns\": 3,\"children\": [{\"type\": \"Text\",\"text\": \"1\",\"row\": 0,\"column\": 0},{\"type\": \"Text\",\"text\": \"2\",\"row\": 0,\"column\": 1},{\"type\": \"Text\",\"text\": \"3\",\"row\": 0,\"column\": 2},{\"type\": \"Text\",\"text\": \"4\",\"row\": 1,\"column\": 0},{\"type\": \"Text\",\"text\": \"5\",\"row\": 1,\"column\": 1},{\"type\": \"Text\",\"text\": \"6\",\"row\": 1,\"column\": 2},{\"type\": \"Text\",\"text\": \"7\",\"row\": 2,\"column\": 0},{\"type\": \"Text\",\"text\": \"8\",\"row\": 2,\"column\": 1},{\"type\": \"Text\",\"text\": \"9\",\"row\": 2,\"column\": 2}]}"}, {"instruction": "用 AMIS 生成一个分页容器组件，指定每页面展示十行，分页显示在下方", "input": "", "output": "{\"type\": \"pagination\",\"props\": {\"pageSize\": 10,\"total\": 100,\"onChange\": \"handlePageChange\"}}"}, {"instruction": "用 AMIS 生成一个panel面板，包含三个并排放置的图片组件", "input": "", "output": "{\"type\": \"panel\",\"children\": [{\"type\": \"image\",\"src\": \"image1.jpg\"},{\"type\": \"image\",\"src\": \"image2.jpg\"},{\"type\": \"image\",\"src\": \"image3.jpg\"}]}"}, {"instruction": "用 AMIS 生成一个选项卡布局，包含三个面板，面板中分别放置一个图片组件、一个tpl组件、一个文本输入框", "input": "", "output": "{\"type\": \"tabs\",\"tabs\": [{\"title\": \"Panel 1\",\"content\": [{\"type\": \"image\",\"src\": \"image1.jpg\"},{\"type\": \"tpl\",\"tpl\": \"<div>Panel 1 Content</div>\"},{\"type\": \"input\",\"placeholder\": \"Enter text\"}]},{\"title\": \"Panel 2\",\"content\": [{\"type\": \"image\",\"src\": \"image2.jpg\"},{\"type\": \"tpl\",\"tpl\": \"<div>Panel 2 Content</div>\"},{\"type\": \"input\",\"placeholder\": \"Enter text\"}]},{\"title\": \"Panel 3\",\"content\": [{\"type\": \"image\",\"src\": \"image3.jpg\"},{\"type\": \"tpl\",\"tpl\": \"<div>Panel 3 Content</div>\"},{\"type\": \"input\",\"placeholder\": \"Enter text\"}]}]}"}, {"instruction": "用 AMIS 生成一个选项卡布局，包含两个tab，tab1 和 tab2，默认显示 tab2", "input": "", "output": "{\"type\": \"tabs\",\"activeKey\": \"tab2\",\"items\": [{\"key\": \"tab1\",\"title\": \"Tab 1\",\"content\": \"This is the content of Tab 1\"},{\"key\": \"tab2\",\"title\": \"Tab 2\",\"content\": \"This is the content of Tab 2\"}]}"}, {"instruction": "用 AMIS 生成一个被service组件包裹的选项卡布局，读取外层传过来的 tabs 字段作为 tab 选项", "input": "", "output": "{\"type\": \"service\",\"body\": {\"type\": \"tabs\",\"tabs\": [{\"label\": \"Tab 1\",\"content\": \"Content for Tab 1\"},{\"label\": \"Tab 2\",\"content\": \"Content for Tab 2\"},{\"label\": \"Tab 3\",\"content\": \"Content for Tab 3\"}]}}"}, {"instruction": "用 AMIS 生成一个被service组件包裹的选项卡布局，读取外层传过来的 tabs 字段作为 tab 选项，并设置超出三个的选项为隐藏", "input": "", "output": "{\"type\": \"service\",\"body\": {\"type\": \"tabs\",\"tabs\": [{\"title\": \"Tab 1\",\"content\": \"Content 1\"},{\"title\": \"Tab 2\",\"content\": \"Content 2\"},{\"title\": \"Tab 3\",\"content\": \"Content 3\"}],\"hideOverflowTabs\": true}}"}, {"instruction": "用 AMIS 生成一个包含“已处理工单“”未处理工单“两个选项的选项卡，鼠标移动上去分别提示“已处理的现场设备报修工单” 和 “未处理的现场设备报修工单”", "input": "", "output": "{\"type\": \"tabs\",\"props\": {\"activeKey\": \"processed\",\"tabBarExtraContent\": {\"type\": \"div\",\"props\": {\"style\": {\"display\": \"flex\",\"justifyContent\": \"space-between\",\"alignItems\": \"center\"}},\"children\": [{\"type\": \"div\",\"props\": {\"style\": {\"marginRight\": \"10px\"}},\"children\": [{\"type\": \"span\",\"props\": {\"style\": {\"marginRight\": \"5px\"}},\"children\": \"已处理工单\"},{\"type\": \"Tooltip\",\"props\": {\"title\": \"已处理的现场设备报修工单\"},\"children\": {\"type\": \"Icon\",\"props\": {\"type\": \"info-circle\"}}}]},{\"type\": \"div\",\"props\": {\"style\": {\"marginLeft\": \"10px\"}},\"children\": [{\"type\": \"span\",\"props\": {\"style\": {\"marginRight\": \"5px\"}},\"children\": \"未处理工单\"},{\"type\": \"Tooltip\",\"props\": {\"title\": \"未处理的现场设备报修工单\"},\"children\": {\"type\": \"Icon\",\"props\": {\"type\": \"info-circle\"}}}]}]}},\"children\": [{\"type\": \"TabPane\",\"props\": {\"tab\": \"已处理工单\",\"key\": \"processed\"},\"children\": \"已处理工单内容\"},{\"type\": \"TabPane\",\"props\": {\"tab\": \"未处理工单\",\"key\": \"unprocessed\"},\"children\": \"未处理工单内容\"}]}"}, {"instruction": "用 AMIS 生成一个包含三个tab的选项卡，默认启用选项由上下文传入的 activeKey 字段决定", "input": "", "output": "{\"type\": \"amis\",\"body\": {\"type\": \"tabs\",\"activeKey\": \"${activeKey}\",\"tabs\": [{\"title\": \"Tab 1\",\"key\": \"tab1\",\"body\": \"Content of Tab 1\"},{\"title\": \"Tab 2\",\"key\": \"tab2\",\"body\": \"Content of Tab 2\"},{\"title\": \"Tab 3\",\"key\": \"tab3\",\"body\": \"Content of Tab 3\"}]}}"}, {"instruction": "用 AMIS 生成一个包裹组件，指定内边距为最小，背景为黑色", "input": "", "output": "{\"type\": \"div\",\"props\": {\"style\": {\"padding\": \"0\",\"background\": \"black\"}},\"children\": []}"}, {"instruction": "用 AMIS 生成一个门户栏目组件，根据动态数据用 AMIS 生成其头部", "input": "", "output": "{\"type\": \"page\",\"title\": \"门户栏目\",\"body\": [{\"type\": \"container\",\"body\": [{\"type\": \"tpl\",\"tpl\": \"<h2>{{title}}</h2>\",\"data\": {\"title\": \"栏目一\"}},{\"type\": \"tpl\",\"tpl\": \"<h2>{{title}}</h2>\",\"data\": {\"title\": \"栏目二\"}},{\"type\": \"tpl\",\"tpl\": \"<h2>{{title}}</h2>\",\"data\": {\"title\": \"栏目三\"}}]}]}"}, {"instruction": "用 AMIS 生成一个按钮，配置尺寸为极小，样式为主要", "input": "", "output": "{\"type\": \"Button\",\"size\": \"extra-small\",\"style\": \"primary\"}"}, {"instruction": "用 AMIS 生成一个按钮，配置尺寸为中等，样式为危险", "input": "", "output": "{\"type\": \"Button\",\"size\": \"medium\",\"style\": \"danger\"}"}, {"instruction": "用 AMIS 生成一个按钮，配置尺寸为中等，样式为成功，图标为加号", "input": "", "output": "{\"type\": \"Button\",\"size\": \"medium\",\"style\": \"success\",\"icon\": \"plus\"}"}, {"instruction": "用 AMIS 生成一个按钮，用于删除一行数据，发送删除请求前弹框确认，弹框文字为“确定要删除？”", "input": "", "output": "{\"type\": \"button\",\"label\": \"删除\",\"action\": {\"type\": \"confirm\",\"text\": \"确定要删除？\",\"confirmAction\": {\"type\": \"request\",\"method\": \"DELETE\",\"url\": \"/api/delete\",\"data\": {\"rowId\": \"123\"}}}}"}, {"instruction": "用 AMIS 生成一个按钮，发送一个请求，请求成功后跳转至https://www.baidu.com", "input": "", "output": "{\"type\": \"button\",\"label\": \"跳转至百度\",\"onClick\": {\"type\": \"request\",\"url\": \"https://www.baidu.com\",\"method\": \"GET\",\"onSuccess\": {\"type\": \"redirect\",\"url\": \"https://www.baidu.com\"}}}"}, {"instruction": "用 AMIS 生成一个按钮，点击按钮打开弹窗，弹窗体为一个表单，表单提交成功后不关闭弹窗", "input": "", "output": "{\"type\": \"button\",\"label\": \"打开弹窗\",\"onClick\": {\"type\": \"dialog\",\"title\": \"表单弹窗\",\"body\": {\"type\": \"form\",\"api\": \"/submit-form\",\"controls\": [{\"type\": \"input\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"input\",\"name\": \"email\",\"label\": \"邮箱\"}],\"submitText\": \"提交\",\"onSubmitSuccess\": {\"type\": \"dialog\",\"title\": \"提交成功\",\"body\": \"表单提交成功！\",\"closeOnEsc\": false,\"closeOnOutside\": false}}}}"}, {"instruction": "用 AMIS 生成一个按钮，按钮发送一个请求，请求成功后弹窗", "input": "", "output": "{\"type\": \"button\",\"label\": \"点击发送请求\",\"onClick\": {\"type\": \"request\",\"url\": \"https://example.com/api\",\"method\": \"GET\",\"onSuccess\": {\"type\": \"alert\",\"message\": \"请求成功！\"}}}"}, {"instruction": "用 AMIS 生成一个发送请求的按钮和一个CRUD组件，请求成功后触发 CRUD组件的刷新", "input": "", "output": "您可以使用 AMIS 的 `Button` 组件和 `CRUD` 组件来实现您的需求。首先，您需要在 AMIS 的配置中定义一个发送请求的按钮，然后在按钮的 `onSuccess` 事件中触发 CRUD 组件的刷新。以下是一个示例配置：{\"type\": \"page\",\"body\": [{\"type\": \"button\",\"label\": \"发送请求\",\"actionType\": \"ajax\",\"api\": \"/api/sendRequest\",\"onSuccess\": {\"type\": \"crud\",\"api\": \"/api/getData\",\"columns\": [{\"name\": \"id\",\"label\": \"ID\"},{\"name\": \"name\",\"label\": \"姓名\"},{\"name\": \"age\",\"label\": \"年龄\"}]}}]}在上面的配置中，我们定义了一个 `Button` 组件，它会发送一个请求到 `/api/sendRequest` 接口。当请求成功后，会触发一个 `CRUD` 组件的刷新，该组件会发送一个请求到 `/api/getData` 接口，并展示返回的数据。请注意，您需要根据您的实际情况修改接口的地址和返回的数据结构。希望这可以帮助到您！"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本输入框和一个带倒计时功能的按钮，点击按钮调接口发送验证码并开始倒计时", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"input\",\"label\": \"请输入验证码\"},{\"type\": \"button\",\"label\": \"发送验证码\",\"onClick\": \"sendVerificationCode\",\"countdown\": true}]}"}, {"instruction": "用 AMIS 生成一个按钮，从上下文中获取 to、cc、bcc、subject、body 字段并调起邮件发送", "input": "", "output": "{\"type\": \"button\",\"label\": \"发送邮件\",\"action\": {\"type\": \"mailto\",\"to\": \"{{to}}\",\"cc\": \"{{cc}}\",\"bcc\": \"{{bcc}}\",\"subject\": \"{{subject}}\",\"body\": \"{{body}}\"}}"}, {"instruction": "用 AMIS 生成一个按钮，点击按钮弹窗，弹窗中有一个包含一个文本框的表单", "input": "", "output": "{\"type\": \"button\",\"label\": \"点击按钮\",\"onClick\": \"showPopup\"}{\"type\": \"popup\",\"title\": \"弹窗标题\",\"content\": [{\"type\": \"input\",\"label\": \"文本框\",\"name\": \"inputField\"}],\"buttons\": [{\"type\": \"button\",\"label\": \"确定\",\"onClick\": \"submitForm\"},{\"type\": \"button\",\"label\": \"取消\",\"onClick\": \"closePopup\"}]}"}, {"instruction": "用 AMIS 生成一个按钮，支持将页面变量 ${a} 的内容复制到剪贴板", "input": "", "output": "{\"type\": \"button\",\"label\": \"复制内容\",\"onClick\": {\"type\": \"copyToClipboard\",\"value\": \"${a}\"}}"}, {"instruction": "用 AMIS 生成一个按钮和一个用接口获取选项的下拉框，点击按钮刷新下拉框的选项", "input": "", "output": "{\"button\": {\"type\": \"button\",\"text\": \"刷新下拉框\",\"onClick\": \"refreshDropdown\"},\"dropdown\": {\"type\": \"dropdown\",\"options\": [],\"getData\": \"getOptions\"}}"}, {"instruction": "用 AMIS 生成一个按钮，点击打开一个页面抽屉，抽屉上有一个文本框", "input": "", "output": "{\"type\": \"Button\",\"props\": {\"onClick\": \"openDrawer\",\"text\": \"打开抽屉\"},\"children\": []}"}, {"instruction": "用 AMIS 生成一个按钮，响应command+o,ctrl+o，当用户同时按下command+o,或ctrl+o的时候打开一个弹窗", "input": "", "output": "{\"type\": \"button\",\"label\": \"Open Dialog\",\"shortcut\": [\"command+o\", \"ctrl+o\"],\"onClick\": \"openDialog\"}"}, {"instruction": "用 AMIS 生成一个按钮，包含一个图片组件，点击弹窗", "input": "", "output": "{\"type\": \"button\",\"props\": {\"onClick\": \"showModal\",\"children\": {\"type\": \"image\",\"props\": {\"src\": \"https://example.com/image.jpg\",\"alt\": \"Button Image\"}}}}"}, {"instruction": "用 AMIS 生成一个按钮，鼠标hover时提示“点击链接跳转”", "input": "", "output": "{\"type\": \"button\",\"props\": {\"label\": \"点击链接\",\"tooltip\": \"点击链接跳转\"}}"}, {"instruction": "用 AMIS 生成一个按钮，当上下文变量${canEdit}的值为false时不可点击，鼠标移动上去时显示“不可编辑”提示", "input": "", "output": "{\"type\": \"button\",\"label\": \"按钮\",\"disabled\": \"${!canEdit}\",\"tooltip\": \"${canEdit ? '' : '不可编辑'}\"}"}, {"instruction": "用 AMIS 生成一个按钮，鼠标hover时提示“点击链接跳转”，提示展示在上方", "input": "", "output": "{\"type\": \"button\",\"props\": {\"label\": \"跳转链接\",\"tooltip\": \"点击链接跳转\",\"tooltipPlacement\": \"top\"}}"}, {"instruction": "在AMIS生成的表单中添加一个按钮，点击按钮可以重置表单", "input": "", "output": "{\"type\": \"button\",\"label\": \"重置\",\"action\": \"reset\"}"}, {"instruction": "在AMIS生成的表单中添加一个按钮，点击按钮可以清空表单", "input": "", "output": "{\"type\": \"form\",\"components\": [{\"type\": \"button\",\"label\": \"清空表单\",\"action\": {\"type\": \"reset\"}}]}"}, {"instruction": "用 AMIS 生成一个按钮组，包含三个按钮，水平排布，行为分别为弹窗、跳转链接、无行为", "input": "", "output": "{\"type\": \"button-group\",\"buttons\": [{\"type\": \"button\",\"text\": \"弹窗\",\"action\": {\"type\": \"dialog\",\"content\": \"这是一个弹窗\"}},{\"type\": \"button\",\"text\": \"跳转链接\",\"action\": {\"type\": \"link\",\"url\": \"https://www.example.com\"}},{\"type\": \"button\",\"text\": \"无行为\"}]}"}, {"instruction": "用 AMIS 生成一个按钮组，包含三个按钮，垂直排布", "input": "", "output": "{\"type\": \"button-group\",\"direction\": \"vertical\",\"buttons\": [{\"text\": \"按钮1\"},{\"text\": \"按钮2\"},{\"text\": \"按钮3\"}]}"}, {"instruction": "用 AMIS 生成一个用service 包裹的面包屑组件，通过service下的source字段获取面包屑展示的内容", "input": "", "output": "{\"type\": \"service\",\"name\": \"Breadcrumb\",\"source\": \"breadcrumbService\"}"}, {"instruction": "有这样一组数据：“RD” 大项下有“前端FE”和“后端RD”两个选项，“QA” 大项下有“测试QA” 和 “交付测试QA”两个选项，“Manager” 大项下有“项目经理PM”一个选项，用一个AMIS下拉菜单组件来分组展示这组数据", "input": "", "output": "{\"RD\": [\"前端FE\",\"后端RD\"],\"QA\": [\"测试QA\",\"交付测试QA\"],\"Manager\": [\"项目经理PM\"]}"}, {"instruction": "用 AMIS 生成一个下拉菜单，点击选项后自动关闭下拉菜单", "input": "", "output": "{\"type\": \"select\",\"label\": \"下拉菜单\",\"options\": [{\"label\": \"选项1\",\"value\": \"option1\",\"action\": {\"type\": \"close\"}},{\"label\": \"选项2\",\"value\": \"option2\",\"action\": {\"type\": \"close\"}},{\"label\": \"选项3\",\"value\": \"option3\",\"action\": {\"type\": \"close\"}}]}"}, {"instruction": "用 AMIS 生成一个包含三个选项的下拉菜单，鼠标hover时展开", "input": "", "output": "{\"type\": \"dropdown\",\"label\": \"Options\",\"hover\": true,\"options\": [{\"label\": \"Option 1\",\"value\": \"option1\"},{\"label\": \"Option 2\",\"value\": \"option2\"},{\"label\": \"Option 3\",\"value\": \"option3\"}]}"}, {"instruction": "用 AMIS 生成一个下拉菜单，设置图标为 fa fa-home", "input": "", "output": "{\"type\": \"select\",\"icon\": \"fa fa-home\",\"options\": [{\"label\": \"Option 1\",\"value\": \"option1\"},{\"label\": \"Option 2\",\"value\": \"option2\"},{\"label\": \"Option 3\",\"value\": \"option3\"}]}"}, {"instruction": "用 AMIS 生成一个下拉菜单，设置右侧图标为 fa fa-ellipsis-v", "input": "", "output": "{\"type\": \"select\",\"icon\": \"fa fa-ellipsis-v\",\"options\": [{\"label\": \"Option 1\",\"value\": \"option1\"},{\"label\": \"Option 2\",\"value\": \"option2\"},{\"label\": \"Option 3\",\"value\": \"option3\"}]}"}, {"instruction": "用 AMIS 生成一个service组件，该组件包含两个子组件，一个 tpl，一个 select，并对接一个 title 和一个 options 字段的接口，将title字段作为tpl组件的内容，将 options 字段作为 select 组件的选项", "input": "", "output": "{\"type\": \"service\",\"body\": {\"tpl\": {\"type\": \"tpl\",\"body\": \"{{title}}\"},\"select\": {\"type\": \"select\",\"body\": {\"options\": \"{{options}}\"}}}}"}, {"instruction": "用 AMIS 生成一个name为tpl的下拉框组件和一个平级的service组件，下拉框的值作为url参数传递给service组件的数据获取接口", "input": "", "output": "{\"type\": \"select\",\"name\": \"tpl\",\"label\": \"下拉框\",\"options\": [{\"label\": \"选项1\",\"value\": \"option1\"},{\"label\": \"选项2\",\"value\": \"option2\"},{\"label\": \"选项3\",\"value\": \"option3\"}]},{\"type\": \"service\",\"name\": \"service\",\"url\": \"/api/data?tpl={tpl}\"}"}, {"instruction": "用 AMIS 生成一个NAV导航，纵向摆放，并为第二个导航项添加角标", "input": "", "output": "{\"type\": \"nav\",\"props\": {\"direction\": \"vertical\"},\"children\": [{\"type\": \"nav.item\",\"props\": {\"label\": \"导航项1\"}},{\"type\": \"nav.item\",\"props\": {\"label\": \"导航项2\",\"badge\": \"2\"}},{\"type\": \"nav.item\",\"props\": {\"label\": \"导航项3\"}}]}"}, {"instruction": "用 AMIS 生成一个NAV导航，横向摆放，当导航数量超过5个时折叠展示", "input": "", "output": "{\"type\": \"nav\",\"props\": {\"mode\": \"horizontal\",\"collapse\": 5},\"children\": [{\"type\": \"nav.item\",\"props\": {\"key\": \"1\",\"title\": \"导航1\"}},{\"type\": \"nav.item\",\"props\": {\"key\": \"2\",\"title\": \"导航2\"}},{\"type\": \"nav.item\",\"props\": {\"key\": \"3\",\"title\": \"导航3\"}},{\"type\": \"nav.item\",\"props\": {\"key\": \"4\",\"title\": \"导航4\"}},{\"type\": \"nav.item\",\"props\": {\"key\": \"5\",\"title\": \"导航5\"}},{\"type\": \"nav.item\",\"props\": {\"key\": \"6\",\"title\": \"导航6\"}}]}"}, {"instruction": "用 AMIS 生成一个NAV导航，横向摆放，支持响应式收纳", "input": "", "output": "{\"type\": \"nav\",\"props\": {\"mode\": \"horizontal\",\"responsive\": true},\"children\": [{\"type\": \"nav.item\",\"props\": {\"key\": \"1\",\"title\": \"Home\",\"href\": \"/\"}},{\"type\": \"nav.item\",\"props\": {\"key\": \"2\",\"title\": \"About\",\"href\": \"/about\"}},{\"type\": \"nav.item\",\"props\": {\"key\": \"3\",\"title\": \"Services\",\"href\": \"/services\"}},{\"type\": \"nav.item\",\"props\": {\"key\": \"4\",\"title\": \"Contact\",\"href\": \"/contact\"}}]}"}, {"instruction": "用 AMIS 生成一个NAV导航，横向摆放，通过一个 API 获取导航项", "input": "", "output": "{\"nav\": [{\"name\": \"首页\",\"url\": \"/\"},{\"name\": \"产品\",\"url\": \"/products\"},{\"name\": \"关于我们\",\"url\": \"/about\"},{\"name\": \"联系我们\",\"url\": \"/contact\"}]}"}, {"instruction": "用 AMIS 生成一个NAV导航，包含二级导航和三级导航", "input": "", "output": "{\"nav\": [{\"name\": \"首页\",\"url\": \"/\"},{\"name\": \"产品\",\"url\": \"/products\",\"subNav\": [{\"name\": \"手机\",\"url\": \"/products/phone\",\"subNav\": [{\"name\": \"苹果\",\"url\": \"/products/phone/apple\"},{\"name\": \"三星\",\"url\": \"/products/phone/samsung\"}]},{\"name\": \"电脑\",\"url\": \"/products/computer\",\"subNav\": [{\"name\": \"笔记本\",\"url\": \"/products/computer/laptop\"},{\"name\": \"台式机\",\"url\": \"/products/computer/desktop\"}]}]},{\"name\": \"关于我们\",\"url\": \"/about\"}]}"}, {"instruction": "用 AMIS 生成一个NAV导航，纵向摆放，通过一个 API 获取导航项，支持懒加载", "input": "", "output": "{\"nav\": [{\"name\": \"首页\",\"url\": \"/home\"},{\"name\": \"产品\",\"url\": \"/products\"},{\"name\": \"关于\",\"url\": \"/about\"},{\"name\": \"联系我们\",\"url\": \"/contact\"}]}"}, {"instruction": "用 AMIS 生成一个NAV导航，纵向摆放，并为第二个导航项添加角标", "input": "", "output": "{\"type\": \"nav\",\"props\": {\"direction\": \"vertical\"},\"children\": [{\"type\": \"nav.item\",\"props\": {\"label\": \"导航项1\"}},{\"type\": \"nav.item\",\"props\": {\"label\": \"导航项2\",\"badge\": \"2\"}},{\"type\": \"nav.item\",\"props\": {\"label\": \"导航项3\"}}]}"}, {"instruction": "用AMIS生成一个锚点导航容器组件，包括 “基本信息” “工作信息” “兴趣爱好” 三个导航区域，默认定位到“工作信息”", "input": "", "output": "{\"type\": \"amis\",\"body\": {\"type\": \"container\",\"className\": \"anchor-nav\",\"children\": [{\"type\": \"nav\",\"className\": \"anchor-nav__list\",\"activeKey\": \"work\",\"children\": [{\"type\": \"nav-item\",\"eventKey\": \"basic\",\"label\": \"基本信息\"},{\"type\": \"nav-item\",\"eventKey\": \"work\",\"label\": \"工作信息\"},{\"type\": \"nav-item\",\"eventKey\": \"interest\",\"label\": \"兴趣爱好\"}]},{\"type\": \"container\",\"className\": \"anchor-nav__content\",\"children\": [{\"type\": \"container\",\"className\": \"anchor-nav__section\",\"visible\": \"${activeKey === 'basic'}\",\"children\": [{\"type\": \"p\",\"content\": \"这是基本信息区域\"}]},{\"type\": \"container\",\"className\": \"anchor-nav__section\",\"visible\": \"${activeKey === 'work'}\",\"children\": [{\"type\": \"p\",\"content\": \"这是工作信息区域\"}]},{\"type\": \"container\",\"className\": \"anchor-nav__section\",\"visible\": \"${activeKey === 'interest'}\",\"children\": [{\"type\": \"p\",\"content\": \"这是兴趣爱好区域\"}]}]}]}}"}, {"instruction": "用AMIS生成一个锚点导航容器组件，导航水平摆放，包括 “基本信息” “工作信息” “兴趣爱好” 三个导航区域，分别对应三个表单", "input": "", "output": "{\"type\": \"container\",\"props\": {\"direction\": \"row\",\"alignItems\": \"center\",\"justifyContent\": \"space-between\"},\"children\": [{\"type\": \"anchor\",\"props\": {\"text\": \"基本信息\",\"href\": \"#basic-info\"}},{\"type\": \"anchor\",\"props\": {\"text\": \"工作信息\",\"href\": \"#work-info\"}},{\"type\": \"anchor\",\"props\": {\"text\": \"兴趣爱好\",\"href\": \"#interests\"}}]}"}, {"instruction": "用AMIS生成一个文字提示容器，包裹一行文本 “测试文本”，当鼠标悬停时展示一行提示 “测试文本 tooltip 展示”", "input": "", "output": "{\"type\": \"tooltip\",\"content\": {\"type\": \"container\",\"children\": [{\"type\": \"text\",\"text\": \"测试文本\"}],\"tooltip\": \"测试文本 tooltip 展示\"}}"}, {"instruction": "用AMIS生成一个文字提示容器，包裹一个图片组件，鼠标点击时展示提示“示例图片”，提示位置位于下方，向右偏移10像素", "input": "", "output": "{\"type\": \"container\",\"children\": [{\"type\": \"text\",\"text\": \"示例图片\",\"visible\": false,\"position\": {\"top\": \"100%\",\"left\": \"10px\"}},{\"type\": \"image\",\"url\": \"图片的URL\",\"onClick\": {\"type\": \"show\",\"target\": \"提示文字的ID\"}}]}"}, {"instruction": "用AMIS生成一个文字提示容器，提示框不展示箭头", "input": "", "output": "{\"type\": \"container\",\"items\": [{\"type\": \"text\",\"text\": \"这是一个文字提示容器\",\"wrap\": true}],\"style\": {\"hintStyle\": {\"showArrow\": false}}}"}, {"instruction": "用AMIS生成一个文字提示容器，提示框延迟1秒展示，延迟2秒隐藏", "input": "", "output": "{\"type\": \"container\",\"children\": [{\"type\": \"text\",\"text\": \"这是一个文字提示框\",\"delay\": 1000}],\"delay\": 2000}"}, {"instruction": "用AMIS生成一个文字提示容器，从上下文的 ${tip} 变量获取提示文案", "input": "", "output": "{\"type\": \"container\",\"items\": [{\"type\": \"text\",\"text\": \"${tip}\"}]}"}, {"instruction": "用AMIS生成一两个在同一行展示的文字提示容器", "input": "", "output": "{\"type\": \"container\",\"direction\": \"row\",\"children\": [{\"type\": \"text\",\"text\": \"提示1\"},{\"type\": \"text\",\"text\": \"提示2\"}]}"}, {"instruction": "用AMIS生成一个文字提示容器，定义包裹标签为 pre", "input": "", "output": "{\"type\": \"container\",\"props\": {\"className\": \"text-container\",\"wrap\": \"pre\"},\"children\": []}"}, {"instruction": "用AMis生成一个CRUD组件，包括 engine，browser，version 三列内容，engine列嵌入一个弹出提示，点击展示单元格完整内容", "input": "", "output": "{\"type\": \"crud\",\"api\": \"/api/data\",\"columns\": [{\"name\": \"engine\",\"label\": \"Engine\",\"sortable\": true,\"popOver\": true},{\"name\": \"browser\",\"label\": \"Browser\",\"sortable\": true},{\"name\": \"version\",\"label\": \"Version\",\"sortable\": true}]}"}, {"instruction": "用 AMIS 生成一个包含姓名、年龄、性别、意向日期的表单，提交给接口 /api/mock2/form/saveForm", "input": "", "output": "{\"name\": \"John\",\"age\": 25,\"gender\": \"male\",\"intentionDate\": \"2022-01-01\"}"}, {"instruction": "用 AMIS 生成一个包含邮箱、密码两个字段的表单，并将该表单设置为无边框，同时添加一个文字为“登录”的按钮，将其行为设置为表单提交", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"email\",\"name\": \"email\",\"label\": \"邮箱\",\"required\": true},{\"type\": \"password\",\"name\": \"password\",\"label\": \"密码\",\"required\": true},{\"type\": \"button\",\"label\": \"登录\",\"action\": \"submit\"}],\"style\": {\"border\": \"none\"}}"}, {"instruction": "用 AMIS 生成一个表单，包含姓名、手机号、邮箱、身份证号几个字段，其中手机号、邮箱、身份证号需要支持校验", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"姓名\",\"required\": true},{\"type\": \"text\",\"name\": \"phone\",\"label\": \"手机号\",\"required\": true,\"validations\": [{\"type\": \"regex\",\"pattern\": \"^1[3456789]\\\\d{9}$\",\"message\": \"请输入有效的手机号\"}]},{\"type\": \"text\",\"name\": \"email\",\"label\": \"邮箱\",\"required\": true,\"validations\": [{\"type\": \"regex\",\"pattern\": \"^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\\\.[a-zA-Z0-9_-]+)+$\",\"message\": \"请输入有效的邮箱\"}]},{\"type\": \"text\",\"name\": \"idCard\",\"label\": \"身份证号\",\"required\": true,\"validations\": [{\"type\": \"regex\",\"pattern\": \"^[1-9]\\\\d{5}(18|19|20)\\\\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\\\\d|3[01])\\\\d{3}[0-9Xx]$\",\"message\": \"请输入有效的身份证号\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含邮箱、密码、记住登录三个字读三，其中邮箱为必填，组件类型分别为邮箱输入、密码输入、单个复选框，标签和组件水平左右摆放", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"email\",\"label\": \"邮箱\",\"required\": true},{\"type\": \"password\",\"label\": \"密码\"},{\"type\": \"checkbox\",\"label\": \"记住登录\"}],\"layout\": {\"type\": \"horizontal\"}}"}, {"instruction": "用 AMIS 生成一个表单，水平摆放，左侧占比2，右侧占比10，偏移量为2", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"label\": \"左侧\",\"col\": {\"span\": 2}},{\"type\": \"input\",\"label\": \"右侧\",\"col\": {\"span\": 10,\"offset\": 2}}]}"}, {"instruction": "用 AMIS 生成一个表单，包含邮箱输入框、密码输入框、记住密码勾选框、登录按钮四个元素，以内联模式展示", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"email\",\"label\": \"邮箱\",\"placeholder\": \"请输入邮箱\"},{\"type\": \"input\",\"name\": \"password\",\"label\": \"密码\",\"placeholder\": \"请输入密码\",\"type\": \"password\"},{\"type\": \"checkbox\",\"name\": \"remember\",\"label\": \"记住密码\"},{\"type\": \"button\",\"label\": \"登录\"}],\"layout\": \"inline\"}"}, {"instruction": "用 AMIS 生成一个表单，隐藏默认提交按钮并支持回车提交", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"name\",\"label\": \"Name\",\"required\": true},{\"type\": \"input\",\"name\": \"email\",\"label\": \"Email\",\"required\": true},{\"type\": \"input\",\"name\": \"message\",\"label\": \"Message\",\"required\": true}],\"submitText\": \"\",\"onSubmit\": \"submitForm(event)\"}"}, {"instruction": "用AMIS生成一个表单，底部配置三个自定义提交按钮，行为分别为提交、弹窗和跳转链接", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"input\",\"name\": \"email\",\"label\": \"邮箱\"},{\"type\": \"input\",\"name\": \"phone\",\"label\": \"电话\"}],\"actions\": [{\"type\": \"submit\",\"label\": \"提交\"},{\"type\": \"dialog\",\"label\": \"弹窗\",\"dialog\": {\"title\": \"提示\",\"content\": \"提交成功！\"}},{\"type\": \"link\",\"label\": \"跳转链接\",\"link\": \"https://example.com\"}]}"}, {"instruction": "用 AMIS 生成一个表单，当表单过长时底部按钮栏固定在浏览器底部", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"label\": \"姓名\",\"name\": \"name\"},{\"type\": \"input\",\"label\": \"邮箱\",\"name\": \"email\"},{\"type\": \"input\",\"label\": \"电话\",\"name\": \"phone\"},{\"type\": \"input\",\"label\": \"地址\",\"name\": \"address\"},{\"type\": \"input\",\"label\": \"备注\",\"name\": \"notes\"}],\"actions\": [{\"type\": \"button\",\"label\": \"提交\",\"action\": \"submit\"}],\"layout\": {\"type\": \"flex\",\"direction\": \"column\",\"justify\": \"space-between\",\"align\": \"stretch\",\"height\": \"100vh\"}}"}, {"instruction": "用 AMIS 生成一个表单，将整个表单设置为静态展示", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"label\": \"姓名\",\"name\": \"name\",\"disabled\": true},{\"type\": \"input\",\"label\": \"年龄\",\"name\": \"age\",\"disabled\": true},{\"type\": \"input\",\"label\": \"邮箱\",\"name\": \"email\",\"disabled\": true},{\"type\": \"input\",\"label\": \"电话\",\"name\": \"phone\",\"disabled\": true}]}"}, {"instruction": "用 AMIS 生成一个表单，初始为静态展示，表单上有一个按钮，能够切换展示态和编辑态", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"label\": \"姓名\",\"name\": \"name\",\"disabled\": true},{\"type\": \"input\",\"label\": \"年龄\",\"name\": \"age\",\"disabled\": true},{\"type\": \"button\",\"label\": \"编辑\",\"onClick\": \"toggleEditMode\"}]}"}, {"instruction": "用AMIS生成一个表单，通过一个API /api/mock2/form/initForm 返回姓名和邮箱两个字段，并将其填充到表单中名为 name的文本输入框和名为 email 的邮箱输入框中", "input": "", "output": "{\"schema\": {\"type\": \"object\",\"properties\": {\"name\": {\"type\": \"string\",\"title\": \"姓名\"},\"email\": {\"type\": \"string\",\"title\": \"邮箱\"}}},\"uiSchema\": {\"name\": {\"ui:widget\": \"text\"},\"email\": {\"ui:widget\": \"email\"}}}"}, {"instruction": "用AMIS生成一个表单，通过一个初始化 API /api/mock2/form/initForm 返回初始化数据，每隔 10 秒轮询一次", "input": "", "output": "您可以使用AMIS的Form组件来生成一个表单，并通过初始化API来获取初始化数据。您可以使用AMIS的Polling组件来实现每隔10秒轮询一次。首先，您需要在AMIS的页面中引入Form和Polling组件，并设置初始化API和轮询间隔。以下是一个示例代码：{\"type\": \"form\",\"name\": \"myForm\",\"api\": \"/api/mock2/form/initForm\",\"interval\": 10000,\"controls\": [// 表单控件配置]}在上面的示例中，我们使用了Form组件，并设置了name属性为\"myForm\"，api属性为\"/api/mock2/form/initForm\"，interval属性为10000（即10秒）。接下来，您需要在初始化API中返回表单的初始化数据。您可以根据您的需求来返回相应的数据。以下是一个示例代码：javascript// 初始化API的实现app.get('/api/mock2/form/initForm', function(req, res) {// 返回表单的初始化数据res.json({// 初始化数据});});在上面的示例中，我们使用了Express框架来实现初始化API。您可以根据您的实际情况来实现相应的API。最后，您可以根据您的需求来配置表单的控件。您可以使用AMIS的各种表单控件来配置表单的输入项、下拉选项等。根据您的实际需求来配置相应的控件。希望以上信息对您有所帮助！如果您有任何其他问题，请随时提问。"}, {"instruction": "用 AMIS 生成一个表单，用静态数据 {\"name\": \"rick\", \"email\": \"rick@gmail.com\"} 对表单进行初始化填充", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"name\",\"label\": \"Name\",\"value\": \"rick\"},{\"type\": \"input\",\"name\": \"email\",\"label\": \"Email\",\"value\": \"rick@gmail.com\"}]}"}, {"instruction": "用 AMIS 生成一个包含摄像头拍摄图片和当前时间字段的表单，提交给接口 /api/mock2/form/saveForm，每隔三秒提交一次", "input": "", "output": "{\"formId\": \"123456\",\"status\": \"success\"}"}, {"instruction": "用 AMIS 生成一个表单，包含 A 和 B 两个文本输入框，A 和 B 输入的文本长度之和不得超过 1500 否则报错", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"A\",\"label\": \"A\",\"maxLength\": 1500},{\"type\": \"text\",\"name\": \"B\",\"label\": \"B\",\"maxLength\": 1500}],\"onSubmit\": \"handleSubmit\"}"}, {"instruction": "用 AMIS 生成一个表单，包含 A 和 B 两个文本输入框，A 和 B 输入的文本长度之和不得超过 1500 否则报错，报错时同时高亮输入框A和B", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"A\",\"label\": \"A\",\"required\": true,\"maxLength\": 1500},{\"type\": \"text\",\"name\": \"B\",\"label\": \"B\",\"required\": true,\"maxLength\": 1500}],\"validations\": [{\"type\": \"custom\",\"message\": \"A和B输入的文本长度之和不能超过1500\",\"validate\": \"function(value, form) { return (form.A.length + form.B.length) <= 1500; }\",\"fields\": [\"A\", \"B\"]}]}"}, {"instruction": "用 AMIS 生成一个表单，表单中包含一个按钮，点击按钮可重置表单", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"button\",\"label\": \"重置\",\"onClick\": \"resetForm\"}]}"}, {"instruction": "用 AMIS 生成一个表单，开启调试模式展示当前表单的数据域", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"name\",\"label\": \"姓名\",\"required\": true},{\"type\": \"input\",\"name\": \"email\",\"label\": \"邮箱\",\"required\": true},{\"type\": \"select\",\"name\": \"gender\",\"label\": \"性别\",\"options\": [{\"label\": \"男\",\"value\": \"male\"},{\"label\": \"女\",\"value\": \"female\"}],\"required\": true},{\"type\": \"checkbox\",\"name\": \"hobbies\",\"label\": \"爱好\",\"options\": [{\"label\": \"篮球\",\"value\": \"basketball\"},{\"label\": \"足球\",\"value\": \"football\"},{\"label\": \"游泳\",\"value\": \"swimming\"}]},{\"type\": \"button\",\"label\": \"提交\"}],\"debug\": true}"}, {"instruction": "用 AMIS 生成一个表单，提交成功后将表单重置至初始状态", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"name\",\"label\": \"姓名\",\"required\": true},{\"type\": \"input\",\"name\": \"email\",\"label\": \"邮箱\",\"required\": true},{\"type\": \"button\",\"label\": \"提交\",\"onClick\": \"submitForm\"}],\"onSubmit\": \"handleFormSubmit\",\"onReset\": \"handleFormReset\"}"}, {"instruction": "用 AMIS 生成一个表单，表单提交成功后跳转到 demo/list", "input": "", "output": "{\"success\": true,\"message\": \"表单提交成功\",\"data\": {\"name\": \"John\",\"email\": \"john@example.com\",\"phone\": \"1234567890\"}}"}, {"instruction": "用 AMIS 生成一个表单和一个service组件，表单提交成功后触发 service 组件的刷新", "input": "", "output": "可以使用 AMIS 的 Form 组件和 Service 组件来实现你的需求。首先，你需要在 AMIS 的页面中添加一个 Form 组件和一个 Service 组件。下面是一个示例代码，展示了如何使用 AMIS 生成一个表单和一个 service 组件，并在表单提交成功后触发 service 组件的刷新：{\"type\": \"page\",\"title\": \"表单和 Service 示例\",\"body\": [{\"type\": \"form\",\"title\": \"表单\",\"api\": \"/api/submit\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"email\",\"name\": \"email\",\"label\": \"邮箱\"},{\"type\": \"button\",\"label\": \"提交\",\"actionType\": \"ajax\",\"api\": \"/api/submit\",\"messages\": {\"success\": \"提交成功\"},\"onSuccess\": {\"type\": \"service\",\"api\": \"/api/refresh\",\"messages\": {\"success\": \"刷新成功\"}}}]},{\"type\": \"service\",\"api\": \"/api/refresh\",\"messages\": {\"success\": \"刷新成功\"}}]}在上面的示例中，我们使用了 Form 组件来生成一个表单，其中包含了姓名和邮箱两个输入框，以及一个提交按钮。当用户点击提交按钮时，表单会向 `/api/submit` 发送请求，并在请求成功后触发 Service 组件的刷新。Service 组件的 `api` 属性指定了刷新的接口地址，这里我们使用了 `/api/refresh`。在请求成功后，会显示一个成功的提示信息。请注意，上述示例中的接口地址 `/api/submit` 和 `/api/refresh` 只是示意，你需要根据实际情况修改为你自己的接口地址。希望以上信息对你有所帮助！如果你还有其他问题，请随时提问。"}, {"instruction": "用 AMIS 生成一个表单，禁用回车提交", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"name\",\"label\": \"姓名\",\"required\": true},{\"type\": \"input\",\"name\": \"email\",\"label\": \"邮箱\",\"required\": true},{\"type\": \"button\",\"label\": \"提交\",\"onClick\": \"return false;\"}]}"}, {"instruction": "用 AMIS 生成一个表单，表单上有一个单选组件，包含两个选项 A，B，和两个文本框组件 C，D，当选中 A 时C显示，D隐藏，选中B时D显示，C隐藏", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"radio\",\"name\": \"option\",\"label\": \"选项\",\"options\": [{\"label\": \"A\",\"value\": \"A\"},{\"label\": \"B\",\"value\": \"B\"}]},{\"type\": \"text\",\"name\": \"C\",\"label\": \"文本框C\",\"visible\": \"option === 'A'\"},{\"type\": \"text\",\"name\": \"D\",\"label\": \"文本框D\",\"visible\": \"option === 'B'\"}]}"}, {"instruction": "用AMIS 生成一个表单，包含一个文本框组件，设置该组件为必填", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"textbox\",\"label\": \"文本框\",\"required\": true}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，并为该组件添加必须为数字类型的校验规则", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"numberInput\",\"label\": \"Number Input\",\"rules\": [{\"type\": \"number\",\"message\": \"Please enter a valid number\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，并为该组件添加必须为数字类型，并且该数字不得小于10的的校验规则", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"number\",\"label\": \"Number\",\"rules\": [{\"type\": \"number\",\"message\": \"Please enter a valid number\"},{\"type\": \"min\",\"value\": 10,\"message\": \"Number must be greater than or equal to 10\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，并为该组件添加必须为Email的校验规则", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"textbox\",\"name\": \"email\",\"label\": \"Email\",\"rules\": [{\"type\": \"email\",\"message\": \"请输入有效的Email地址\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，并为该组件添加必须为Url的校验规则", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"url\",\"label\": \"URL\",\"rules\": [{\"type\": \"url\",\"message\": \"请输入有效的URL\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，并为该组件添加必须为数值的校验规则", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"numberInput\",\"label\": \"Number Input\",\"rules\": [{\"required\": true,\"message\": \"Please enter a number\"},{\"pattern\": \"^[0-9]+$\",\"message\": \"Please enter a valid number\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，并为该组件添加必须为字母的校验规则", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"textbox\",\"name\": \"text\",\"label\": \"Text\",\"rules\": [{\"type\": \"regex\",\"pattern\": \"^[a-zA-Z]+$\",\"message\": \"请输入字母\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，并为该组件添加必须为字母或数字的校验规则", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"textbox\",\"name\": \"input\",\"label\": \"Input\",\"rules\": [{\"type\": \"pattern\",\"pattern\": \"^[a-zA-Z0-9]+$\",\"message\": \"Please enter letters or numbers only.\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，并为该组件添加必须为整型的校验规则", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"number\",\"label\": \"Number\",\"rules\": [{\"type\": \"integer\",\"message\": \"Please enter an integer\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，并为该组件添加必须为浮点型的校验规则", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"inputField\",\"label\": \"Input Field\",\"rules\": [{\"type\": \"float\",\"message\": \"Please enter a valid float number\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，并为该组件添加长度正好等于20的校验规则", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"textbox\",\"name\": \"input\",\"label\": \"Input\",\"rules\": [{\"type\": \"length\",\"min\": 20,\"max\": 20,\"message\": \"请输入长度为20的内容\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，指定输入内容的最小长度为1，最大长度为100", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"textbox\",\"name\": \"input\",\"label\": \"Input\",\"minLength\": 1,\"maxLength\": 100}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，指定输入的值必须与上下文变量${target}一致", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"textbox\",\"name\": \"input\",\"label\": \"Input\",\"required\": true,\"validation\": {\"type\": \"custom\",\"rule\": \"value === target\",\"message\": \"Input must be equal to ${target}\"}}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，校验输入是否为合法手机号", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"phone\",\"label\": \"手机号\",\"validations\": [{\"type\": \"pattern\",\"pattern\": \"^1[3456789]\\\\d{9}$\",\"message\": \"请输入合法的手机号\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，校验输入是否为合法电话号码", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"textbox\",\"name\": \"phone\",\"label\": \"电话号码\",\"validators\": [{\"type\": \"regex\",\"pattern\": \"^1[3456789]\\\\d{9}$\",\"message\": \"请输入合法的电话号码\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含一个文本框组件，校验输入是否命中正则 /^[a-zA-Z\\d]+$/", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"textbox\",\"name\": \"input\",\"label\": \"输入\",\"required\": true,\"pattern\": \"^[a-zA-Z\\\\d]+$\",\"errorMessage\": \"输入不符合要求\"}]}"}, {"instruction": "生成一个 AMIS 数组输入框组件，单个组件为文本框类型，支持拖动排序", "input": "", "output": "{\"type\": \"array\",\"title\": \"AMIS 数组输入框组件\",\"items\": {\"type\": \"string\",\"title\": \"文本框\",\"ui:widget\": \"text\"},\"ui:widget\": \"sortable\"}"}, {"instruction": "生成一个 AMIS 数组输入框组件，单个组件为文本框类型，输入框组件内容最小长度为1，最大长度为5", "input": "", "output": "{\"type\": \"array\",\"title\": \"输入框组件\",\"items\": {\"type\": \"string\",\"minLength\": 1,\"maxLength\": 5}}"}, {"instruction": "生成一个 AMIS 数组输入框组件，单个组件为文本框类型，默认新增时使用默认值0填充文本框", "input": "", "output": "{\"type\": \"array\",\"title\": \"AMIS 数组输入框组件\",\"items\": {\"type\": \"string\",\"default\": \"0\"}}"}, {"instruction": "生成一个 AMIS 按钮点选组件，包含 Option A、Option B、Option C 三个选项，其值分别为 A、B、C", "input": "", "output": "{\"type\": \"button-group\",\"name\": \"options\",\"label\": \"Options\",\"options\": [{\"label\": \"Option A\",\"value\": \"A\"},{\"label\": \"Option B\",\"value\": \"B\"},{\"label\": \"Option C\",\"value\": \"C\"}]}"}, {"instruction": "生成一个 AMIS 按钮点选组件，包含 Option A、Option B、Option C 三个选项，其值分别为 A、B、C，垂直展示", "input": "", "output": "{\"type\": \"button-group\",\"vertical\": true,\"options\": [{\"label\": \"Option A\",\"value\": \"A\"},{\"label\": \"Option B\",\"value\": \"B\"},{\"label\": \"Option C\",\"value\": \"C\"}]}"}, {"instruction": "生成一个 AMIS 按钮点选组件，主题为 light，活跃主题为 warning", "input": "", "output": "{\"type\": \"button-group\",\"theme\": \"light\",\"activeTheme\": \"warning\",\"children\": [{\"type\": \"button\",\"label\": \"Button 1\"},{\"type\": \"button\",\"label\": \"Button 2\"},{\"type\": \"button\",\"label\": \"Button 3\"}]}"}, {"instruction": "生成一个 AMIS 按钮点选组件，包含三个按钮，为第三个按钮添加一个 ribbon 角标", "input": "", "output": "{\"type\": \"button-group\",\"buttons\": [{\"type\": \"button\",\"label\": \"Button 1\"},{\"type\": \"button\",\"label\": \"Button 2\"},{\"type\": \"button\",\"label\": \"Button 3\",\"ribbon\": {\"text\": \"New\"}}]}"}, {"instruction": "生成一个 AMIS 勾选框组件，配置勾选时的值为 1，不勾选时的值为 0", "input": "", "output": "{\"type\": \"checkbox\",\"name\": \"checkbox\",\"label\": \"勾选框\",\"value\": 0,\"options\": [{\"label\": \"选项1\",\"value\": 1}]}"}, {"instruction": "生成一个 AMIS 勾选框，使用按钮模式", "input": "", "output": "{\"type\": \"checkbox\",\"mode\": \"button\",\"options\": [{\"label\": \"选项1\",\"value\": \"option1\"},{\"label\": \"选项2\",\"value\": \"option2\"},{\"label\": \"选项3\",\"value\": \"option3\"}]}"}, {"instruction": "生成一个 AMIS 复选框，包含四个选项，将其结果格式设置为数组", "input": "", "output": "{\"type\": \"checkbox\",\"name\": \"amisCheckbox\",\"label\": \"AMIS 复选框\",\"options\": [{\"label\": \"选项1\",\"value\": \"option1\"},{\"label\": \"选项2\",\"value\": \"option2\"},{\"label\": \"选项3\",\"value\": \"option3\"},{\"label\": \"选项4\",\"value\": \"option4\"}],\"valueType\": \"array\"}"}, {"instruction": "生成一个 AMIS 复选框，包含四个选项，将其结果格式设置为数组，并只提取 value", "input": "", "output": "{\"type\": \"checkbox\",\"name\": \"amisCheckbox\",\"label\": \"AMIS 复选框\",\"options\": [{\"label\": \"选项1\",\"value\": \"option1\"},{\"label\": \"选项2\",\"value\": \"option2\"},{\"label\": \"选项3\",\"value\": \"option3\"},{\"label\": \"选项4\",\"value\": \"option4\"}],\"valueType\": \"array\",\"extractValue\": true}"}, {"instruction": "生成一个 AMIS 复选框，支持全选", "input": "", "output": "{\"type\": \"checkbox\",\"name\": \"amisCheckbox\",\"label\": \"AMIS 复选框\",\"options\": [{\"label\": \"选项1\",\"value\": \"option1\"},{\"label\": \"选项2\",\"value\": \"option2\"},{\"label\": \"选项3\",\"value\": \"option3\"}],\"joinValues\": true,\"delimiter\": \",\",\"selectAll\": true}"}, {"instruction": "生成一个 AMIS 复选框，包含 OPtionA，OptionB，OptionC，OptionD 四个选项，按钮模式展示", "input": "", "output": "{\"type\": \"checkbox\",\"name\": \"amisCheckbox\",\"label\": \"AMIS复选框\",\"options\": [{\"label\": \"OptionA\",\"value\": \"optionA\"},{\"label\": \"OptionB\",\"value\": \"optionB\"},{\"label\": \"OptionC\",\"value\": \"optionC\"},{\"label\": \"OptionD\",\"value\": \"optionD\"}],\"mode\": \"button\"}"}, {"instruction": "生成一个 AMIS 复选框，包含 OPtionA，OptionB，OptionC，OptionD 四个选项，垂直方向展示", "input": "", "output": "{\"type\": \"checkbox\",\"name\": \"amisCheckbox\",\"label\": \"AMIS复选框\",\"options\": [{\"label\": \"OptionA\",\"value\": \"optionA\"},{\"label\": \"OptionB\",\"value\": \"optionB\"},{\"label\": \"OptionC\",\"value\": \"optionC\"},{\"label\": \"OptionD\",\"value\": \"optionD\"}],\"inline\": false}"}, {"instruction": "生成一个 AMIS 复选框，包含 OPtionA，OptionB，OptionC，OptionD 四个选项，分两列展示", "input": "", "output": "{\"type\": \"checkbox\",\"name\": \"amisCheckbox\",\"label\": \"AMIS复选框\",\"columns\": 2,\"options\": [{\"label\": \"OptionA\",\"value\": \"optionA\"},{\"label\": \"OptionB\",\"value\": \"optionB\"},{\"label\": \"OptionC\",\"value\": \"optionC\"},{\"label\": \"OptionD\",\"value\": \"optionD\"}]}"}, {"instruction": "生成一个AMIS 复选框，label 为 “分组选择”,  支持全选， 分组“A类型” 下包含三个子选项， “B类型”下包含两个子选项", "input": "", "output": "{\"type\": \"checkbox\",\"name\": \"groupSelection\",\"label\": \"分组选择\",\"options\": [{\"label\": \"A类型\",\"options\": [{\"label\": \"子选项1\"},{\"label\": \"子选项2\"},{\"label\": \"子选项3\"}]},{\"label\": \"B类型\",\"options\": [{\"label\": \"子选项4\"},{\"label\": \"子选项5\"}]}]}"}, {"instruction": "生成一个 AMIS 城市选择器，选择级别支持到省份", "input": "", "output": "{\"type\": \"city-selector\",\"level\": \"province\",\"placeholder\": \"请选择省份\",\"data\": [{\"value\": \"北京市\",\"label\": \"北京市\"},{\"value\": \"天津市\",\"label\": \"天津市\"},{\"value\": \"河北省\",\"label\": \"河北省\"},{\"value\": \"山西省\",\"label\": \"山西省\"},{\"value\": \"内蒙古自治区\",\"label\": \"内蒙古自治区\"},{\"value\": \"辽宁省\",\"label\": \"辽宁省\"},{\"value\": \"吉林省\",\"label\": \"吉林省\"},{\"value\": \"黑龙江省\",\"label\": \"黑龙江省\"},{\"value\": \"上海市\",\"label\": \"上海市\"},{\"value\": \"江苏省\",\"label\": \"江苏省\"},{\"value\": \"浙江省\",\"label\": \"浙江省\"},{\"value\": \"安徽省\",\"label\": \"安徽省\"},{\"value\": \"福建省\",\"label\": \"福建省\"},{\"value\": \"江西省\",\"label\": \"江西省\"},{\"value\": \"山东省\",\"label\": \"山东省\"},{\"value\": \"河南省\",\"label\": \"河南省\"},{\"value\": \"湖北省\",\"label\": \"湖北省\"},{\"value\": \"湖南省\",\"label\": \"湖南省\"},{\"value\": \"广东省\",\"label\": \"广东省\"},{\"value\": \"广西壮族自治区\",\"label\": \"广西壮族自治区\"},{\"value\": \"海南省\",\"label\": \"海南省\"},{\"value\": \"重庆市\",\"label\": \"重庆市\"},{\"value\": \"四川省\",\"label\": \"四川省\"},{\"value\": \"贵州省\",\"label\": \"贵州省\"},{\"value\": \"云南省\",\"label\": \"云南省\"},{\"value\": \"西藏自治区\",\"label\": \"西藏自治区\"},{\"value\": \"陕西省\",\"label\": \"陕西省\"},{\"value\": \"甘肃省\",\"label\": \"甘肃省\"},{\"value\": \"青海省\",\"label\": \"青海省\"},{\"value\": \"宁夏回族自治区\",\"label\": \"宁夏回族自治区\"},{\"value\": \"新疆维吾尔自治区\",\"label\": \"新疆维吾尔自治区\"},{\"value\": \"台湾省\",\"label\": \"台湾省\"},{\"value\": \"香港特别行政区\",\"label\": \"香港特别行政区\"},{\"value\": \"澳门特别行政区\",\"label\": \"澳门特别行政区\"}]}"}, {"instruction": "生成一个 AMIS 城市选择器，选择级别支持到城市", "input": "", "output": "{\"type\": \"city-selector\",\"level\": \"city\"}"}, {"instruction": "生成一个 AMIS 城市选择器，值保留详细信息", "input": "", "output": "{\"type\": \"city-selector\",\"props\": {\"value\": \"\",\"options\": [{\"label\": \"北京\",\"value\": \"beijing\",\"detail\": {\"population\": \"21.54 million\",\"area\": \"16,410 square kilometers\",\"language\": \"Mandarin\"}},{\"label\": \"上海\",\"value\": \"shanghai\",\"detail\": {\"population\": \"24.28 million\",\"area\": \"6,340 square kilometers\",\"language\": \"Mandarin\"}},{\"label\": \"广州\",\"value\": \"guangzhou\",\"detail\": {\"population\": \"14.04 million\",\"area\": \"7,434 square kilometers\",\"language\": \"Cantonese\"}},{\"label\": \"深圳\",\"value\": \"shenzhen\",\"detail\": {\"population\": \"12.53 million\",\"area\": \"1,991 square kilometers\",\"language\": \"Mandarin\"}}]}}"}, {"instruction": "生成一个 AMIS 颜色选择器，预设底部可选的颜色值为 ['#D0021B', '#F5A623', '#F8E71C', '#8B572A']", "input": "", "output": "{\"type\": \"color-picker\",\"props\": {\"presetColors\": [\"#D0021B\", \"#F5A623\", \"#F8E71C\", \"#8B572A\"]}}"}, {"instruction": "生成一个 AMIS 颜色选择器，支持透明度调节", "input": "", "output": "{\"type\": \"color-picker\",\"props\": {\"alpha\": true}}"}, {"instruction": "生成一个 AMIS combo组件，每个子项包含 “姓名” “部门” “尺码” 三个输入字段", "input": "", "output": "{\"type\": \"combo\",\"name\": \"combo\",\"label\": \"Combo组件\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"text\",\"name\": \"department\",\"label\": \"部门\"},{\"type\": \"text\",\"name\": \"size\",\"label\": \"尺码\"}]}"}, {"instruction": "生成一个 AMIS combo组件，combo内表单项换行展示", "input": "", "output": "{\"type\": \"combo\",\"name\": \"myCombo\",\"label\": \"Combo组件\",\"controls\": [{\"type\": \"input\",\"name\": \"firstName\",\"label\": \"姓氏\"},{\"type\": \"input\",\"name\": \"lastName\",\"label\": \"名字\"}],\"inline\": false}"}, {"instruction": "生成一个 AMIS combo组件，支持新增、删除", "input": "", "output": "{\"type\": \"combo\",\"name\": \"myCombo\",\"label\": \"Combo组件\",\"controls\": [{\"type\": \"input\",\"name\": \"input1\",\"label\": \"输入框1\"},{\"type\": \"input\",\"name\": \"input2\",\"label\": \"输入框2\"}],\"addButton\": true,\"removeButton\": true}"}, {"instruction": "生成一个 AMIS combo组件，子项为一个文本框和一个勾选框，支持新增、删除，最小添加条数为1，最大可添加条数为5", "input": "", "output": "{\"type\": \"combo\",\"name\": \"myCombo\",\"label\": \"Combo组件\",\"minItems\": 1,\"maxItems\": 5,\"items\": [{\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"text1\",\"label\": \"文本框\"},{\"type\": \"checkbox\",\"name\": \"checkbox1\",\"label\": \"勾选框\"}]}]}"}, {"instruction": "生成一个 AMIS combo组件，支持新增、删除", "input": "", "output": "{\"type\": \"combo\",\"name\": \"myCombo\",\"label\": \"Combo组件\",\"value\": [],\"addButtonLabel\": \"新增\",\"removeButtonLabel\": \"删除\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"名称\"},{\"type\": \"number\",\"name\": \"age\",\"label\": \"年龄\"}]}"}, {"instruction": "生成一个 AMIS combo组件，子项为一个文本框和一个包含a, b, c 三个选项的下拉框，指定下拉框的选值不可重复", "input": "", "output": "{\"type\": \"combo\",\"name\": \"myCombo\",\"label\": \"Combo组件\",\"children\": [{\"type\": \"textbox\",\"name\": \"myTextbox\",\"label\": \"文本框\"},{\"type\": \"select\",\"name\": \"mySelect\",\"label\": \"下拉框\",\"options\": [{\"label\": \"a\",\"value\": \"a\"},{\"label\": \"b\",\"value\": \"b\"},{\"label\": \"c\",\"value\": \"c\"}],\"unique\": true}]}"}, {"instruction": "生成一个 AMIS combo组件，支持拖拽排序", "input": "", "output": "{\"type\": \"combo\",\"draggable\": true,\"sortable\": true,\"children\": [{\"type\": \"div\",\"content\": \"Item 1\"},{\"type\": \"div\",\"content\": \"Item 2\"},{\"type\": \"div\",\"content\": \"Item 3\"}]}"}, {"instruction": "生成一个 AMIS combo组件，新增分组以 tabs 方式排列", "input": "", "output": "{\"type\": \"combo\",\"tabs\": true,\"children\": [{\"title\": \"Tab 1\",\"body\": \"Content for Tab 1\"},{\"title\": \"Tab 2\",\"body\": \"Content for Tab 2\"},{\"title\": \"Tab 3\",\"body\": \"Content for Tab 3\"}]}"}, {"instruction": "生成一个 AMIS combo组件，支持获取父级数据", "input": "", "output": "{\"type\": \"combo\",\"name\": \"myCombo\",\"label\": \"Combo组件\",\"value\": \"\",\"options\": [{\"label\": \"选项1\",\"value\": \"option1\"},{\"label\": \"选项2\",\"value\": \"option2\"},{\"label\": \"选项3\",\"value\": \"option3\"}],\"parentData\": \"\"}"}, {"instruction": "生成一个 AMIS combo组件，支持获取父级数据，当父级数据域中的 super_text 变量值更新的时候，同步更新组件内部数据引用的值", "input": "", "output": "{\"type\": \"combo\",\"name\": \"myCombo\",\"label\": \"My Combo\",\"value\": \"${super_text}\",\"options\": [{\"label\": \"Option 1\",\"value\": \"option1\"},{\"label\": \"Option 2\",\"value\": \"option2\"},{\"label\": \"Option 3\",\"value\": \"option3\"}]}"}, {"instruction": "生成一个 AMIS combo组件，支持新增、删除，删除按钮为一个标签为 “删除” 的按钮组件", "input": "", "output": "{\"type\": \"combo\",\"name\": \"myCombo\",\"label\": \"Combo组件\",\"controls\": [{\"type\": \"button\",\"label\": \"新增\",\"actionType\": \"dialog\",\"dialog\": {\"title\": \"新增\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"名称\"},{\"type\": \"text\",\"name\": \"description\",\"label\": \"描述\"}]},\"actions\": [{\"type\": \"submit\",\"label\": \"确定\"}]}},{\"type\": \"button\",\"label\": \"删除\",\"actionType\": \"ajax\",\"api\": \"/api/delete\",\"confirmText\": \"确定要删除吗？\",\"level\": \"danger\"}]}"}, {"instruction": "生成一个 AMIS 日期选择器，设置显示日期格式为类似 2020-04-14 这样的格式", "input": "", "output": "{\"type\": \"datepicker\",\"name\": \"datePicker\",\"label\": \"选择日期\",\"format\": \"YYYY-MM-DD\"}"}, {"instruction": "生成一个 AMIS 日期选择器，设置显示日期格式为类似 2020年04月14日 这样的格式", "input": "", "output": "{\"type\": \"datepicker\",\"name\": \"datePicker\",\"label\": \"选择日期\",\"format\": \"YYYY年MM月DD日\"}"}, {"instruction": "生成一个 AMIS 日期选择器，设置值格式为类似 2020-04-14 这样的格式", "input": "", "output": "{\"type\": \"datepicker\",\"name\": \"datePicker\",\"label\": \"选择日期\",\"format\": \"YYYY-MM-DD\"}"}, {"instruction": "生成一个 AMIS 日期选择器，设置默认值为今天", "input": "", "output": "{\"type\": \"datepicker\",\"name\": \"date\",\"label\": \"选择日期\",\"defaultValue\": \"today\"}"}, {"instruction": "生成一个 AMIS 日期选择器，设置默认值为明天", "input": "", "output": "{\"type\": \"date\",\"name\": \"datePicker\",\"label\": \"选择日期\",\"value\": \"tomorrow\"}"}, {"instruction": "生成一个 AMIS 日期选择器，设置默认值为一周前", "input": "", "output": "{\"type\": \"date\",\"name\": \"datePicker\",\"label\": \"选择日期\",\"defaultValue\": \"2022-01-01\",\"minDate\": \"2021-12-25\",\"maxDate\": \"2022-01-07\"}"}, {"instruction": "生成一个 AMIS 日期选择器，限制可选范围为 2020-01-01 至今天", "input": "", "output": "{\"type\": \"date\",\"name\": \"datePicker\",\"label\": \"选择日期\",\"min\": \"2020-01-01\",\"max\": \"{{moment().format('YYYY-MM-DD')}}\"}"}, {"instruction": "生成一个 AMIS 日期选择器，组件上方显示今天、昨天、本月初、三天前四个快捷键", "input": "", "output": "{\"type\": \"date-picker\",\"name\": \"datePicker\",\"label\": \"选择日期\",\"value\": \"\",\"quickOptions\": [{\"label\": \"今天\",\"value\": \"today\"},{\"label\": \"昨天\",\"value\": \"yesterday\"},{\"label\": \"本月初\",\"value\": \"startOfMonth\"},{\"label\": \"三天前\",\"value\": \"threeDaysAgo\"}]}"}, {"instruction": "生成一个 AMIS 日期选择器，以内嵌模式展示", "input": "", "output": "{\"type\": \"date\",\"name\": \"datePicker\",\"label\": \"选择日期\",\"mode\": \"inline\"}"}, {"instruction": "生成一个 AMIS 日期选择器，使用浏览器原生日期组件", "input": "", "output": "{\"type\": \"date\",\"name\": \"datePicker\",\"label\": \"选择日期\",\"placeholder\": \"请选择日期\",\"format\": \"yyyy-MM-dd\"}"}, {"instruction": "生成一个 AMIS 日期时间选择器，设置显示格式为类似 2020年04月14日 12时20分10秒 这样的格式", "input": "", "output": "{\"type\": \"datetime\",\"name\": \"datetimePicker\",\"label\": \"选择日期时间\",\"format\": \"YYYY年MM月DD日 HH时mm分ss秒\"}"}, {"instruction": "生成一个 AMIS 日期时间选择器，设置值格式为类似 2020-04-14 12:20:10 这样的格式", "input": "", "output": "{\"type\": \"datetime\",\"name\": \"datetime\",\"label\": \"选择日期时间\",\"format\": \"YYYY-MM-DD HH:mm:ss\"}"}, {"instruction": "生成一个 AMIS 日期时间选择器，设置默认值为一小时前", "input": "", "output": "{\"type\": \"datetime\",\"name\": \"datetimePicker\",\"label\": \"选择日期时间\",\"defaultValue\": \"now-1h\"}"}, {"instruction": "生成一个 AMIS 日期时间选择器，设置默认值为当前时间", "input": "", "output": "{\"type\": \"datetime\",\"name\": \"datetimePicker\",\"label\": \"选择日期时间\",\"value\": \"now\"}"}, {"instruction": "生成一个 AMIS 日期时间选择器，限制时间输入范围为每天的 8 点到 20 点", "input": "", "output": "{\"type\": \"datetime\",\"name\": \"datetimePicker\",\"label\": \"选择日期和时间\",\"format\": \"YYYY-MM-DD HH:mm\",\"min\": \"2021-01-01 08:00\",\"max\": \"2021-01-01 20:00\"}"}, {"instruction": "生成一个 AMIS 日期时间选择器，限制可选时间范围为 2020-06-11 16:06:58 到今天", "input": "", "output": "{\"type\": \"datetime\",\"name\": \"datetime\",\"label\": \"选择日期时间\",\"format\": \"YYYY-MM-DD HH:mm:ss\",\"min\": \"2020-06-11 16:06:58\",\"max\": \"{{moment().format('YYYY-MM-DD HH:mm:ss')}}\"}"}, {"instruction": "生成一个 AMIS 日期时间选择器，上方显示快捷键现在、8小时前、24小时前", "input": "", "output": "{\"type\": \"datetime\",\"name\": \"datetimePicker\",\"label\": \"选择日期时间\",\"format\": \"YYYY-MM-DD HH:mm:ss\",\"value\": \"\",\"quickOptions\": [{\"label\": \"现在\",\"value\": \"now\"},{\"label\": \"8小时前\",\"value\": \"8h\"},{\"label\": \"24小时前\",\"value\": \"24h\"}]}"}, {"instruction": "生成一个 AMIS 日期时间选择器，以内嵌模式显示", "input": "", "output": "{\"type\": \"datetime\",\"name\": \"datePicker\",\"label\": \"选择日期和时间\",\"mode\": \"inline\"}"}, {"instruction": "生成一个 AMIS 月份选择器，配置显示格式为 01月 这样的格式", "input": "", "output": "{\"type\": \"select\",\"name\": \"month\",\"label\": \"选择月份\",\"options\": [{ \"label\": \"01月\", \"value\": \"01\" },{ \"label\": \"02月\", \"value\": \"02\" },{ \"label\": \"03月\", \"value\": \"03\" },{ \"label\": \"04月\", \"value\": \"04\" },{ \"label\": \"05月\", \"value\": \"05\" },{ \"label\": \"06月\", \"value\": \"06\" },{ \"label\": \"07月\", \"value\": \"07\" },{ \"label\": \"08月\", \"value\": \"08\" },{ \"label\": \"09月\", \"value\": \"09\" },{ \"label\": \"10月\", \"value\": \"10\" },{ \"label\": \"11月\", \"value\": \"11\" },{ \"label\": \"12月\", \"value\": \"12\" }]}"}, {"instruction": "生成一个 AMIS 月份选择器，配置值格式为 01月 这样的格式", "input": "", "output": "{\"type\": \"select\",\"name\": \"month\",\"label\": \"选择月份\",\"options\": [{ \"label\": \"01月\", \"value\": \"01\" },{ \"label\": \"02月\", \"value\": \"02\" },{ \"label\": \"03月\", \"value\": \"03\" },{ \"label\": \"04月\", \"value\": \"04\" },{ \"label\": \"05月\", \"value\": \"05\" },{ \"label\": \"06月\", \"value\": \"06\" },{ \"label\": \"07月\", \"value\": \"07\" },{ \"label\": \"08月\", \"value\": \"08\" },{ \"label\": \"09月\", \"value\": \"09\" },{ \"label\": \"10月\", \"value\": \"10\" },{ \"label\": \"11月\", \"value\": \"11\" },{ \"label\": \"12月\", \"value\": \"12\" }]}"}, {"instruction": "生成一个 AMIS 月份选择器，设置默认值为2020-03", "input": "", "output": "{\"type\": \"select\",\"name\": \"month\",\"label\": \"选择月份\",\"defaultValue\": \"2020-03\",\"options\": [{ \"label\": \"一月\", \"value\": \"2020-01\" },{ \"label\": \"二月\", \"value\": \"2020-02\" },{ \"label\": \"三月\", \"value\": \"2020-03\" },{ \"label\": \"四月\", \"value\": \"2020-04\" },{ \"label\": \"五月\", \"value\": \"2020-05\" },{ \"label\": \"六月\", \"value\": \"2020-06\" },{ \"label\": \"七月\", \"value\": \"2020-07\" },{ \"label\": \"八月\", \"value\": \"2020-08\" },{ \"label\": \"九月\", \"value\": \"2020-09\" },{ \"label\": \"十月\", \"value\": \"2020-10\" },{ \"label\": \"十一月\", \"value\": \"2020-11\" },{ \"label\": \"十二月\", \"value\": \"2020-12\" }]}"}, {"instruction": "生成一个 AMIS 日期范围选择器，设置默认值为2022-08-01到2022-08-31", "input": "", "output": "{\"type\": \"date-range\",\"name\": \"dateRange\",\"label\": \"选择日期范围\",\"value\": [\"2022-08-01\", \"2022-08-31\"],\"min\": \"2022-01-01\",\"max\": \"2022-12-31\"}"}, {"instruction": "生成一个 AMIS 日期范围选择器，设置默认值为最近一周内", "input": "", "output": "{\"type\": \"date-range\",\"name\": \"dateRange\",\"label\": \"选择日期范围\",\"value\": [\"{{moment().subtract(1, 'week').format('YYYY-MM-DD')}}\",\"{{moment().format('YYYY-MM-DD')}}\"]}"}, {"instruction": "生成一个 AMIS 日期范围选择器，支持今天、昨天、上周、本周、本月、上个月、上个季度快捷键", "input": "", "output": "{\"type\": \"date-range-picker\",\"name\": \"dateRange\",\"label\": \"选择日期范围\",\"value\": {\"start\": \"\",\"end\": \"\"},\"quickRanges\": [{\"label\": \"今天\",\"start\": \"today\",\"end\": \"today\"},{\"label\": \"昨天\",\"start\": \"yesterday\",\"end\": \"yesterday\"},{\"label\": \"上周\",\"start\": \"last week\",\"end\": \"last week\"},{\"label\": \"本周\",\"start\": \"this week\",\"end\": \"this week\"},{\"label\": \"本月\",\"start\": \"this month\",\"end\": \"this month\"},{\"label\": \"上个月\",\"start\": \"last month\",\"end\": \"last month\"},{\"label\": \"上个季度\",\"start\": \"last quarter\",\"end\": \"last quarter\"}]}"}, {"instruction": "生成一个 AMIS 日期范围选择器，限制最小跨度为2天，最大跨度为 1 年", "input": "", "output": "{\"type\": \"date-range\",\"name\": \"dateRange\",\"label\": \"选择日期范围\",\"minSpan\": 2,\"maxSpan\": 365}"}, {"instruction": "生成一个 AMIS 日期范围选择器，关闭游标动画", "input": "", "output": "{\"type\": \"date-range-picker\",\"props\": {\"cursorAnimation\": false}}"}, {"instruction": "生成一个 AMIS 日期范围选择器，配置为可清除", "input": "", "output": "{\"type\": \"date-range\",\"name\": \"dateRange\",\"label\": \"选择日期范围\",\"clearable\": true}"}, {"instruction": "生成一个 AMIS 日期范围选择器，限制最小日期为2年前，最大日期为今天", "input": "", "output": "{\"type\": \"date-range\",\"name\": \"dateRange\",\"label\": \"选择日期范围\",\"minDate\": \"2 years ago\",\"maxDate\": \"today\"}"}, {"instruction": "生成一个 AMIS 日期时间范围选择器，设置默认值为2022-08-01 20:00:00到2022-08-3118:00:00", "input": "", "output": "{\"type\": \"datetime-range\",\"name\": \"dateRange\",\"label\": \"选择日期时间范围\",\"value\": [\"2022-08-01 20:00:00\", \"2022-08-31 18:00:00\"]}"}, {"instruction": "生成一个 AMIS 日期时间范围选择器，支持快捷键今天，昨天，最近1天，最近7天", "input": "", "output": "{\"type\": \"datetime\",\"name\": \"dateRange\",\"label\": \"日期范围\",\"format\": \"YYYY-MM-DD\",\"valueFormat\": \"YYYY-MM-DD\",\"quickOptions\": [{\"label\": \"今天\",\"value\": [\"{{moment().format('YYYY-MM-DD')}}\",\"{{moment().format('YYYY-MM-DD')}}\"]},{\"label\": \"昨天\",\"value\": [\"{{moment().subtract(1, 'days').format('YYYY-MM-DD')}}\",\"{{moment().subtract(1, 'days').format('YYYY-MM-DD')}}\"]},{\"label\": \"最近1天\",\"value\": [\"{{moment().subtract(1, 'days').format('YYYY-MM-DD')}}\",\"{{moment().format('YYYY-MM-DD')}}\"]},{\"label\": \"最近7天\",\"value\": [\"{{moment().subtract(7, 'days').format('YYYY-MM-DD')}}\",\"{{moment().format('YYYY-MM-DD')}}\"]}]}"}, {"instruction": "生成一个 AMIS 月份范围选择器，限制可选月份范围为一年前到本月", "input": "", "output": "{\"type\": \"date-range\",\"name\": \"monthRange\",\"label\": \"选择月份范围\",\"format\": \"YYYY-MM\",\"min\": \"{{moment().subtract(1, 'year').format('YYYY-MM')}}\",\"max\": \"{{moment().format('YYYY-MM')}}\"}"}, {"instruction": "生成一个 AMIS 月份范围选择器，限制最小跨度为一个月，最大跨度为12个月", "input": "", "output": "{\"type\": \"date-range\",\"name\": \"monthRange\",\"label\": \"选择月份范围\",\"minSpan\": \"1M\",\"maxSpan\": \"12M\",\"format\": \"YYYY-MM\"}"}, {"instruction": "生成一个AMIS 表单，包含一个表单项集组件，标题为“基本配置”，内含 “标题” “简介” 两个文本输入组件", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"fieldset\",\"title\": \"基本配置\",\"controls\": [{\"type\": \"text\",\"name\": \"title\",\"label\": \"标题\"},{\"type\": \"text\",\"name\": \"description\",\"label\": \"简介\"}]}]}"}, {"instruction": "生成一个AMIS 表单，包含一个表单项集组件，支持折叠，默认展开", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"fieldset\",\"title\": \"表单项集组件\",\"controls\": [{\"type\": \"input\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"input\",\"name\": \"email\",\"label\": \"邮箱\"},{\"type\": \"input\",\"name\": \"phone\",\"label\": \"电话\"}]}]}"}, {"instruction": "生成一个AMIS 表单，包含一个表单项集组件，子组件以水平模式展示", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"form-item-group\",\"mode\": \"horizontal\",\"controls\": [{\"type\": \"input\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"input\",\"name\": \"age\",\"label\": \"年龄\"},{\"type\": \"input\",\"name\": \"email\",\"label\": \"邮箱\"}]}]}"}, {"instruction": "生成一个AMIS 表单，包含一个表单项集组件，支持折叠，默认折叠，标题展示在底部", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"fieldset\",\"title\": \"表单项集组件\",\"collapsible\": true,\"collapsed\": true,\"titlePosition\": \"bottom\",\"controls\": [{\"type\": \"input\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"input\",\"name\": \"email\",\"label\": \"邮箱\"},{\"type\": \"input\",\"name\": \"phone\",\"label\": \"电话\"}]}]}"}, {"instruction": "生成一个AMIS 表单，包含一个表单项集组件，子组件为两个文本框和一个嵌套的表单项集组件，该组件下也有两个文本框", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"form-item-set\",\"controls\": [{\"type\": \"text\",\"name\": \"text1\",\"label\": \"文本框1\"},{\"type\": \"text\",\"name\": \"text2\",\"label\": \"文本框2\"},{\"type\": \"form-item-set\",\"controls\": [{\"type\": \"text\",\"name\": \"nestedText1\",\"label\": \"嵌套文本框1\"},{\"type\": \"text\",\"name\": \"nestedText2\",\"label\": \"嵌套文本框2\"}]}]}]}"}, {"instruction": "用 AMIS 生成一个表单，包含照片、姓名、年龄、籍贯、身份证号几个字段，其中照片、姓名、年龄在一个分组，籍贯、身份证号在一个分组", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"group\",\"controls\": [{\"type\": \"image\",\"label\": \"照片\",\"name\": \"photo\"},{\"type\": \"text\",\"label\": \"姓名\",\"name\": \"name\"},{\"type\": \"number\",\"label\": \"年龄\",\"name\": \"age\"}]},{\"type\": \"group\",\"controls\": [{\"type\": \"text\",\"label\": \"籍贯\",\"name\": \"hometown\"},{\"type\": \"text\",\"label\": \"身份证号\",\"name\": \"idNumber\"}]}]}"}, {"instruction": "用 AMIS 生成一个表单，通过一个 initAPI 返回初始化数据，包含 id 、姓名、邮箱三个字段，其中id字段使用 hidden 组件", "input": "", "output": "你可以使用 AMIS 的 `Form` 组件来生成表单，并通过 `initApi` 属性来获取初始化数据。下面是一个示例代码：{\"type\": \"form\",\"controls\": [{\"type\": \"hidden\",\"name\": \"id\"},{\"type\": \"text\",\"name\": \"姓名\",\"required\": true},{\"type\": \"email\",\"name\": \"邮箱\",\"required\": true}],\"initApi\": {\"url\": \"/api/initData\",\"method\": \"GET\"}}在上面的代码中，我们使用了 `Form` 组件，并定义了三个字段：`id`、`姓名` 和 `邮箱`。其中 `id` 字段使用了 `hidden` 组件，而 `姓名` 和 `邮箱` 字段分别使用了 `text` 和 `email` 组件。我们还通过 `initApi` 属性指定了一个初始化数据的 API 接口。你可以根据实际情况修改 `initApi` 的 `url` 和 `method` 属性来适配你的后端接口。"}, {"instruction": "生成一个 AMIS 输入框组合组件，包含一个输入框，输入框右侧是一个“搜索”按钮", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"search\",\"label\": \"搜索\",\"addonAfter\": {\"type\": \"button\",\"label\": \"搜索\"}}]}"}, {"instruction": "生成一个 AMIS 输入框组合组件，包含一个输入框，输入框左侧有一个下拉框，右侧是一个“GO”按钮", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"input\",\"label\": \"输入框\"},{\"type\": \"select\",\"name\": \"select\",\"label\": \"下拉框\",\"options\": [{\"label\": \"选项1\",\"value\": \"option1\"},{\"label\": \"选项2\",\"value\": \"option2\"},{\"label\": \"选项3\",\"value\": \"option3\"}]},{\"type\": \"button\",\"label\": \"GO\",\"actionType\": \"submit\"}]}"}, {"instruction": "生成一个 AMIS  ListSelect 列表，包含两个选项，限制为单选", "input": "", "output": "{\"type\": \"list-select\",\"name\": \"myList\",\"label\": \"Select an option\",\"multiple\": false,\"options\": [{\"label\": \"Option 1\",\"value\": \"option1\"},{\"label\": \"Option 2\",\"value\": \"option2\"}]}"}, {"instruction": "生成一个 AMIS  ListSelect 列表，包含两个选项，支持多选", "input": "", "output": "{\"type\": \"list-select\",\"multiple\": true,\"options\": [{\"label\": \"Option 1\",\"value\": \"option1\"},{\"label\": \"Option 2\",\"value\": \"option2\"}]}"}, {"instruction": "生成一个AMIS  ListSelect 列表，包含四个选项，支持多选，配置选项图片地址为 https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3893101144,2877209892&fm=23&gp=0.jpg", "input": "", "output": "{\"type\": \"list-select\",\"multiple\": true,\"options\": [{\"label\": \"选项1\",\"value\": \"option1\",\"image\": \"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3893101144,2877209892&fm=23&gp=0.jpg\"},{\"label\": \"选项2\",\"value\": \"option2\",\"image\": \"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3893101144,2877209892&fm=23&gp=0.jpg\"},{\"label\": \"选项3\",\"value\": \"option3\",\"image\": \"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3893101144,2877209892&fm=23&gp=0.jpg\"},{\"label\": \"选项4\",\"value\": \"option4\",\"image\": \"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3893101144,2877209892&fm=23&gp=0.jpg\"}]}"}, {"instruction": "生成一个AMIS 数字输入框，设置数字精度为2，上下 step 为0.01", "input": "", "output": "{\"type\": \"number\",\"name\": \"input\",\"label\": \"Number Input\",\"precision\": 2,\"step\": 0.01}"}, {"instruction": "生成一个AMIS 数字输入框，设置前缀为¥", "input": "", "output": "{\"type\": \"input\",\"name\": \"amount\",\"label\": \"金额\",\"addonBefore\": \"¥\"}"}, {"instruction": "生成一个AMIS 数字输入框，设置后缀为%", "input": "", "output": "{\"type\": \"input\",\"name\": \"percentageInput\",\"label\": \"Percentage\",\"addonAfter\": \"%\"}"}, {"instruction": "生成一个AMIS 数字输入框，展示千分分隔", "input": "", "output": "{\"type\": \"input\",\"name\": \"numberInput\",\"label\": \"数字输入框\",\"value\": \"\",\"addonAfter\": \"千分分隔\",\"format\": \"thousandSeparator\"}"}, {"instruction": "生成一个AMIS 数字输入框，设置单位为‘元’", "input": "", "output": "{\"type\": \"input\",\"name\": \"amount\",\"label\": \"金额\",\"addonAfter\": \"元\"}"}, {"instruction": "生成一个AMIS 数字输入框，设置展示方式为加强版", "input": "", "output": "{\"type\": \"input\",\"name\": \"numberInput\",\"label\": \"数字输入框\",\"addonBefore\": \"加强版\",\"addonAfter\": \"加强版\",\"showAddon\": true,\"showCount\": true,\"showClear\": true,\"showEye\": true,\"showTooltip\": true,\"showPopover\": true,\"showLoading\": true,\"showIcon\": true,\"showBorder\": true,\"showLabel\": true,\"showRequired\": true,\"showFeedback\": true,\"showExtra\": true,\"showHelp\": true,\"showValidate\": true,\"showValidateMessage\": true,\"showValidatePopover\": true,\"showValidateTooltip\": true,\"showValidateIcon\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\"showValidateRequired\": true,\"showValidateFeedback\": true,\"showValidateExtra\": true,\"showValidateHelp\": true,\"showValidateClear\": true,\"showValidateEye\": true,\"showValidateLoading\": true,\"showValidateCount\": true,\"showValidateIcon\": true,\"showValidateTooltip\": true,\"showValidatePopover\": true,\"showValidateBorder\": true,\"showValidateLabel\": true,\""}, {"instruction": "生成一个AMIS 数字输入框，开启大数支持", "input": "", "output": "{\"type\": \"input\",\"name\": \"numberInput\",\"label\": \"Number Input\",\"dataType\": \"number\",\"precision\": 0,\"largeNumber\": true}"}, {"instruction": "设计一个 amis 链式下拉框，包含一级部门，二级部门，三级部门，三个层级，通过api /chainSelect 逐级返回数据，并给出每一级的示例返回数据", "input": "", "output": "{\"status\": 200,\"data\": {\"level1\": [{\"id\": 1,\"name\": \"部门1\"},{\"id\": 2,\"name\": \"部门2\"},{\"id\": 3,\"name\": \"部门3\"}],\"level2\": [{\"id\": 1,\"name\": \"一级部门1-1\",\"parentId\": 1},{\"id\": 2,\"name\": \"一级部门1-2\",\"parentId\": 1},{\"id\": 3,\"name\": \"一级部门2-1\",\"parentId\": 2},{\"id\": 4,\"name\": \"一级部门2-2\",\"parentId\": 2},{\"id\": 5,\"name\": \"一级部门3-1\",\"parentId\": 3},{\"id\": 6,\"name\": \"一级部门3-2\",\"parentId\": 3}],\"level3\": [{\"id\": 1,\"name\": \"二级部门1-1-1\",\"parentId\": 1},{\"id\": 2,\"name\": \"二级部门1-1-2\",\"parentId\": 1},{\"id\": 3,\"name\": \"二级部门1-2-1\",\"parentId\": 2},{\"id\": 4,\"name\": \"二级部门1-2-2\",\"parentId\": 2},{\"id\": 5,\"name\": \"二级部门2-1-1\",\"parentId\": 3},{\"id\": 6,\"name\": \"二级部门2-1-2\",\"parentId\": 3},{\"id\": 7,\"name\": \"二级部门2-2-1\",\"parentId\": 4},{\"id\": 8,\"name\": \"二级部门2-2-2\",\"parentId\": 4},{\"id\": 9,\"name\": \"二级部门3-1-1\",\"parentId\": 5},{\"id\": 10,\"name\": \"二级部门3-1-2\",\"parentId\": 5},{\"id\": 11,\"name\": \"二级部门3-2-1\",\"parentId\": 6},{\"id\": 12,\"name\": \"二级部门3-2-2\",\"parentId\": 6}]}}"}, {"instruction": "有一个商品目录，父目录下有若干层级的嵌套子目录，希望制作一个菜单，点击选项时根据选项从接口加载下一级子目录的数据，并显示在下一级的菜单中。推荐一个可以用于实现该场景的 amis 组件，并给出实现示例", "input": "", "output": "你可以使用 AMIS 组件库中的 `Menu` 组件来实现这个场景。`Menu` 组件可以根据数据源动态生成菜单，并支持点击菜单项时加载下一级数据。以下是一个使用 `Menu` 组件实现该场景的示例：jsximport React, { useState } from 'react';import { Menu } from 'amis';const data = [{label: '目录1',children: [{label: '子目录1-1',children: [{label: '子目录1-1-1',children: [{label: '子目录1-1-1-1',children: []},{label: '子目录1-1-1-2',children: []}]},{label: '子目录1-1-2',children: []}]},{label: '子目录1-2',children: []}]},{label: '目录2',children: [{label: '子目录2-1',children: []},{label: '子目录2-2',children: []}]}];const App = () => {const [selected, setSelected] = useState([]);const handleSelect = (item) => {setSelected(item.path);};return (<Menudata={data}selected={selected}onSelect={handleSelect}/>);};export default App;在上面的示例中，`data` 是一个包含商品目录数据的数组。每个目录项都有一个 `label` 属性用于显示菜单项的文本，以及一个 `children` 属性用于存储子目录数据。当点击菜单项时，会触发 `handleSelect` 函数，将选中的菜单项的路径存储在 `selected` 状态中。然后，根据选中的路径，可以从接口加载下一级子目录的数据，并更新菜单的显示。你可以根据实际的数据结构和接口调整示例中的代码。"}, {"instruction": "用一个列表展示 “仓库信息”，每条数据包含仓库名称、仓储类型、仓库地址、仓库面积、分区数量、座机、状态（正常｜停用）、库管员字段，支持新增、删除和修改仓库信息，用 amis 实现这个场景", "input": "", "output": "{\"type\": \"page\",\"title\": \"仓库信息管理\",\"body\": {\"type\": \"form\",\"title\": \"仓库信息\",\"controls\": [{\"type\": \"list\",\"name\": \"warehouseList\",\"label\": \"仓库列表\",\"addButtonText\": \"新增仓库\",\"removeButtonText\": \"删除仓库\",\"tabel\": {\"columns\": [{\"name\": \"warehouseName\",\"label\": \"仓库名称\"},{\"name\": \"storageType\",\"label\": \"仓储类型\"},{\"name\": \"address\",\"label\": \"仓库地址\"},{\"name\": \"area\",\"label\": \"仓库面积\"},{\"name\": \"partitionCount\",\"label\": \"分区数量\"},{\"name\": \"telephone\",\"label\": \"座机\"},{\"name\": \"status\",\"label\": \"状态\"},{\"name\": \"warehouseManager\",\"label\": \"库管员\"}]}}]}}"}, {"instruction": "实现一个 amis 一个列表用于管理货品类别，支持货品类别的增删改查，并在另一个 amis 表单中通过接口将货品类别信息展示在下拉框中供选择", "input": "", "output": "{\"type\": \"form\",\"title\": \"货品类别管理\",\"controls\": [{\"type\": \"list\",\"name\": \"categories\",\"label\": \"货品类别\",\"addButtonText\": \"添加类别\",\"removeButtonText\": \"删除类别\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"类别名称\"}]}]}"}, {"instruction": "实现一个 amis 下拉框，其值为 “班级” 列表，当该下拉框的选值发生变化时，联动另一个 amis 下拉框加载该班级的 “学生” 列表", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"select\",\"name\": \"class\",\"label\": \"班级\",\"options\": [{\"label\": \"一班\",\"value\": \"1\"},{\"label\": \"二班\",\"value\": \"2\"},{\"label\": \"三班\",\"value\": \"3\"}],\"onChange\": \"handleClassChange\"},{\"type\": \"select\",\"name\": \"student\",\"label\": \"学生\",\"options\": [],\"visible\": false}],\"onSubmit\": \"handleSubmit\"}"}, {"instruction": "实现一个 amis 日期选框，当选框值发生变化时，触发另一个 amis 图表组件的刷新，并根据选框值请求新的数据", "input": "", "output": "您可以使用 amis 的 `DatePicker` 组件来实现日期选框，然后使用 `Chart` 组件来展示图表数据。当日期选框的值发生变化时，您可以通过监听 `onChange` 事件来触发图表组件的刷新，并根据选框的值请求新的数据。以下是一个示例代码，演示了如何实现这个功能：jsximport React, { useState } from 'react';import { render } from 'amis';import axios from 'axios';const ChartComponent = ({ date }) => {const [data, setData] = useState([]);// 请求新的数据const fetchData = async () => {try {const response = await axios.get(`/api/data?date=${date}`);setData(response.data);} catch (error) {console.error('Error fetching data:', error);}};// 初始化时请求一次数据useEffect(() => {fetchData();}, []);return (<Chart data={data} />);};const DatePickerComponent = ({ onChange }) => {const [date, setDate] = useState('');// 当日期选框的值发生变化时，更新日期并触发 onChange 事件const handleDateChange = (value) => {setDate(value);onChange(value);};return (<DatePicker value={date} onChange={handleDateChange} />);};const App = () => {const [selectedDate, setSelectedDate] = useState('');// 当日期选框的值发生变化时，更新选中的日期const handleDateChange = (value) => {setSelectedDate(value);};return (<div><DatePickerComponent onChange={handleDateChange} /><ChartComponent date={selectedDate} /></div>);};render(<App />, document.getElementById('root'));在上面的代码中，我们定义了一个 `ChartComponent` 组件和一个 `DatePickerComponent` 组件。`ChartComponent` 组件负责展示图表数据，并根据选框的值请求新的数据。`DatePickerComponent` 组件负责展示日期选框，并在选框的值发生变化时触发 `onChange` 事件。在 `App` 组件中，我们使用 `useState` 钩子来管理选中的日期，并将其作为 prop 传递给 `ChartComponent` 组件。当日期选框的值发生变化时，我们更新选中的日期，并通过 `handleDateChange` 函数来触发 `onChange` 事件。请注意，上述代码中的 `/api/data` 是一个示例的 API 接口，您需要根据实际情况修改为您自己的接口地址。另外，您还需要根据实际情况修改 `Chart` 组件和 `DatePicker` 组件的引入方式。希望以上信息对您有所帮助！如有任何疑问，请随时提问。"}, {"instruction": "实现一个 amis 按钮，点击下载一个文件，并给出后端接口返回示例", "input": "", "output": "以下是一个示例的 amis按钮，点击后会触发下载一个文件的操作：jsximport React from 'react';import { Button } from 'amis';class DownloadButton extends React.Component {handleDownload = () => {// 发送请求下载文件fetch('/api/download', {method: 'GET',headers: {'Content-Type': 'application/json'}}).then(response => response.blob()).then(blob => {// 创建一个临时的URL，用于下载文件const url = window.URL.createObjectURL(blob);// 创建一个a标签，并设置下载链接和文件名const a = document.createElement('a');a.href = url;a.download = 'example.txt';// 模拟点击a标签进行下载a.click();// 释放临时URLwindow.URL.revokeObjectURL(url);}).catch(error => {console.error('下载文件失败:', error);});};render() {return (<Button onClick={this.handleDownload}>下载文件</Button>);}}export default DownloadButton;后端接口返回示例的 JSON 格式如下：{\"success\": true,\"data\": {\"url\": \"http://example.com/file/example.txt\"}}请注意，上述示例中的 `/api/download` 是一个示意的后端接口地址，你需要根据实际情况进行替换。另外，示例中的文件名为 `example.txt`，你也可以根据实际需求进行修改。"}, {"instruction": "实现一个 amis 左右分栏，左侧是三个竖排的按钮 “新增表达式”“新增数据桶”“新增分组”，右侧是三段文本“新增表达式相关说明”“新增数据桶相关说明”“新增分组相关说明”，当鼠标移入到“新增表达式” 按钮时，显示 “新增表达式相关说明” 文本并隐藏其他两个，其他两个按钮的行为也类似", "input": "", "output": "{\"type\": \"page\",\"body\": {\"type\": \"container\",\"children\": [{\"type\": \"hbox\",\"children\": [{\"type\": \"button\",\"label\": \"新增表达式\",\"onClick\": \"showExpression\"},{\"type\": \"button\",\"label\": \"新增数据桶\",\"onClick\": \"showBucket\"},{\"type\": \"button\",\"label\": \"新增分组\",\"onClick\": \"showGroup\"}]},{\"type\": \"hbox\",\"children\": [{\"type\": \"html\",\"name\": \"expression\",\"html\": \"新增表达式相关说明\",\"visible\": false},{\"type\": \"html\",\"name\": \"bucket\",\"html\": \"新增数据桶相关说明\",\"visible\": false},{\"type\": \"html\",\"name\": \"group\",\"html\": \"新增分组相关说明\",\"visible\": false}]}]},\"data\": {\"expressionVisible\": false,\"bucketVisible\": false,\"groupVisible\": false},\"events\": {\"showExpression\": {\"type\": \"update\",\"scope\": \"expression\",\"data\": {\"expressionVisible\": true,\"bucketVisible\": false,\"groupVisible\": false}},\"showBucket\": {\"type\": \"update\",\"scope\": \"bucket\",\"data\": {\"expressionVisible\": false,\"bucketVisible\": true,\"groupVisible\": false}},\"showGroup\": {\"type\": \"update\",\"scope\": \"group\",\"data\": {\"expressionVisible\": false,\"bucketVisible\": false,\"groupVisible\": true}}}}"}, {"instruction": "实现一个 amis 表单，表单提交后不清空表单并将表单切换为静态展示", "input": "", "output": "可以使用 AMIS 的 Form 组件来实现一个表单，并通过设置 `api` 属性来指定表单提交的接口。在接口返回成功后，可以通过设置 `initApi` 属性来重新加载表单数据，实现表单提交后不清空表单并切换为静态展示的效果。以下是一个示例代码：jsximport React, { useState } from 'react';import { render, Form, Button } from 'amis';const FormDemo = () => {const [formData, setFormData] = useState({});const handleSubmit = (values) => {// 模拟表单提交的接口请求setTimeout(() => {console.log('提交的表单数据:', values);// 设置表单数据setFormData(values);}, 1000);};const handleReset = () => {// 重置表单数据setFormData({});};return (<div><FormclassName=\"form-demo\"mode=\"horizontal\"api={{url: '/api/submit',method: 'post',data: formData,onSuccess: handleSubmit,}}initApi={{url: '/api/getData',method: 'get',onSuccess: (res) => {// 设置表单数据setFormData(res.data);},}}><Button type=\"submit\" level=\"primary\">提交</Button><Button type=\"reset\" level=\"danger\" onClick={handleReset}>重置</Button></Form><div className=\"form-data\"><pre>{JSON.stringify(formData, null, 2)}</pre></div></div>);};render(<FormDemo />, document.getElementById('root'));在上述代码中，我们使用了 `useState` 来定义了一个 `formData` 状态，用于保存表单数据。在表单提交成功后，通过 `setFormData` 方法更新表单数据。在表单初始化时，通过 `initApi` 属性来加载表单数据。请根据实际需求修改接口地址和数据格式，并在页面中添加相应的样式。"}, {"instruction": "在一个 amis 表单中有四个组件 A, B, C, D,  D 组件的值为实时计算的 A, B, C 输入值之和，用 amis 实现这个场景", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"A\",\"label\": \"A\"},{\"type\": \"input\",\"name\": \"B\",\"label\": \"B\"},{\"type\": \"input\",\"name\": \"C\",\"label\": \"C\"},{\"type\": \"input\",\"name\": \"D\",\"label\": \"D\",\"readOnly\": true,\"value\": \"{{ $formData.A + $formData.B + $formData.C }}\"}]}"}, {"instruction": "实现一个列表，包含 ID、单据编号、仓库编码、总件数、总金额、经办人、开具日期、开单人、供应商字段，所有字段均支持点击表头快捷方式进行搜索，并支持数据导出，用amis 实现该场景", "input": "", "output": "以下是使用AMIS实现该场景的JSON格式返回：{\"type\": \"page\",\"title\": \"单据列表\",\"body\": {\"type\": \"crud\",\"api\": \"/api/bills\",\"filter\": {\"title\": \"搜索\",\"controls\": [{\"type\": \"text\",\"name\": \"id\",\"label\": \"ID\"},{\"type\": \"text\",\"name\": \"billNumber\",\"label\": \"单据编号\"},{\"type\": \"text\",\"name\": \"warehouseCode\",\"label\": \"仓库编码\"},{\"type\": \"text\",\"name\": \"operator\",\"label\": \"经办人\"},{\"type\": \"text\",\"name\": \"creator\",\"label\": \"开单人\"},{\"type\": \"text\",\"name\": \"supplier\",\"label\": \"供应商\"}]},\"headerToolbar\": [{\"type\": \"button\",\"actionType\": \"dialog\",\"label\": \"导出\",\"dialog\": {\"title\": \"导出数据\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"fileName\",\"label\": \"文件名\"}]},\"actions\": [{\"type\": \"submit\",\"label\": \"确定\",\"actionType\": \"ajax\",\"api\": \"/api/export\"}]}}],\"columns\": [{\"name\": \"id\",\"label\": \"ID\",\"sortable\": true},{\"name\": \"billNumber\",\"label\": \"单据编号\",\"sortable\": true},{\"name\": \"warehouseCode\",\"label\": \"仓库编码\",\"sortable\": true},{\"name\": \"totalQuantity\",\"label\": \"总件数\",\"sortable\": true},{\"name\": \"totalAmount\",\"label\": \"总金额\",\"sortable\": true},{\"name\": \"operator\",\"label\": \"经办人\",\"sortable\": true},{\"name\": \"issueDate\",\"label\": \"开具日期\",\"sortable\": true},{\"name\": \"creator\",\"label\": \"开单人\",\"sortable\": true},{\"name\": \"supplier\",\"label\": \"供应商\",\"sortable\": true}]}}请注意，上述代码中的`/api/bills`和`/api/export`是示例API的占位符，您需要根据实际情况替换为您自己的API地址。"}, {"instruction": "实现一个 amis 表单A，包含一个 name 字段和一个 email 字段，表单值变化时将数据提交到另一个包含 name，email，keyword，time 字段的表单B", "input": "", "output": "{\"type\": \"form\",\"title\": \"表单A\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"email\",\"name\": \"email\",\"label\": \"邮箱\"}],\"onChange\": {\"type\": \"url\",\"method\": \"POST\",\"url\": \"http://example.com/submit\",\"params\": {\"name\": \"${name}\",\"email\": \"${email}\",\"keyword\": \"amis\",\"time\": \"${new Date().toISOString()}\"}}}"}, {"instruction": "实现一个 amis 表单，当表单初始化完毕时将数据中的 type 字段发送给页面上的另一个 service 组件并触发该service 组件的数据更新", "input": "", "output": "以下是一个使用 amis 表单的示例代码，其中包含一个初始化完毕后发送数据给另一个 service 组件的功能：jsximport React from 'react';import { render } from 'react-dom';import { amisRender } from 'amis';// 定义 service 组件const ServiceComponent = ({ type }) => {// 根据 type 发送请求并更新数据const fetchData = async () => {try {const response = await fetch(`https://api.example.com/data?type=${type}`);const data = await response.json();// 更新数据// ...} catch (error) {console.error(error);}};return (<div><h2>Service Component</h2><button onClick={fetchData}>Fetch Data</button></div>);};// 定义表单组件const FormComponent = () => {// 表单初始化完毕后的回调函数const handleFormInit = (form) => {// 获取表单数据const formData = form.getData();// 获取 type 字段的值const type = formData.type;// 发送 type 给 service 组件// ...// 触发 service 组件的数据更新// ...};// amis 表单配置const amisConfig = {type: 'form',title: 'Form',controls: [{type: 'text',name: 'type',label: 'Type',required: true,},{type: 'button',label: 'Submit',level: 'primary',actionType: 'ajax',api: {url: 'https://api.example.com/submit',method: 'post',data: {// 表单数据将会被发送到这里},},},],onInit: handleFormInit,};return (<div><h2>Form Component</h2>{amisRender(amisConfig)}</div>);};// 渲染组件render(<div><FormComponent /><ServiceComponent /></div>,document.getElementById('root'));在上述代码中，我们定义了一个 `FormComponent` 组件和一个 `ServiceComponent` 组件。`FormComponent` 使用 amis 表单来渲染一个表单，并在表单初始化完毕后触发 `handleFormInit` 回调函数。在该回调函数中，我们可以获取表单数据，并将其中的 `type` 字段发送给 `ServiceComponent` 组件。请注意，上述代码中的发送请求和数据更新的部分需要根据具体的业务逻辑进行实现。"}, {"instruction": "实现一个 amis 表单，当表单校验失败时通过 /log 接口发送一个请求，提交当前表单填写的内容", "input": "", "output": "可以使用 AMIS 的 Form 组件来实现表单，并通过 AMIS 的 Request 组件发送请求。以下是一个示例代码：jsximport React from 'react';import { render } from 'amis';import { toast } from 'amis/lib/components/Toast';import { Alert } from 'amis/lib/components/Alert';class MyForm extends React.Component {handleSubmit = (values) => {// 发送请求fetch('/log', {method: 'POST',body: JSON.stringify(values),headers: {'Content-Type': 'application/json'}}).then(response => response.json()).then(data => {// 处理返回的数据if (data.success) {toast.success('提交成功');} else {toast.error('提交失败');}}).catch(error => {toast.error('提交失败');});}handleValidateFailed = (errors) => {// 表单校验失败时触发toast.error('表单校验失败');this.handleSubmit(errors);}render() {return (<div><Alert level=\"info\">当表单校验失败时，将通过 /log 接口发送请求，提交当前表单填写的内容。</Alert><FormclassName=\"m-t\"api=\"/api/form\"mode=\"horizontal\"submitText=\"提交\"wrapWithPanel={false}onValidateFailed={this.handleValidateFailed}onSubmit={this.handleSubmit}/></div>);}}render(<MyForm />, document.getElementById('root'));在上面的代码中，我们定义了一个 `MyForm` 组件，其中包含一个 AMIS 的 `Form` 组件。在 `Form` 组件中，我们通过 `api` 属性指定了表单的接口地址，通过 `mode` 属性指定了表单的布局方式为水平布局，通过 `submitText` 属性指定了提交按钮的文本。我们还通过 `onValidateFailed` 属性指定了表单校验失败时的回调函数，以及通过 `onSubmit` 属性指定了表单提交时的回调函数。在 `handleSubmit` 方法中，我们使用 `fetch` 函数发送了一个 POST 请求到 `/log` 接口，并将当前表单填写的内容作为请求的 body 参数。在请求成功后，我们根据返回的数据显示相应的提示信息。在 `handleValidateFailed` 方法中，我们首先显示了一个错误提示信息，然后调用了 `handleSubmit` 方法，将校验失败的错误信息作为参数传递给它，以便将错误信息提交到 `/log` 接口。请注意，上述代码中的 `/api/form` 和 `/log` 接口地址仅为示例，请根据实际情况进行修改。"}, {"instruction": "实现一个 amis 表单，支持通过 /face 接口提交一张人像图片，服务端会以json格式将人像识别结果返回，将返回结果以json格式展示", "input": "", "output": "以下是一个示例的 amis表单，支持通过 /face 接口提交一张人像图片，并将返回结果以JSON格式展示：jsximport React, { useState } from 'react';import { render, Alert, Button, Form, Image, Json } from 'amis';const FaceRecognitionForm = () => {const [imageUrl, setImageUrl] = useState('');const [result, setResult] = useState(null);const [loading, setLoading] = useState(false);const handleSubmit = async (formData) => {setLoading(true);try {const response = await fetch('/face', {method: 'POST',body: formData,});const data = await response.json();setResult(data);} catch (error) {console.error(error);setResult(null);Alert.error('Failed to recognize face.');} finally {setLoading(false);}};return (<div><FormclassName=\"m-t\"onSubmit={handleSubmit}api=\"/face\"method=\"post\"encType=\"multipart/form-data\"><Form.Item name=\"image\" label=\"Upload Image\" required><Form.ImageUploaderaccept=\"image/*\"value={imageUrl}onChange={(value) => setImageUrl(value)}/></Form.Item><Button type=\"submit\" loading={loading}>Submit</Button></Form>{result && (<div className=\"m-t\"><Json value={result} /></div>)}</div>);};render(<FaceRecognitionForm />);在上述代码中，我们使用了 amis的Form组件来创建一个表单。表单中包含一个ImageUploader组件，用于上传人像图片。当用户提交表单时，会调用handleSubmit函数，将图片数据通过POST请求发送到服务器的`/face`接口。服务器会对人像进行识别，并将识别结果以JSON格式返回。返回结果会被存储在`result`状态中，并通过Json组件展示出来。请注意，上述代码中的`/face`接口和人像识别的具体实现并未提供，你需要根据自己的需求进行实现。"}, {"instruction": "实现一个 amis 单选框，包含 “皮带输送机”“数控机床”两个选项，当选中 “皮带输送机” 时，展示 “皮带输送机” 对应的表单填写项，当选中“数控机床”时，展示 “数控机床” 对应的表单填写项", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"radio\",\"name\": \"type\",\"label\": \"选择设备类型\",\"options\": [{\"label\": \"皮带输送机\",\"value\": \"conveyor\"},{\"label\": \"数控机床\",\"value\": \"cnc\"}]},{\"type\": \"divider\"},{\"type\": \"container\",\"name\": \"conveyorForm\",\"visibleOn\": \"type === 'conveyor'\",\"controls\": [{\"type\": \"input\",\"name\": \"conveyorLength\",\"label\": \"输送机长度\",\"required\": true},{\"type\": \"input\",\"name\": \"conveyorWidth\",\"label\": \"输送机宽度\",\"required\": true}]},{\"type\": \"container\",\"name\": \"cncForm\",\"visibleOn\": \"type === 'cnc'\",\"controls\": [{\"type\": \"input\",\"name\": \"cncModel\",\"label\": \"机床型号\",\"required\": true},{\"type\": \"input\",\"name\": \"cncPower\",\"label\": \"机床功率\",\"required\": true}]}]}"}, {"instruction": "表单里有一个开关，当开启时展示 “附加信息” 相关表单填写项，使用 amis 实现这个场景", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"switch\",\"name\": \"toggle\",\"label\": \"开关\",\"value\": false},{\"type\": \"divider\"},{\"type\": \"group\",\"visibleOn\": \"data.toggle\",\"controls\": [{\"type\": \"input\",\"name\": \"additionalInfo1\",\"label\": \"附加信息1\"},{\"type\": \"input\",\"name\": \"additionalInfo2\",\"label\": \"附加信息2\"},{\"type\": \"input\",\"name\": \"additionalInfo3\",\"label\": \"附加信息3\"}]}]}"}, {"instruction": "amis 表单中包含 “购买数量” 和 “选择优惠” 两个组件，当 “购买数量” 大于 10 时展示 “选择优惠” 下拉框", "input": "", "output": "{\"form\": [{\"component\": \"input\",\"label\": \"购买数量\",\"type\": \"number\"},{\"component\": \"select\",\"label\": \"选择优惠\",\"options\": [\"优惠1\", \"优惠2\", \"优惠3\"]}]}"}, {"instruction": "实现一个 amis 表单，表单底部有一个 “审核通过” 按钮，通过 /initAPI 返回初始字段值，当 verified 字段的值为 true，时，“审核通过” 按钮不展示", "input": "", "output": "{\"type\": \"form\",\"title\": \"审核表单\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"姓名\",\"required\": true},{\"type\": \"text\",\"name\": \"email\",\"label\": \"邮箱\",\"required\": true},{\"type\": \"checkbox\",\"name\": \"verified\",\"label\": \"是否已审核\",\"value\": false}],\"api\": \"/initAPI\",\"submitText\": \"提交\",\"actions\": [{\"type\": \"button\",\"label\": \"审核通过\",\"visibleOn\": \"data.verified === false\",\"actionType\": \"ajax\",\"api\": \"/verifyAPI\",\"level\": \"primary\"}]}"}, {"instruction": "实现一个 amis 表单，通过 /initAPI 返回初始字段值，当 locked 字段值为 true 时，该表单不可编辑", "input": "", "output": "{\"type\": \"form\",\"title\": \"AMIS 表单\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"姓名\",\"required\": true},{\"type\": \"number\",\"name\": \"age\",\"label\": \"年龄\",\"required\": true},{\"type\": \"checkbox\",\"name\": \"locked\",\"label\": \"是否锁定\",\"value\": false}],\"api\": {\"url\": \"/initAPI\",\"method\": \"get\"},\"submitText\": \"提交\",\"resetText\": \"重置\",\"mode\": \"normal\"}"}, {"instruction": "实现一个 amis 表单，包含 “新闻类型” “新闻位置” 两个下拉框，当 “新闻类型” 为 “重大时事” 且 “新闻位置” 为 “头版头条” 时，显示 “主图”“副图”“主标题”“次标题”“角标图片” 表单项，否则显示 “主图” “主标题” “副标题” 三个表单项", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"select\",\"name\": \"newsType\",\"label\": \"新闻类型\",\"options\": [{\"label\": \"重大时事\",\"value\": \"important\"},{\"label\": \"其他\",\"value\": \"other\"}]},{\"type\": \"select\",\"name\": \"newsPosition\",\"label\": \"新闻位置\",\"options\": [{\"label\": \"头版头条\",\"value\": \"headline\"},{\"label\": \"其他\",\"value\": \"other\"}]},{\"type\": \"text\",\"name\": \"mainImage\",\"label\": \"主图\"},{\"type\": \"text\",\"name\": \"mainTitle\",\"label\": \"主标题\"},{\"type\": \"text\",\"name\": \"subTitle\",\"label\": \"副标题\"},{\"type\": \"text\",\"name\": \"subImage\",\"label\": \"副图\"},{\"type\": \"text\",\"name\": \"badgeImage\",\"label\": \"角标图片\"}],\"visible\": {\"and\": [{\"type\": \"===\",\"left\": {\"type\": \"get\",\"value\": {\"type\": \"path\",\"value\": \"newsType\"}},\"right\": \"important\"},{\"type\": \"===\",\"left\": {\"type\": \"get\",\"value\": {\"type\": \"path\",\"value\": \"newsPosition\"}},\"right\": \"headline\"}]}}"}, {"instruction": "实现一个列表，通过一个接口返回包含 “编号”“召回词”“简介信息”“公司LOGO”“网址链接”“证书链接”以及“editable”字段的数据，“操作” 栏包含 “查看” 和 “编辑” 操作，当“editable”字段的值为 false 时候，“操作” 栏中的 “编辑” 按钮不可用，用 amis 实现这个需求并给出接口返回的示例数据", "input": "", "output": "{\"data\": [{\"编号\": \"001\",\"召回词\": \"苹果\",\"简介信息\": \"苹果公司是一家美国科技公司\",\"公司LOGO\": \"https://example.com/logo1.png\",\"网址链接\": \"https://example.com\",\"证书链接\": \"https://example.com/certificate1.pdf\",\"editable\": true},{\"编号\": \"002\",\"召回词\": \"谷歌\",\"简介信息\": \"谷歌是一家全球知名的互联网公司\",\"公司LOGO\": \"https://example.com/logo2.png\",\"网址链接\": \"https://example.com\",\"证书链接\": \"https://example.com/certificate2.pdf\",\"editable\": false},{\"编号\": \"003\",\"召回词\": \"微软\",\"简介信息\": \"微软是一家全球知名的软件公司\",\"公司LOGO\": \"https://example.com/logo3.png\",\"网址链接\": \"https://example.com\",\"证书链接\": \"https://example.com/certificate3.pdf\",\"editable\": true}]}"}, {"instruction": "实现一个 “商品类别” 下拉框，当下拉框中没有合适选项时能够实时新增选项，新增信息包括名称、标签、详情、图表这几项信息，并支持选项的修改和删除，用 amis 实现这个场景", "input": "", "output": "{\"type\": \"form\",\"title\": \"商品类别\",\"controls\": [{\"type\": \"select\",\"name\": \"category\",\"label\": \"选择类别\",\"options\": [{\"label\": \"电子产品\",\"value\": \"electronics\"},{\"label\": \"家居用品\",\"value\": \"home\"},{\"label\": \"服装鞋帽\",\"value\": \"clothing\"}],\"addable\": true,\"addButtonText\": \"新增类别\",\"addControls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"名称\"},{\"type\": \"text\",\"name\": \"label\",\"label\": \"标签\"},{\"type\": \"textarea\",\"name\": \"details\",\"label\": \"详情\"},{\"type\": \"text\",\"name\": \"chart\",\"label\": \"图表\"}],\"editable\": true,\"deleteable\": true}]}"}, {"instruction": "表单里有两个下拉框 “商品标签”“商品价格区间”，当这两个下拉框的值变更时，分别将值对应的标签填充到表单中的 “商品标签”和 “商品价格区间” 两个静态文本展示框中，使用 amis 实现这个需求", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"select\",\"name\": \"tag\",\"label\": \"商品标签\",\"options\": [{\"label\": \"标签1\",\"value\": \"tag1\"},{\"label\": \"标签2\",\"value\": \"tag2\"},{\"label\": \"标签3\",\"value\": \"tag3\"}],\"onChange\": {\"type\": \"update\",\"target\": \"tagLabel\",\"expression\": \"{{$value}}\"}},{\"type\": \"static\",\"name\": \"tagLabel\",\"label\": \"商品标签\"},{\"type\": \"select\",\"name\": \"priceRange\",\"label\": \"商品价格区间\",\"options\": [{\"label\": \"0-100\",\"value\": \"range1\"},{\"label\": \"100-200\",\"value\": \"range2\"},{\"label\": \"200-300\",\"value\": \"range3\"}],\"onChange\": {\"type\": \"update\",\"target\": \"priceRangeLabel\",\"expression\": \"{{$value}}\"}},{\"type\": \"static\",\"name\": \"priceRangeLabel\",\"label\": \"商品价格区间\"}]}"}, {"instruction": "用 amis 实现一个列表，展示商品ID、商品标题、描述、链接，包含删除操作，当点击删除时弹框确认，弹框文字为 '确认要删除' + 商品标题 + '吗？'", "input": "", "output": "{\"data\": [{\"id\": 1,\"title\": \"商品1\",\"description\": \"这是商品1的描述\",\"link\": \"https://example.com/product1\"},{\"id\": 2,\"title\": \"商品2\",\"description\": \"这是商品2的描述\",\"link\": \"https://example.com/product2\"},{\"id\": 3,\"title\": \"商品3\",\"description\": \"这是商品3的描述\",\"link\": \"https://example.com/product3\"}]}"}, {"instruction": "用 amis 实现一个轮播图管理后台页面，每张轮播图包含图片、标题、链接三个字段，支持新增，最小三张，最大十张，使用 combo 组件来实现这一需求", "input": "", "output": "{\"status\": 200,\"message\": \"success\",\"data\": [{\"id\": 1,\"image\": \"https://example.com/image1.jpg\",\"title\": \"Slide 1\",\"link\": \"https://example.com/link1\"},{\"id\": 2,\"image\": \"https://example.com/image2.jpg\",\"title\": \"Slide 2\",\"link\": \"https://example.com/link2\"},{\"id\": 3,\"image\": \"https://example.com/image3.jpg\",\"title\": \"Slide 3\",\"link\": \"https://example.com/link3\"}]}"}, {"instruction": "用 amis 实现一个 “错误日志” 列表页，包含时间、错误级别、报错信息三个字段，支持根据时间范围和错误级别对日志进行筛选，并支持分页", "input": "", "output": "以下是使用AMIS实现的错误日志列表页的示例代码：{\"type\": \"page\",\"title\": \"错误日志列表\",\"body\": {\"type\": \"container\",\"children\": [{\"type\": \"form\",\"title\": \"筛选条件\",\"controls\": [{\"type\": \"date-range\",\"name\": \"timeRange\",\"label\": \"时间范围\"},{\"type\": \"select\",\"name\": \"errorLevel\",\"label\": \"错误级别\",\"options\": [{\"label\": \"全部\",\"value\": \"\"},{\"label\": \"普通\",\"value\": \"普通\"},{\"label\": \"严重\",\"value\": \"严重\"}]},{\"type\": \"submit\",\"label\": \"筛选\"}],\"api\": \"/api/getErrorLogs\",\"method\": \"get\",\"target\": \"errorLogList\"},{\"type\": \"table\",\"name\": \"errorLogList\",\"columns\": [{\"name\": \"time\",\"label\": \"时间\"},{\"name\": \"errorLevel\",\"label\": \"错误级别\"},{\"name\": \"errorMessage\",\"label\": \"报错信息\"}],\"perPage\": 10,\"api\": \"/api/getErrorLogs\",\"method\": \"get\"}]}}在上述代码中，我们使用了AMIS的`form`组件来实现筛选条件的输入，包括时间范围和错误级别。`api`属性指定了获取错误日志数据的接口地址，`method`属性指定了请求方法。`target`属性指定了将筛选条件提交后返回的数据存储到`errorLogList`中。接下来，我们使用了AMIS的`table`组件来展示错误日志列表。`columns`属性定义了表格的列，`perPage`属性定义了每页显示的记录数。`api`属性同样指定了获取错误日志数据的接口地址，`method`属性指定了请求方法。你需要根据实际情况修改接口地址和数据结构，以及实现相应的后端接口来获取错误日志数据。"}, {"instruction": "实现一个 “账单查询” 列表页，字段包括订单号、账户ID、账户名、账户类型（单式、复式）、场景ID、账单流向、流转总额、账户余额、账单状态，支持根据账单类型、账单流量、用户ID、用户名、订单号来查询订单，并支持修改和删除操作，使用 amis 实现这一需求", "input": "", "output": "{\"type\": \"page\",\"title\": \"账单查询\",\"body\": {\"type\": \"form\",\"title\": \"查询条件\",\"controls\": [{\"type\": \"text\",\"name\": \"orderNumber\",\"label\": \"订单号\"},{\"type\": \"text\",\"name\": \"accountId\",\"label\": \"账户ID\"},{\"type\": \"text\",\"name\": \"accountName\",\"label\": \"账户名\"},{\"type\": \"select\",\"name\": \"accountType\",\"label\": \"账户类型\",\"options\": [{\"label\": \"单式\",\"value\": \"single\"},{\"label\": \"复式\",\"value\": \"multiple\"}]},{\"type\": \"text\",\"name\": \"sceneId\",\"label\": \"场景ID\"},{\"type\": \"select\",\"name\": \"billFlow\",\"label\": \"账单流向\",\"options\": [{\"label\": \"流入\",\"value\": \"in\"},{\"label\": \"流出\",\"value\": \"out\"}]},{\"type\": \"text\",\"name\": \"billAmount\",\"label\": \"流转总额\"},{\"type\": \"text\",\"name\": \"accountBalance\",\"label\": \"账户余额\"},{\"type\": \"select\",\"name\": \"billStatus\",\"label\": \"账单状态\",\"options\": [{\"label\": \"待支付\",\"value\": \"unpaid\"},{\"label\": \"已支付\",\"value\": \"paid\"},{\"label\": \"已取消\",\"value\": \"cancelled\"}]}],\"actions\": [{\"type\": \"submit\",\"label\": \"查询\"}]},\"toolbar\": {\"type\": \"button-group\",\"align\": \"right\",\"buttons\": [{\"type\": \"button\",\"label\": \"新增\",\"actionType\": \"dialog\",\"dialog\": {\"title\": \"新增账单\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"orderNumber\",\"label\": \"订单号\"},{\"type\": \"text\",\"name\": \"accountId\",\"label\": \"账户ID\"},{\"type\": \"text\",\"name\": \"accountName\",\"label\": \"账户名\"},{\"type\": \"select\",\"name\": \"accountType\",\"label\": \"账户类型\",\"options\": [{\"label\": \"单式\",\"value\": \"single\"},{\"label\": \"复式\",\"value\": \"multiple\"}]},{\"type\": \"text\",\"name\": \"sceneId\",\"label\": \"场景ID\"},{\"type\": \"select\",\"name\": \"billFlow\",\"label\": \"账单流向\",\"options\": [{\"label\": \"流入\",\"value\": \"in\"},{\"label\": \"流出\",\"value\": \"out\"}]},{\"type\": \"text\",\"name\": \"billAmount\",\"label\": \"流转总额\"},{\"type\": \"text\",\"name\": \"accountBalance\",\"label\": \"账户余额\"},{\"type\": \"select\",\"name\": \"billStatus\",\"label\": \"账单状态\",\"options\": [{\"label\": \"待支付\",\"value\": \"unpaid\"},{\"label\": \"已支付\",\"value\": \"paid\"},{\"label\": \"已取消\",\"value\": \"cancelled\"}]}]},\"actions\": [{\"type\": \"submit\",\"label\": \"保存\"}]}}]},\"body\": {\"type\": \"crud\",\"api\": \"/api/bills\",\"filter\": {\"title\": \"查询条件\",\"controls\": [{\"type\": \"text\",\"name\": \"orderNumber\",\"label\": \"订单号\"},{\"type\": \"text\",\"name\": \"accountId\",\"label\": \"账户ID\"},{\"type\": \"text\",\"name\": \"accountName\",\"label\": \"账户名\"},{\"type\": \"select\",\"name\": \"accountType\",\"label\": \"账户类型\",\"options\": [{\"label\": \"单式\",\"value\": \"single\"},{\"label\": \"复式\",\"value\": \"multiple\"}]},{\"type\": \"text\",\"name\": \"sceneId\",\"label\": \"场景ID\"},{\"type\": \"select\",\"name\": \"billFlow\",\"label\": \"账单流向\",\"options\": [{\"label\": \"流入\",\"value\": \"in\"},{\"label\": \"流出\",\"value\": \"out\"}]},{\"type\": \"text\",\"name\": \"billAmount\",\"label\": \"流转总额\"},{\"type\": \"text\",\"name\": \"accountBalance\",\"label\": \"账户余额\"},{\"type\": \"select\",\"name\": \"billStatus\",\"label\": \"账单状态\",\"options\": [{\"label\": \"待支付\",\"value\": \"unpaid\"},{\"label\": \"已支付\",\"value\": \"paid\"},{\"label\": \"已取消\",\"value\": \"cancelled\"}]}],\"actions\": [{\"type\": \"submit\",\"label\": \"查询\"}]},\"columns\": [{\"name\": \"orderNumber\",\"label\": \"订单号\"},{\"name\": \"accountId\",\"label\": \"账户ID\"},{\"name\": \"accountName\",\"label\": \"账户名\"},{\"name\": \"accountType\",\"label\": \"账户类型\"},{\"name\": \"sceneId\",\"label\": \"场景ID\"},{\"name\": \"billFlow\",\"label\": \"账单流向\"},{\"name\": \"billAmount\",\"label\": \"流转总额\"},{\"name\": \"accountBalance\",\"label\": \"账户余额\"},{\"name\": \"billStatus\",\"label\": \"账单状态\"},{\"type\": \"operation\",\"label\": \"操作\",\"width\": 100,\"buttons\": [{\"type\": \"button\",\"label\": \"修改\",\"actionType\": \"dialog\",\"dialog\": {\"title\": \"修改账单\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"orderNumber\",\"label\": \"订单号\"},{\"type\": \"text\",\"name\": \"accountId\",\"label\": \"账户ID\"},{\"type\": \"text\",\"name\": \"accountName\",\"label\": \"账户名\"},{\"type\": \"select\",\"name\": \"accountType\",\"label\": \"账户类型\",\"options\": [{\"label\": \"单式\",\"value\": \"single\"},{\"label\": \"复式\",\"value\": \"multiple\"}]},{\"type\": \"text\",\"name\": \"sceneId\",\"label\": \"场景ID\"},{\"type\": \"select\",\"name\": \"billFlow\",\"label\": \"账单流向\",\"options\": [{\"label\": \"流入\",\"value\": \"in\"},{\"label\": \"流出\",\"value\": \"out\"}]},{\"type\": \"text\",\"name\": \"billAmount\",\"label\": \"流转总额\"},{\"type\": \"text\",\"name\": \"accountBalance\",\"label\": \"账户余额\"},{\"type\": \"select\",\"name\": \"billStatus\",\"label\": \"账单状态\",\"options\": [{\"label\": \"待支付\",\"value\": \"unpaid\"},{\"label\": \"已支付\",\"value\": \"paid\"},{\"label\": \"已取消\",\"value\": \"cancelled\"}]}]},\"actions\": [{\"type\": \"submit\",\"label\": \"保存\"}]}},{\"type\": \"button\",\"label\": \"删除\",\"actionType\": \"ajax\",\"confirmText\": \"确认删除？\",\"api\": \"/api/bills/$id\",\"method\": \"delete\"}]}]}}"}, {"instruction": "实现一个 amis 按钮组，点击不同按钮时触发页面上另一个 setvice 组件的 schemaAPI 请求，并根据不同的按钮返回不同的内容", "input": "", "output": "可以使用 amis 的 ButtonGroup 组件来实现按钮组，然后在点击不同按钮时，通过调用另一个 service 组件的 schemaAPI 请求，并根据不同的按钮返回不同的内容。以下是一个示例代码：jsximport React, { useState } from 'react';import { ButtonGroup, SchemaApi } from 'amis';const ButtonGroupExample = () => {const [content, setContent] = useState('');const handleButtonClick = async (value) => {// 根据不同的按钮值发送不同的请求let response;if (value === 'button1') {response = await SchemaApi.get('/api/button1');} else if (value === 'button2') {response = await SchemaApi.get('/api/button2');} else if (value === 'button3') {response = await SchemaApi.get('/api/button3');}// 根据请求返回的内容更新页面if (response && response.data) {setContent(response.data);}};return (<div><ButtonGroupbuttons={[{ label: '按钮1', value: 'button1' },{ label: '按钮2', value: 'button2' },{ label: '按钮3', value: 'button3' },]}onClick={handleButtonClick}/><div>{content}</div></div>);};export default ButtonGroupExample;在上面的示例中，我们使用 useState 来保存按钮点击后返回的内容，并在页面上展示。在 handleButtonClick 函数中，根据不同的按钮值发送不同的请求，并根据请求返回的内容更新页面。请注意，上述示例中的请求地址 `/api/button1`、`/api/button2`、`/api/button3` 是示例地址，你需要根据实际情况替换为你的后端接口地址。另外，你还需要根据实际情况处理请求的错误情况。"}, {"instruction": "实现一个 amis service 组件，通过接口 /initService 动态返回组件内容并渲染，接口请求成功时页面上的一个 “刷新” 按钮由不可用转为可用", "input": "", "output": "以下是一个示例的 amis service 组件的实现：javascriptimport React from 'react';import { Alert, Button } from 'antd';import { RendererProps } from '@amis/render';import { request } from 'axios';interface State {loading: boolean;data: any;}class AmisServiceComponent extends React.Component<RendererProps, State> {constructor(props: RendererProps) {super(props);this.state = {loading: true,data: null};}componentDidMount() {this.fetchData();}fetchData = () => {this.setState({ loading: true });request.get('/initService').then(response => {this.setState({loading: false,data: response.data});}).catch(error => {console.error('Failed to fetch data:', error);this.setState({ loading: false });});}render() {const { loading, data } = this.state;return (<div>{loading ? (<Alert message=\"Loading...\" type=\"info\" />) : (<div><Button onClick={this.fetchData} disabled={loading}>Refresh</Button>{data && (<pre>{JSON.stringify(data, null, 2)}</pre>)}</div>)}</div>);}}export default AmisServiceComponent;在上面的代码中，我们定义了一个 `AmisServiceComponent` 组件，它通过发送请求到 `/initService` 接口来获取数据，并在请求成功后渲染数据。在组件的 `render` 方法中，我们根据 `loading` 和 `data` 的状态来渲染不同的内容。当数据正在加载时，我们显示一个加载提示；当数据加载完成时，我们显示一个刷新按钮和返回的数据。请注意，上述代码使用了 `axios` 库来发送请求，你需要在项目中安装并引入该库。另外，你还需要根据你的实际需求来修改接口地址和渲染的内容。"}, {"instruction": "实现一个 amis 表单，表单标题为 “数据模板” ， 包含一个 “数据模板” 选择下拉框和一个 service 组件，service 组件根据下拉框的选项拉取数据模板的表单项并渲染", "input": "", "output": "{\"type\": \"form\",\"title\": \"数据模板\",\"controls\": [{\"type\": \"select\",\"name\": \"template\",\"label\": \"数据模板\",\"options\": [{\"label\": \"模板1\",\"value\": \"template1\"},{\"label\": \"模板2\",\"value\": \"template2\"},{\"label\": \"模板3\",\"value\": \"template3\"}]},{\"type\": \"service\",\"name\": \"templateForm\",\"api\": \"/api/getTemplateForm\",\"depends\": {\"template\": \"$template\"}}]}"}, {"instruction": "实现一个通过 websocket 获取数据的amis service 示例，并提供对应的后端接口示例代码", "input": "", "output": "以下是一个通过 WebSocket 获取数据的 AMIS Service 示例：前端代码：javascriptimport { WebSocketRenderer } from 'amis';const socket = new WebSocket('ws://localhost:3000/ws');socket.onopen = () => {console.log('WebSocket connected');};socket.onmessage = (event) => {const data = JSON.parse(event.data);console.log('Received data:', data);};socket.onclose = () => {console.log('WebSocket disconnected');};const App = () => {return (<div><h1>WebSocket Example</h1><WebSocketRenderersocket={socket}initApi={{url: 'http://localhost:3000/api/init',method: 'GET',}}/></div>);};export default App;后端代码（使用 Express 框架）：javascriptconst express = require('express');const http = require('http');const WebSocket = require('ws');const app = express();const server = http.createServer(app);const wss = new WebSocket.Server({ server });wss.on('connection', (ws) => {console.log('WebSocket connected');ws.on('message', (message) => {console.log('Received message:', message);});ws.on('close', () => {console.log('WebSocket disconnected');});});app.get('/api/init', (req, res) => {// 返回初始化数据res.json({ data: 'Hello, AMIS!' });});server.listen(3000, () => {console.log('Server started on port 3000');});在上述示例中，前端通过 WebSocket 连接到后端，并在连接建立后发送一个初始化请求（GET /api/init）获取初始化数据。后端接收到 WebSocket 连接后，监听消息和关闭事件，并在收到消息时打印出来。前端通过 WebSocketRenderer 组件渲染 AMIS 页面，并将 WebSocket 实例传递给组件，以便进行通信。请注意，上述示例仅提供了基本的 WebSocket 连接和消息处理逻辑，实际应用中可能需要根据具体需求进行扩展和优化。"}, {"instruction": "实现一个 amis 导航组件，当点击选项时候才去动态加载下一级选项的数据", "input": "", "output": "以下是一个示例的 amis导航组件的实现，当点击选项时动态加载下一级选项的数据：javascriptimport React, { useState } from 'react';import { Nav } from 'amis';const Navigation = () => {const [data, setData] = useState([]);const handleClick = (item) => {// 根据点击的选项获取下一级选项的数据// 这里可以根据实际情况使用异步请求获取数据const nextLevelData = [{ label: '选项1', value: 'option1' },{ label: '选项2', value: 'option2' },{ label: '选项3', value: 'option3' },];// 更新数据setData(nextLevelData);};return (<Navsource={data}onClick={handleClick}/>);};export default Navigation;在上面的示例中，我们使用了 `useState` 钩子来管理导航组件的数据。当点击选项时，会触发 `handleClick` 函数，根据点击的选项获取下一级选项的数据，并更新组件的数据。然后，将更新后的数据传递给 `Nav` 组件进行渲染。请注意，上述示例中的 `Nav` 组件是基于 amis 的导航组件，你需要根据实际情况进行引入和使用。另外，你还需要根据实际需求来修改获取下一级选项数据的逻辑。"}, {"instruction": "有一个表单，包含 “基本信息”“工作信息”“兴趣爱好” 三个表单区块，由于内容太长希望增加一个导航，当点击导航时滑动到相应区块，选择一个 amis 组件来实现这一需求", "input": "", "output": "{\"type\": \"page\",\"title\": \"表单\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"tabs\",\"tabs\": [{\"title\": \"基本信息\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"input\",\"name\": \"age\",\"label\": \"年龄\"},{\"type\": \"input\",\"name\": \"gender\",\"label\": \"性别\"}]}},{\"title\": \"工作信息\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"company\",\"label\": \"公司\"},{\"type\": \"input\",\"name\": \"position\",\"label\": \"职位\"},{\"type\": \"input\",\"name\": \"salary\",\"label\": \"薪水\"}]}},{\"title\": \"兴趣爱好\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"hobby1\",\"label\": \"爱好1\"},{\"type\": \"input\",\"name\": \"hobby2\",\"label\": \"爱好2\"},{\"type\": \"input\",\"name\": \"hobby3\",\"label\": \"爱好3\"}]}}]}]}}"}, {"instruction": "实现一个 amis 表单，表单中有一个勾选框，当勾选时候显示 “地点”“现场照片”“详细说明” 三个表单项，否则隐藏", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"checkbox\",\"name\": \"showFields\",\"label\": \"显示表单项\"},{\"type\": \"divider\"},{\"type\": \"text\",\"name\": \"location\",\"label\": \"地点\",\"visibleOn\": \"showFields\"},{\"type\": \"divider\"},{\"type\": \"image\",\"name\": \"photo\",\"label\": \"现场照片\",\"visibleOn\": \"showFields\"},{\"type\": \"divider\"},{\"type\": \"textarea\",\"name\": \"description\",\"label\": \"详细说明\",\"visibleOn\": \"showFields\"}]}"}, {"instruction": "实现一个 amis 页面，页面上有一个时间范围选择器组件和三个图表组件，分别是饼图、折线图、柱状图，时间范围选择器的选择会触发这三个图表的刷新并根据选择范围重新获取数据", "input": "", "output": "{\"type\": \"page\",\"title\": \"AMIS 页面\",\"body\": [{\"type\": \"form\",\"title\": \"时间范围选择器\",\"controls\": [{\"type\": \"date-range\",\"name\": \"dateRange\",\"label\": \"选择时间范围\",\"format\": \"YYYY-MM-DD\",\"value\": [\"2021-01-01\", \"2021-01-31\"],\"onChange\": \"handleDateRangeChange\"}]},{\"type\": \"chart\",\"title\": \"饼图\",\"source\": \"api/getPieChartData\",\"visible\": \"{{$dateRange}}\",\"props\": {\"type\": \"pie\"}},{\"type\": \"chart\",\"title\": \"折线图\",\"source\": \"api/getLineChartData\",\"visible\": \"{{$dateRange}}\",\"props\": {\"type\": \"line\"}},{\"type\": \"chart\",\"title\": \"柱状图\",\"source\": \"api/getBarChartData\",\"visible\": \"{{$dateRange}}\",\"props\": {\"type\": \"bar\"}}],\"api\": {\"getPieChartData\": \"/api/getPieChartData?dateRange={{$dateRange}}\",\"getLineChartData\": \"/api/getLineChartData?dateRange={{$dateRange}}\",\"getBarChartData\": \"/api/getBarChartData?dateRange={{$dateRange}}\"},\"events\": {\"handleDateRangeChange\": {\"type\": \"reload\"}}}"}, {"instruction": "实现一个 amis 页面，页面上有一个时间范围选择器组件和四个图表组件，分别是饼图、饼图、折线图、柱状图，时间范围选择器的选择会触发这三个图表的刷新并根据选择范围重新获取数据，时间选择器独占一行，每两个图表并列一行", "input": "", "output": "{\"type\": \"page\",\"title\": \"AMIS 页面\",\"body\": [{\"type\": \"form\",\"title\": \"时间范围选择器\",\"controls\": [{\"type\": \"date-range\",\"name\": \"dateRange\",\"label\": \"选择时间范围\",\"format\": \"YYYY-MM-DD\",\"value\": [\"2021-01-01\", \"2021-01-31\"],\"onChange\": \"handleDateRangeChange\"}]},{\"type\": \"row\",\"columns\": [{\"type\": \"column\",\"span\": 12,\"children\": [{\"type\": \"chart\",\"title\": \"饼图1\",\"source\": \"api/getPieChart1Data\"}]}]},{\"type\": \"row\",\"columns\": [{\"type\": \"column\",\"span\": 12,\"children\": [{\"type\": \"chart\",\"title\": \"饼图2\",\"source\": \"api/getPieChart2Data\"}]}]},{\"type\": \"row\",\"columns\": [{\"type\": \"column\",\"span\": 12,\"children\": [{\"type\": \"chart\",\"title\": \"折线图\",\"source\": \"api/getLineChart1Data\"}]}]},{\"type\": \"row\",\"columns\": [{\"type\": \"column\",\"span\": 12,\"children\": [{\"type\": \"chart\",\"title\": \"柱状图\",\"source\": \"api/getBarChart1Data\"}]}]}],\"api\": {\"getPieChart1Data\": \"/api/getPieChart1Data\",\"getPieChart2Data\": \"/api/getPieChart2Data\",\"getLineChart1Data\": \"/api/getLineChart1Data\",\"getBarChart1Data\": \"/api/getBarChart1Data\"},\"events\": {\"handleDateRangeChange\": {\"type\": \"reload\",\"target\": [\"getPieChart1Data\", \"getPieChart2Data\", \"getLineChart1Data\", \"getBarChart1Data\"]}}}"}, {"instruction": "实现一个 amis 页面，页面包括以下内容：一个独立的列表组件，通过接口获取ID、版本、压测场景、场景描述、负责人、创建时间字段，一个service组件，通过统一的接口获取请求QPS、转发延迟、CPU 空闲、内存占用四个指标的数据并分发到内部的四个折线图中，支持根据版本和压测场景筛选折线图的数据，每两个折线图占一行", "input": "", "output": "以下是一个示例的 amis页面的JSON配置：{\"type\": \"page\",\"title\": \"AMIS页面示例\",\"body\": [{\"type\": \"list\",\"api\": \"/api/getListData\",\"columns\": [{\"name\": \"id\",\"label\": \"ID\"},{\"name\": \"version\",\"label\": \"版本\"},{\"name\": \"testScene\",\"label\": \"压测场景\"},{\"name\": \"sceneDescription\",\"label\": \"场景描述\"},{\"name\": \"owner\",\"label\": \"负责人\"},{\"name\": \"createTime\",\"label\": \"创建时间\"}]},{\"type\": \"service\",\"api\": \"/api/getChartData\",\"body\": {\"type\": \"grid\",\"columns\": 2,\"children\": [{\"type\": \"chart\",\"api\": \"/api/getLineChartData\",\"name\": \"qpsChart\",\"title\": \"QPS\",\"xField\": \"time\",\"yField\": \"qps\"},{\"type\": \"chart\",\"api\": \"/api/getLineChartData\",\"name\": \"delayChart\",\"title\": \"转发延迟\",\"xField\": \"time\",\"yField\": \"delay\"},{\"type\": \"chart\",\"api\": \"/api/getLineChartData\",\"name\": \"cpuChart\",\"title\": \"CPU空闲\",\"xField\": \"time\",\"yField\": \"cpu\"},{\"type\": \"chart\",\"api\": \"/api/getLineChartData\",\"name\": \"memoryChart\",\"title\": \"内存占用\",\"xField\": \"time\",\"yField\": \"memory\"}]}}]}上述配置中，使用了AMIS的`list`组件展示列表数据，通过`api`属性指定了获取数据的接口`/api/getListData`，并通过`columns`属性定义了列表的列。使用了`service`组件展示折线图数据，通过`api`属性指定了获取数据的接口`/api/getChartData`，并在`body`属性中定义了一个`grid`布局，每行显示两个折线图。每个折线图使用了`chart`组件，通过`api`属性指定了获取数据的接口`/api/getLineChartData`，并通过`name`属性给每个折线图命名，`title`属性定义了折线图的标题，`xField`和`yField`属性指定了折线图的横轴和纵轴字段。你需要根据实际情况修改接口地址和字段名称，并在后端实现对应的接口来提供数据。"}, {"instruction": "用 amis 实现一个 ”拜访跟进“ 表单，包括选择客户、客户编码、客户名称、拜访时间、拜访人、拜访方式、拜访结果、拜访内容、附件（不超过10MB）、下次拜访时间字段，其中“选择客户”是一个下拉框，通过一个接口 /api/customerList 获取客户数据，该接口会同时返回customerCode 和customerName 两个字段，分别对应“客户编码”和“客户名称”，“客户编码”和“客户名称” 输入框禁用，当“选择客户”的选值发生变化时，使用对应选项的 customerCode 和customerName 两个字段自动填充这两个输入框的值", "input": "", "output": "{\"customerList\": [{\"customerCode\": \"001\",\"customerName\": \"客户A\"},{\"customerCode\": \"002\",\"customerName\": \"客户B\"},{\"customerCode\": \"003\",\"customerName\": \"客户C\"}]}"}, {"instruction": "用 amis 实现一个页面，通过一个统一的接口返回页面数据，该页面上有一个富文本框，一个折线图，三个饼图和一个table组件，富文本框使用接口返回的 data1 字段，table 组件使用接口返回的 data3 字段", "input": "", "output": "以下是使用 amis 实现的页面代码示例：{\"type\": \"page\",\"title\": \"页面标题\",\"body\": [{\"type\": \"html\",\"html\": \"<h2>富文本框</h2>\"},{\"type\": \"tpl\",\"tpl\": \"${data1}\"},{\"type\": \"html\",\"html\": \"<h2>折线图</h2>\"},{\"type\": \"chart\",\"config\": {\"type\": \"line\",\"source\": \"${data2}\"}},{\"type\": \"html\",\"html\": \"<h2>饼图</h2>\"},{\"type\": \"chart\",\"config\": {\"type\": \"pie\",\"source\": \"${data3}\"}},{\"type\": \"html\",\"html\": \"<h2>表格</h2>\"},{\"type\": \"table\",\"config\": {\"source\": \"${data3}\"}}],\"api\": {\"data1\": \"/api/getData1\",\"data2\": \"/api/getData2\",\"data3\": \"/api/getData3\"}}在上述代码中，使用了 amis 的页面组件来构建页面，包括富文本框、折线图、饼图和表格。通过 `api` 字段指定了接口的地址，分别对应了 `data1`、`data2` 和 `data3` 字段的数据。你需要根据实际情况，将接口地址替换为正确的地址，并确保接口返回的数据格式符合页面组件的要求。"}, {"instruction": "用 amis 实现一个 “新增产品” 页面，页面包含一个无边框表单，表单有产品编号、产品名称、产品分类、产品规格、产品单位、产品图片、销售价、成本价、产品简介这些字段，其中产品编号、产品名称、产品分类、销售价、成本价格为必填，销售价和成本价不得小于1", "input": "", "output": "以下是使用AMIS实现的\"新增产品\"页面的代码示例：{\"type\": \"form\",\"title\": \"新增产品\",\"controls\": [{\"type\": \"text\",\"name\": \"productCode\",\"label\": \"产品编号\",\"required\": true},{\"type\": \"text\",\"name\": \"productName\",\"label\": \"产品名称\",\"required\": true},{\"type\": \"select\",\"name\": \"productCategory\",\"label\": \"产品分类\",\"required\": true,\"options\": [{\"label\": \"分类1\",\"value\": \"category1\"},{\"label\": \"分类2\",\"value\": \"category2\"},{\"label\": \"分类3\",\"value\": \"category3\"}]},{\"type\": \"text\",\"name\": \"productSpec\",\"label\": \"产品规格\"},{\"type\": \"text\",\"name\": \"productUnit\",\"label\": \"产品单位\"},{\"type\": \"image\",\"name\": \"productImage\",\"label\": \"产品图片\"},{\"type\": \"number\",\"name\": \"salePrice\",\"label\": \"销售价\",\"required\": true,\"min\": 1},{\"type\": \"number\",\"name\": \"costPrice\",\"label\": \"成本价\",\"required\": true,\"min\": 1},{\"type\": \"textarea\",\"name\": \"productDescription\",\"label\": \"产品简介\"}],\"api\": {\"url\": \"/api/addProduct\",\"method\": \"post\"}}请注意，上述代码中的`/api/addProduct`是一个示例的API接口地址，你需要根据实际情况进行替换。"}, {"instruction": "用 amis 实现一个列表页，包含ID、客户编码、客户名称、开拓日期、开拓人、客户类型、地址、详细地址、姓名、手机、电话、职位、邮箱、qq、客户来源字段，支持详情、编辑、删除操作，支持根据客户编码、手机、客户名称、地址、姓名进行筛选，支持分页，可设置每页显示 10，20，50 条，其中手机字段支持点击拨打手机，邮箱字段支持点击发送邮件", "input": "", "output": "{\"list\": [{\"ID\": 1,\"客户编码\": \"C001\",\"客户名称\": \"ABC公司\",\"开拓日期\": \"2020-01-01\",\"开拓人\": \"张三\",\"客户类型\": \"重要客户\",\"地址\": \"北京市\",\"详细地址\": \"朝阳区\",\"姓名\": \"李四\",\"手机\": \"13812345678\",\"电话\": \"010-12345678\",\"职位\": \"经理\",\"邮箱\": \"lisi@abc.com\",\"qq\": \"123456789\",\"客户来源\": \"广告推广\"},{\"ID\": 2,\"客户编码\": \"C002\",\"客户名称\": \"XYZ公司\",\"开拓日期\": \"2020-02-01\",\"开拓人\": \"王五\",\"客户类型\": \"普通客户\",\"地址\": \"上海市\",\"详细地址\": \"浦东新区\",\"姓名\": \"赵六\",\"手机\": \"13998765432\",\"电话\": \"021-87654321\",\"职位\": \"员工\",\"邮箱\": \"zhaoliu@xyz.com\",\"qq\": \"987654321\",\"客户来源\": \"口碑推荐\"}],\"total\": 2,\"pageSize\": 10,\"currentPage\": 1}"}, {"instruction": "用 amis 实现一个 “客户反馈意见调查表”，其内容如下：1. 一行文本，内容为“为了让我们的产品、服务能更好的满足您的需求，希望您在百忙之中给予我们客观的评价，您的建议是我们奋进的动力，我们将虚心听取并及时改进，感谢您的支持！” 2. 基础信息：公司名称，您的姓名，联系电话，地址  3. 问题选项：1）您对公司产品结构是否满意？（很满意，满意，较满意，不满意） 2. 对公司产品质量是否满意？（很满意，满意，较满意，不满意）4. 您的其他意见或要求", "input": "", "output": "{\"prompt\": \"为了让我们的产品、服务能更好的满足您的需求，希望您在百忙之中给予我们客观的评价，您的建议是我们奋进的动力，我们将虚心听取并及时改进，感谢您的支持！\",\"fields\": [{\"label\": \"公司名称\",\"type\": \"text\",\"required\": true},{\"label\": \"您的姓名\",\"type\": \"text\",\"required\": true},{\"label\": \"联系电话\",\"type\": \"text\",\"required\": true},{\"label\": \"地址\",\"type\": \"text\",\"required\": true},{\"label\": \"您对公司产品结构是否满意？\",\"type\": \"select\",\"options\": [\"很满意\", \"满意\", \"较满意\", \"不满意\"],\"required\": true},{\"label\": \"对公司产品质量是否满意？\",\"type\": \"select\",\"options\": [\"很满意\", \"满意\", \"较满意\", \"不满意\"],\"required\": true},{\"label\": \"您的其他意见或要求\",\"type\": \"textarea\",\"required\": false}]}"}, {"instruction": "用 amis 实现一个 “合同订单” 表单，包含合同编号、合同名称、选择客户、产品列表填写字段，其中产品列表填写用一个 input-table 组件承载，包含产品名称、产品编号、产品分类、产品规格、产品单位、销售价、数量、小计字段，“小计” 字段为销售价 * 数量的值", "input": "", "output": "以下是使用AMIS实现的合同订单表单的代码示例：{\"type\": \"form\",\"title\": \"合同订单\",\"controls\": [{\"type\": \"text\",\"name\": \"contractNumber\",\"label\": \"合同编号\"},{\"type\": \"text\",\"name\": \"contractName\",\"label\": \"合同名称\"},{\"type\": \"select\",\"name\": \"customer\",\"label\": \"选择客户\",\"options\": [{\"label\": \"客户A\",\"value\": \"A\"},{\"label\": \"客户B\",\"value\": \"B\"},{\"label\": \"客户C\",\"value\": \"C\"}]},{\"type\": \"input-table\",\"name\": \"productList\",\"label\": \"产品列表\",\"addButtonText\": \"添加产品\",\"columns\": [{\"name\": \"productName\",\"label\": \"产品名称\",\"type\": \"text\"},{\"name\": \"productNumber\",\"label\": \"产品编号\",\"type\": \"text\"},{\"name\": \"productCategory\",\"label\": \"产品分类\",\"type\": \"text\"},{\"name\": \"productSpec\",\"label\": \"产品规格\",\"type\": \"text\"},{\"name\": \"productUnit\",\"label\": \"产品单位\",\"type\": \"text\"},{\"name\": \"productPrice\",\"label\": \"销售价\",\"type\": \"number\"},{\"name\": \"quantity\",\"label\": \"数量\",\"type\": \"number\"},{\"name\": \"subtotal\",\"label\": \"小计\",\"type\": \"number\",\"readOnly\": true,\"visible\": false}],\"addButtonClassName\": \"btn-primary\",\"removeButtonClassName\": \"btn-danger\"}],\"submitText\": \"提交\",\"resetText\": \"重置\"}请注意，上述代码只是一个示例，你可以根据实际需求进行修改和扩展。"}, {"instruction": "用 amis 实现一个 “上课考勤” 列表，包含授课日期、年级、班级、节次、学科、学生缺勤情况列表字段，其中“学生缺勤情况”为一个按钮，点击出现一个弹窗，通过一个接口拉取学生缺勤情况列表并展示在一个包含学生、缺勤原因、备注字段的列表中", "input": "", "output": "{\"classAttendanceList\": [{\"date\": \"2021-09-01\",\"grade\": \"一年级\",\"class\": \"1班\",\"period\": \"第一节\",\"subject\": \"数学\",\"absentStudents\": [{\"student\": \"张三\",\"reason\": \"生病\",\"remark\": \"请假\"},{\"student\": \"李四\",\"reason\": \"家庭原因\",\"remark\": \"\"}]},{\"date\": \"2021-09-01\",\"grade\": \"一年级\",\"class\": \"2班\",\"period\": \"第一节\",\"subject\": \"语文\",\"absentStudents\": [{\"student\": \"王五\",\"reason\": \"迟到\",\"remark\": \"\"},{\"student\": \"赵六\",\"reason\": \"旷课\",\"remark\": \"\"}]}]}"}, {"instruction": "实现一个外观为链接的 amis 按钮，点击弹窗，弹窗内部通过外层传入的 id 字段获取数据并用一个 crud 列表展示，该列表展示教师、班级、学科、上课地点字段，并在 “班级” 字段中嵌入一个弹出提示组件，用于展示包含 班级类别、年级、班别、班级名称、班主任、位置字段的详情", "input": "", "output": "{\"type\": \"button\",\"label\": \"查看详情\",\"level\": \"link\",\"actionType\": \"dialog\",\"dialog\": {\"title\": \"详情\",\"body\": {\"type\": \"crud\",\"api\": \"/api/getData\",\"columns\": [{\"name\": \"teacher\",\"label\": \"教师\"},{\"name\": \"class\",\"label\": \"班级\",\"type\": \"dialog\",\"dialog\": {\"title\": \"班级详情\",\"body\": {\"type\": \"form\",\"api\": \"/api/getClassDetail\",\"controls\": [{\"name\": \"category\",\"label\": \"班级类别\"},{\"name\": \"grade\",\"label\": \"年级\"},{\"name\": \"classType\",\"label\": \"班别\"},{\"name\": \"className\",\"label\": \"班级名称\"},{\"name\": \"classTeacher\",\"label\": \"班主任\"},{\"name\": \"location\",\"label\": \"位置\"}]}}},{\"name\": \"subject\",\"label\": \"学科\"},{\"name\": \"location\",\"label\": \"上课地点\"}]}}}"}, {"instruction": "用amis实现一个包含星期、学科、教师、班级、节次字段的列表，支持编辑操作，编辑弹窗中设置 “星期” 字段为不可修改，学科、教师、班级、账号字段为必填", "input": "", "output": "以下是使用amis实现的一个包含星期、学科、教师、班级、节次字段的列表，并支持编辑操作的示例代码：{\"type\": \"page\",\"title\": \"课程列表\",\"body\": {\"type\": \"crud\",\"api\": \"/api/courses\",\"columns\": [{\"name\": \"week\",\"label\": \"星期\",\"type\": \"text\",\"disabled\": true},{\"name\": \"subject\",\"label\": \"学科\",\"type\": \"text\",\"required\": true},{\"name\": \"teacher\",\"label\": \"教师\",\"type\": \"text\",\"required\": true},{\"name\": \"class\",\"label\": \"班级\",\"type\": \"text\",\"required\": true},{\"name\": \"period\",\"label\": \"节次\",\"type\": \"text\"}],\"operations\": [{\"label\": \"编辑\",\"type\": \"button\",\"actionType\": \"dialog\",\"dialog\": {\"title\": \"编辑课程\",\"body\": {\"type\": \"form\",\"api\": \"/api/courses/$id\",\"controls\": [{\"name\": \"week\",\"label\": \"星期\",\"type\": \"text\",\"disabled\": true},{\"name\": \"subject\",\"label\": \"学科\",\"type\": \"text\",\"required\": true},{\"name\": \"teacher\",\"label\": \"教师\",\"type\": \"text\",\"required\": true},{\"name\": \"class\",\"label\": \"班级\",\"type\": \"text\",\"required\": true},{\"name\": \"period\",\"label\": \"节次\",\"type\": \"text\"}]}}}]}}请注意，上述代码中的`/api/courses`和`/api/courses/$id`是示例的API接口地址，你需要根据实际情况进行替换。"}, {"instruction": "用amis实现一个 “教师档案” 列表，包含教师、登录账号、教师工号、工作证、身份证号、身份证件、性别、联系方式字段，其中工作证和身份证件为图片类型，教师工号字段支持排序", "input": "", "output": "{\"teachers\": [{\"name\": \"张三\",\"username\": \"zhangsan\",\"teacherId\": \"T001\",\"workPermit\": \"work_permit_image_url\",\"idCardNumber\": \"1234567890\",\"idCardImage\": \"id_card_image_url\",\"gender\": \"男\",\"contact\": \"1234567890\"},{\"name\": \"李四\",\"username\": \"lisi\",\"teacherId\": \"T002\",\"workPermit\": \"work_permit_image_url\",\"idCardNumber\": \"0987654321\",\"idCardImage\": \"id_card_image_url\",\"gender\": \"女\",\"contact\": \"0987654321\"}]}"}, {"instruction": "实现一个包含“文章标题”“文章标签”“文章内容” 的 “文章发布” 表单，其中 “文章内容” 需要支持图文混排，“标签” 从一个接口 /tags 获取，用 amis 实现这个需求并给出标签接口的 api 返回示例", "input": "", "output": "以下是使用AMIS实现的文章发布表单的示例代码：jsximport React, { useState, useEffect } from 'react';import { render, useForm } from 'amis';import { Alert } from 'antd';const tagsApi = '/tags'; // 标签接口const ArticleForm = () => {const [tags, setTags] = useState([]);const [error, setError] = useState(null);const { form, onSubmit } = useForm();useEffect(() => {fetchTags();}, []);const fetchTags = async () => {try {const response = await fetch(tagsApi);const data = await response.json();setTags(data);} catch (error) {setError('Failed to fetch tags');}};const handleSubmit = async (values) => {// 处理表单提交逻辑console.log(values);};return (<div>{error && <Alert message={error} type=\"error\" />}<form onSubmit={onSubmit(handleSubmit)}><div className=\"form-group\"><label>文章标题</label><input type=\"text\" className=\"form-control\" name=\"title\" ref={form.register({ required: true })} /></div><div className=\"form-group\"><label>文章标签</label><select className=\"form-control\" name=\"tag\" ref={form.register({ required: true })}>{tags.map((tag) => (<option key={tag.id} value={tag.id}>{tag.name}</option>))}</select></div><div className=\"form-group\"><label>文章内容</label><textarea className=\"form-control\" name=\"content\" ref={form.register({ required: true })} /></div><button type=\"submit\" className=\"btn btn-primary\">发布</button></form></div>);};render(<ArticleForm />);标签接口的返回示例：[{ \"id\": 1, \"name\": \"标签1\" },{ \"id\": 2, \"name\": \"标签2\" },{ \"id\": 3, \"name\": \"标签3\" }]请注意，上述代码中使用了AMIS的`useForm`和`onSubmit`来处理表单的提交和验证。`fetchTags`函数用于从标签接口获取标签数据，并将其存储在`tags`状态中。在表单中使用`tags.map`来渲染标签选项。你可以根据自己的需求进行修改和定制。"}, {"instruction": "用 amis 实现一个包含 ID、图片、资产编码、资产名称、计量单位、采购价格、型号、购入日期、保修截止期、资产状态、健康状态、资产类目的列表，支持批量修改和批量删除，支持导出 Excel并限制只导出资产编码、资产名称、资产状态字段", "input": "", "output": "{\"data\": [{\"id\": 1,\"image\": \"image1.jpg\",\"assetCode\": \"A001\",\"assetName\": \"Asset 1\",\"unit\": \"个\",\"purchasePrice\": 1000,\"model\": \"Model 1\",\"purchaseDate\": \"2021-01-01\",\"warrantyEndDate\": \"2023-01-01\",\"assetStatus\": \"在库\",\"healthStatus\": \"良好\",\"category\": \"类目1\"},{\"id\": 2,\"image\": \"image2.jpg\",\"assetCode\": \"A002\",\"assetName\": \"Asset 2\",\"unit\": \"台\",\"purchasePrice\": 2000,\"model\": \"Model 2\",\"purchaseDate\": \"2021-02-01\",\"warrantyEndDate\": \"2023-02-01\",\"assetStatus\": \"在用\",\"healthStatus\": \"正常\",\"category\": \"类目2\"},...]}你可以使用以下代码作为参考：javascriptconst assets = [{id: 1,image: \"image1.jpg\",assetCode: \"A001\",assetName: \"Asset 1\",unit: \"个\",purchasePrice: 1000,model: \"Model 1\",purchaseDate: \"2021-01-01\",warrantyEndDate: \"2023-01-01\",assetStatus: \"在库\",healthStatus: \"良好\",category: \"类目1\"},{id: 2,image: \"image2.jpg\",assetCode: \"A002\",assetName: \"Asset 2\",unit: \"台\",purchasePrice: 2000,model: \"Model 2\",purchaseDate: \"2021-02-01\",warrantyEndDate: \"2023-02-01\",assetStatus: \"在用\",healthStatus: \"正常\",category: \"类目2\"},...];// 批量修改function batchUpdateAssetStatus(assetIds, newStatus) {for (const asset of assets) {if (assetIds.includes(asset.id)) {asset.assetStatus = newStatus;}}}// 批量删除function batchDeleteAssets(assetIds) {assets = assets.filter(asset => !assetIds.includes(asset.id));}// 导出 Excelfunction exportToExcel() {const exportedData = assets.map(asset => ({assetCode: asset.assetCode,assetName: asset.assetName,assetStatus: asset.assetStatus}));// 导出逻辑}请注意，以上代码只是一个示例，你需要根据实际需求进行适当的修改和完善。"}, {"instruction": "用 amis 实现一个 “企业入驻登记表”，包含公司名称、入驻时间、楼宇、单元号、房间号、员工表字段，其中员工表包含数量不定的多个子项，每个子项包含手机号和员工名两项信息", "input": "", "output": "{\"companyName\": \"ABC公司\",\"entryTime\": \"2021-01-01\",\"building\": \"A栋\",\"unitNumber\": \"1单元\",\"roomNumber\": \"101\",\"employees\": [{\"phoneNumber\": \"1234567890\",\"employeeName\": \"张三\"},{\"phoneNumber\": \"9876543210\",\"employeeName\": \"李四\"}]}"}, {"instruction": "用 amis 实现一个 “楼宇信息” 表单，包含 “楼宇号” 和 “单元号” 两个字段，并排显示，“单元号” 通过一个接口返回并填充到下拉框，下拉框支持检索和清除", "input": "", "output": "以下是使用AMIS实现的\"楼宇信息\"表单的示例代码：{\"type\": \"form\",\"title\": \"楼宇信息\",\"controls\": [{\"type\": \"select\",\"name\": \"buildingNumber\",\"label\": \"楼宇号\",\"clearable\": true,\"source\": \"/api/buildingNumbers\"},{\"type\": \"select\",\"name\": \"unitNumber\",\"label\": \"单元号\",\"clearable\": true,\"source\": \"/api/unitNumbers?buildingNumber=$buildingNumber\"}]}在上面的示例中，我们使用了AMIS的`form`组件来创建一个表单。表单中包含两个字段：`buildingNumber`和`unitNumber`。`buildingNumber`字段是一个下拉框，通过设置`source`属性为`/api/buildingNumbers`，来从接口获取楼宇号的选项列表。设置`clearable`属性为`true`，使得下拉框支持清除选项。`unitNumber`字段也是一个下拉框，通过设置`source`属性为`/api/unitNumbers?buildingNumber=$buildingNumber`，来从接口获取与选定的楼宇号相关的单元号的选项列表。同样地，设置`clearable`属性为`true`，使得下拉框支持清除选项。请注意，上述示例中的接口路径仅为示意，您需要根据实际情况修改为您的接口路径。"}, {"instruction": "用 amis 实现一个列表，列表中包含 “销售工号” 和其他字段，“销售工号” 支持点击弹窗，弹窗中包含一个折线图组件，根据被点击的销售工号筛选图表数据并返回", "input": "", "output": "以下是使用 amis 实现的一个列表，其中包含 \"销售工号\" 和其他字段。当点击 \"销售工号\" 时，会弹出一个包含折线图组件的弹窗。根据被点击的销售工号筛选图表数据并返回。{\"type\": \"list\",\"api\": \"/api/sales\",\"columns\": [{\"name\": \"销售工号\",\"type\": \"link\",\"link\": \"javascript:showChart({id})\",\"sortable\": true},{\"name\": \"姓名\",\"type\": \"text\"},{\"name\": \"部门\",\"type\": \"text\"},{\"name\": \"销售额\",\"type\": \"number\"}],\"events\": {\"showChart\": {\"type\": \"dialog\",\"title\": \"销售工号 {id} 的折线图\",\"body\": {\"type\": \"chart\",\"api\": \"/api/chartData?id={id}\",\"config\": {\"type\": \"line\"}}}}}在上面的代码中，我们使用了 amis 的 `list` 组件来展示列表数据。通过 `api` 属性指定了获取数据的接口地址。`columns` 属性定义了列表的列，其中 \"销售工号\" 列使用了 `link` 类型，并通过 `link` 属性指定了点击时触发的事件 `showChart`。`sortable` 属性设置为 `true`，表示该列可以进行排序。在 `events` 属性中定义了 `showChart` 事件，它是一个弹窗类型的事件。弹窗的标题为 \"销售工号 {id} 的折线图\"，其中 `{id}` 是被点击的销售工号的值。弹窗的内容是一个折线图组件，通过 `api` 属性指定了获取图表数据的接口地址，其中 `{id}` 是被点击的销售工号的值。图表的类型通过 `config` 属性设置为 \"line\"，表示折线图类型。请根据实际情况替换接口地址和数据字段，以及根据需要调整样式和配置。"}, {"instruction": "用 amis 实现一个分栏布局， 每栏的内容分别为：第一栏：大标题“党组织”，背景红色，文字白色，居中，独占一行，包含三个链接按钮，“党组织信息”“干部任免录入”，“历任干部信息”，单列竖排居中，第二栏：大标题“党员管理”，样式同第一栏，包含六个链接按钮：党员档案、党员状态变更，党内培训记录，党内表彰 / 处分，组织关系转入，组织关系转出，按钮分两列展示", "input": "", "output": "{\"columns\": [{\"title\": \"党组织\",\"background\": \"red\",\"color\": \"white\",\"align\": \"center\",\"content\": [{\"text\": \"党组织信息\",\"link\": \"https://example.com/党组织信息\"},{\"text\": \"干部任免录入\",\"link\": \"https://example.com/干部任免录入\"},{\"text\": \"历任干部信息\",\"link\": \"https://example.com/历任干部信息\"}]},{\"title\": \"党员管理\",\"background\": \"red\",\"color\": \"white\",\"align\": \"center\",\"content\": [{\"text\": \"党员档案\",\"link\": \"https://example.com/党员档案\"},{\"text\": \"党员状态变更\",\"link\": \"https://example.com/党员状态变更\"},{\"text\": \"党内培训记录\",\"link\": \"https://example.com/党内培训记录\"},{\"text\": \"党内表彰 / 处分\",\"link\": \"https://example.com/党内表彰处分\"},{\"text\": \"组织关系转入\",\"link\": \"https://example.com/组织关系转入\"},{\"text\": \"组织关系转出\",\"link\": \"https://example.com/组织关系转出\"}]}]}"}, {"instruction": "用 amis 实现一个横向导航，包含 “首页”“度新闻”“度论坛”“度学堂”“度文化”“度生活”几个导航项目，其中“度新闻”下包含 “公司新闻”“内部动态”“部门风采”“专题聚焦”“互动专区”“生活资讯”“红黑榜” 几个子菜单项", "input": "", "output": "{\"navItems\": [{\"name\": \"首页\"},{\"name\": \"度新闻\",\"subMenu\": [{\"name\": \"公司新闻\"},{\"name\": \"内部动态\"},{\"name\": \"部门风采\"},{\"name\": \"专题聚焦\"},{\"name\": \"互动专区\"},{\"name\": \"生活资讯\"},{\"name\": \"红黑榜\"}]},{\"name\": \"度论坛\"},{\"name\": \"度学堂\"},{\"name\": \"度文化\"},{\"name\": \"度生活\"}]}"}, {"instruction": "用 amis 实现一个页面布局：顶部是一个导航，顶部下方分两栏，宽度比为 2:1，左侧是一个轮播图，右侧是一个新闻列表", "input": "", "output": "{\"header\": {\"title\": \"导航\",\"links\": [{\"text\": \"首页\",\"url\": \"/\"},{\"text\": \"关于我们\",\"url\": \"/about\"},{\"text\": \"联系我们\",\"url\": \"/contact\"}]},\"content\": {\"leftColumn\": {\"carousel\": {\"images\": [\"image1.jpg\",\"image2.jpg\",\"image3.jpg\"]}},\"rightColumn\": {\"newsList\": [{\"title\": \"新闻标题1\",\"content\": \"新闻内容1\"},{\"title\": \"新闻标题2\",\"content\": \"新闻内容2\"},{\"title\": \"新闻标题3\",\"content\": \"新闻内容3\"}]}}}"}, {"instruction": "用 amis 实现一个 “采购单” 表单，包含采购单号、采购说明和采购物列表，采购列表用一个 combo 组件实现，支持新增文具、礼品、购物卡类型，当类型为 “文具” 时支持填写文具名称、单价、数量、单位以及从列表中选择供应商，当类型为 “礼品” 时支持填写总预算、用途以及从列表中选择供应商，当类别为 “购物卡” 时支持填写总预算以及从列表中选择供应商", "input": "", "output": "{\"purchaseOrderNumber\": \"PO123456\",\"purchaseDescription\": \"采购文具、礼品和购物卡\",\"purchaseItems\": [{\"type\": \"文具\",\"stationeryName\": \"笔记本\",\"unitPrice\": 10,\"quantity\": 100,\"unit\": \"个\",\"supplier\": \"供应商A\"},{\"type\": \"礼品\",\"budget\": 5000,\"purpose\": \"员工生日礼物\",\"supplier\": \"供应商B\"},{\"type\": \"购物卡\",\"budget\": 10000,\"supplier\": \"供应商C\"}]}"}, {"instruction": "用 amis 实现一个 service 组件，通过一个api  /serviceApi 返回数据，每隔 2000 毫秒轮询一次，当返回数据中的 stop 字段为 true 时停止轮询", "input": "", "output": "您可以使用AMIS来实现一个service组件，通过一个API`/serviceApi`返回数据，并且每隔2000毫秒轮询一次，当返回数据中的stop字段为true时停止轮询。以下是一个示例代码：jsximport React, { useState, useEffect } from 'react';import { Service } from 'amis';const ServiceComponent = () => {const [data, setData] = useState(null);useEffect(() => {const fetchData = async () => {try {const response = await fetch('/serviceApi');const result = await response.json();setData(result);if (result.stop) {return;}setTimeout(fetchData, 2000);} catch (error) {console.error('Error:', error);}};fetchData();}, []);return (<Serviceinterval={2000}fetcher={() => {return new Promise((resolve, reject) => {if (data && data.stop) {reject();} else {resolve(data);}});}}>{({ data }) => {if (data) {return <pre>{JSON.stringify(data, null, 2)}</pre>;} else {return <div>Loading...</div>;}}}</Service>);};export default ServiceComponent;在上面的代码中，我们使用了`useState`和`useEffect`来处理数据的获取和轮询。在`useEffect`中，我们使用`fetch`函数来获取数据，并且使用`setTimeout`来实现轮询。当返回数据中的`stop`字段为true时，停止轮询。在`Service`组件中，我们设置了轮询的间隔为2000毫秒，并且使用`fetcher`函数来获取数据。在`fetcher`函数中，我们返回一个Promise对象，如果数据中的`stop`字段为true，则reject该Promise，否则resolve该Promise。最后，我们根据数据的状态来渲染组件。如果数据存在，则以JSON格式显示数据，否则显示\"Loading...\"。"}, {"instruction": "用 amis 实现一个 “个人信息填写” 表单，表单上有姓名、籍贯、身份证号、照片、在职情况字段，所有字段均为必填，填写完这些字段点击提交后，提交接口会返回一个 “infoTplID” 字段，将该字段发送给页面上一个功能为“附加信息填写” 的 service 组件，该 service 组件根据 infoTplID 字段动态请求附加信息表单的填写界面并渲染到 service 组件的内部", "input": "", "output": "{\"name\": \"姓名\",\"hometown\": \"籍贯\",\"idCard\": \"身份证号\",\"photo\": \"照片\",\"employmentStatus\": \"在职情况\"}"}, {"instruction": "用 amis 的 combo 组件实现一个支持填写多条包含姓名、班级、参赛项目字段的表单项，并支持添加、删除和拖拽排序", "input": "", "output": "你可以使用 amis 的 Combo 组件来实现这个需求。下面是一个示例代码：{\"type\": \"combo\",\"name\": \"form\",\"controls\": [{\"type\": \"form\",\"name\": \"items\",\"controls\": [{\"type\": \"array\",\"name\": \"participants\",\"label\": \"参赛人员\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"text\",\"name\": \"class\",\"label\": \"班级\"},{\"type\": \"text\",\"name\": \"project\",\"label\": \"参赛项目\"}]}]}],\"buttons\": [{\"label\": \"添加\",\"actionType\": \"add\",\"addControls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"text\",\"name\": \"class\",\"label\": \"班级\"},{\"type\": \"text\",\"name\": \"project\",\"label\": \"参赛项目\"}]},{\"label\": \"删除\",\"actionType\": \"remove\"}],\"sortable\": true}这个表单项包含一个 Combo 组件，其中包含一个 Form 组件。Form 组件中有一个 Array 组件，用于存储多条参赛人员的信息。每条参赛人员信息由三个 Text 组件组成，分别是姓名、班级和参赛项目。在 Combo 组件中，我们还定义了两个按钮，一个用于添加新的参赛人员信息，另一个用于删除选中的参赛人员信息。同时，我们还设置了 `sortable` 属性为 `true`，以支持拖拽排序。你可以根据需要修改这个示例代码，适应你的具体需求。"}, {"instruction": "有一个 “呼叫保洁“ 表单，包括走廊、办公室、卫生间、院落、车库五个可选区域，当选中走廊和办公室时，出现一个下拉列表，可以选择位置提交，当选中卫生间时，除了位置，还需要支持选择男/女卫，当选中院落时，需要支持前院/后院选项，当选中办公室时，需要支持填写“保洁需求描述”，用 amis 实现这个需求", "input": "", "output": "{\"type\": \"form\",\"title\": \"呼叫保洁\",\"controls\": [{\"type\": \"checkbox\",\"name\": \"areas\",\"label\": \"可选区域\",\"options\": [{\"label\": \"走廊\",\"value\": \"corridor\"},{\"label\": \"办公室\",\"value\": \"office\"},{\"label\": \"卫生间\",\"value\": \"restroom\"},{\"label\": \"院落\",\"value\": \"courtyard\"},{\"label\": \"车库\",\"value\": \"garage\"}]},{\"type\": \"select\",\"name\": \"location\",\"label\": \"位置\",\"visibleOn\": \"data.areas.includes('corridor') || data.areas.includes('office')\",\"options\": [{\"label\": \"位置1\",\"value\": \"location1\"},{\"label\": \"位置2\",\"value\": \"location2\"},{\"label\": \"位置3\",\"value\": \"location3\"}]},{\"type\": \"select\",\"name\": \"restroomType\",\"label\": \"卫生间类型\",\"visibleOn\": \"data.areas.includes('restroom')\",\"options\": [{\"label\": \"男卫\",\"value\": \"male\"},{\"label\": \"女卫\",\"value\": \"female\"}]},{\"type\": \"select\",\"name\": \"courtyardType\",\"label\": \"院落类型\",\"visibleOn\": \"data.areas.includes('courtyard')\",\"options\": [{\"label\": \"前院\",\"value\": \"front\"},{\"label\": \"后院\",\"value\": \"back\"}]},{\"type\": \"textarea\",\"name\": \"description\",\"label\": \"保洁需求描述\",\"visibleOn\": \"data.areas.includes('office')\"},{\"type\": \"submit\",\"label\": \"提交\"}]}"}, {"instruction": "用 amis 实现一个单选框，有 “在线” 和 “离线” 两个选项，另有一个名为 “头像” 的图片组件，当选中值为 “在线” 时 “头像” 组件的 css 类名为“online”，“离线” 时 “头像” 组件的 css 类名为“offline”", "input": "", "output": "{\"radioOptions\": [{\"label\": \"在线\",\"value\": \"online\"},{\"label\": \"离线\",\"value\": \"offline\"}],\"avatarClass\": {\"online\": \"online\",\"offline\": \"offline\"}}"}, {"instruction": "生成一个 amis 下拉框，在值变更时发送一个广播事件并携带参数 type，页面上有两个 service 组件，在监听到这个广播事件后，重新请求 schemaApi 构建自身内部的表单", "input": "", "output": "{\"type\": \"form\",\"title\": \"Service\",\"controls\": [{\"type\": \"select\",\"name\": \"service\",\"label\": \"Service\",\"options\": [{\"label\": \"Service A\",\"value\": \"serviceA\"},{\"label\": \"Service B\",\"value\": \"serviceB\"}],\"onChange\": \"broadcast('serviceChange', { type: $value })\"}]}"}, {"instruction": "设计一个 “运动会报名表“ 表单，分两栏，左侧是包含 “年级” 和 “班级” 信息的树型选择器，右侧包含一个多选框，独占一行，当左侧值发生变更时，向右侧多选框传递年级和班级信息，多选框根据年级和班级获取可选的运动项目并刷新多选框的选项，用 amis 实现这一需求", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"tree-select\",\"name\": \"gradeClass\",\"label\": \"年级和班级\",\"options\": [{\"label\": \"一年级\",\"value\": \"1\",\"children\": [{\"label\": \"1班\",\"value\": \"1\"},{\"label\": \"2班\",\"value\": \"2\"}]},{\"label\": \"二年级\",\"value\": \"2\",\"children\": [{\"label\": \"1班\",\"value\": \"1\"},{\"label\": \"2班\",\"value\": \"2\"}]},{\"label\": \"三年级\",\"value\": \"3\",\"children\": [{\"label\": \"1班\",\"value\": \"1\"},{\"label\": \"2班\",\"value\": \"2\"}]}]},{\"type\": \"checkbox\",\"name\": \"sports\",\"label\": \"运动项目\",\"source\": \"/api/getSports\",\"sourceMethod\": \"GET\",\"sourceParams\": {\"grade\": \"${gradeClass[0]}\",\"class\": \"${gradeClass[1]}\"}}]}"}, {"instruction": "设计一个 “试用申请” amis 表单，包含一个 “所属行业” 多选框并限制最多只能同时选中三项", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"select\",\"name\": \"industry\",\"label\": \"所属行业\",\"multiple\": true,\"max\": 3,\"options\": [{\"label\": \"IT\",\"value\": \"it\"},{\"label\": \"金融\",\"value\": \"finance\"},{\"label\": \"教育\",\"value\": \"education\"},{\"label\": \"医疗\",\"value\": \"medical\"},{\"label\": \"媒体\",\"value\": \"media\"}]}]}"}, {"instruction": "设计一个erp系统中的 “个人主页” ，包含一个 “审批待办” 列表，独占一行，下方是 “全部服务” ，分三栏，每栏分别为：日常办公 - 包含子项 OKR，周报，休假申请。假期/加班记录，费用报销，薪酬福利 - 包含子项工资单，薪酬信息，股权激励，青松计划，商保爆笑，健康体检，评估发展 - 包含子项职称申请，职称评定，绩效评估，，其中 “日常办公” “薪酬福利” “评估发展” 为每项的标题，每个子项都是一个链接，竖直排布，用 amis 实现这一需求", "input": "", "output": "{\"type\": \"page\",\"title\": \"个人主页\",\"body\": [{\"type\": \"container\",\"body\": [{\"type\": \"h3\",\"body\": \"审批待办\"}]},{\"type\": \"container\",\"body\": [{\"type\": \"h3\",\"body\": \"全部服务\"},{\"type\": \"row\",\"body\": [{\"type\": \"col\",\"body\": [{\"type\": \"h4\",\"body\": \"日常办公\"},{\"type\": \"ul\",\"body\": [{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"OKR\",\"href\": \"/okr\"}},{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"周报\",\"href\": \"/weekly-report\"}},{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"休假申请\",\"href\": \"/leave-application\"}},{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"假期/加班记录\",\"href\": \"/leave-overtime-records\"}},{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"费用报销\",\"href\": \"/expense-reimbursement\"}}]}]},{\"type\": \"col\",\"body\": [{\"type\": \"h4\",\"body\": \"薪酬福利\"},{\"type\": \"ul\",\"body\": [{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"工资单\",\"href\": \"/payroll\"}},{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"薪酬信息\",\"href\": \"/compensation-information\"}},{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"股权激励\",\"href\": \"/equity-incentive\"}},{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"青松计划\",\"href\": \"/green-pine-plan\"}},{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"商保爆笑\",\"href\": \"/commercial-insurance\"}},{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"健康体检\",\"href\": \"/health-checkup\"}}]}]},{\"type\": \"col\",\"body\": [{\"type\": \"h4\",\"body\": \"评估发展\"},{\"type\": \"ul\",\"body\": [{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"职称申请\",\"href\": \"/title-application\"}},{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"职称评定\",\"href\": \"/title-evaluation\"}},{\"type\": \"li\",\"body\": {\"type\": \"a\",\"body\": \"绩效评估\",\"href\": \"/performance-evaluation\"}}]}]}]}]}]}"}, {"instruction": "一个 “人才库信息录入” 表单中包含一项 “教育经历录入”，需要支持添加多条，每条包含时间段、不超过 500 字的经历说明以及单个不超过 2MB，最多三个的附件上传，用 amis 实现这一需求", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"list\",\"name\": \"education\",\"label\": \"教育经历录入\",\"addButtonText\": \"添加教育经历\",\"removeButtonText\": \"删除\",\"controls\": [{\"type\": \"date\",\"name\": \"startDate\",\"label\": \"开始时间\"},{\"type\": \"date\",\"name\": \"endDate\",\"label\": \"结束时间\"},{\"type\": \"textarea\",\"name\": \"description\",\"label\": \"经历说明\",\"maxLength\": 500},{\"type\": \"upload\",\"name\": \"attachments\",\"label\": \"附件上传\",\"multiple\": true,\"maxSize\": 2,\"maxCount\": 3}]}]}"}, {"instruction": "实现一个 amis 表单，每隔 1 分钟通过一个内置的 service  组件自动保存一次表单数据，用以实现表单自动保存功能", "input": "", "output": "以下是一个使用 AMIS 表单实现自动保存功能的示例代码：jsximport React, { useState, useEffect } from 'react';import { render } from 'amis';import { toast } from 'amis/lib/components/Toast';import { Service } from 'amis/lib/components/Service';const FormWithAutoSave = () => {const [formData, setFormData] = useState({ name: '', email: '' });useEffect(() => {const intervalId = setInterval(() => {// 每隔 1 分钟自动保存表单数据saveFormData();}, 60000);return () => {clearInterval(intervalId);};}, []);const saveFormData = () => {// 发送保存请求Service.send({method: 'post',url: '/api/saveFormData',data: formData,}).then(() => {toast.success('表单数据已保存');}).catch(() => {toast.error('保存表单数据失败');});};const handleFormChange = (values) => {setFormData(values);};const amisConfig = {type: 'form',title: '自动保存表单',controls: [{type: 'text',name: 'name',label: '姓名',required: true,},{type: 'email',name: 'email',label: '邮箱',required: true,},],data: formData,onChange: handleFormChange,};return render(amisConfig);};export default FormWithAutoSave;在上述代码中，我们使用了 `useState` 和 `useEffect` 钩子来管理表单数据和自动保存的逻辑。`useState` 用于定义表单数据的初始状态，并提供了一个 `setFormData` 函数来更新表单数据。`useEffect` 用于在组件挂载时启动定时器，每隔 1 分钟调用 `saveFormData` 函数保存表单数据，并在组件卸载时清除定时器。`saveFormData` 函数使用 `Service.send` 方法发送保存请求，其中 `method` 指定请求方法为 `post`，`url` 指定保存数据的接口地址，`data` 指定要保存的表单数据。保存成功后，使用 `toast.success` 方法显示保存成功的提示信息，保存失败则使用 `toast.error` 方法显示保存失败的提示信息。最后，我们使用 AMIS 的 `render` 方法渲染表单，并通过 `onChange` 属性监听表单数据的变化，将变化后的数据更新到 `formData` 中。请注意，上述代码中的 `/api/saveFormData` 接口地址仅为示例，你需要根据实际情况修改为你自己的接口地址。"}, {"instruction": "实现一个 amis 表单，通过 /save 接口保存数据，包含两个操作按钮，“暂存” 和 “保存”，“暂存” 按钮向 /tempSave 接口发送请求，以此实现表单暂存功能", "input": "", "output": "以下是一个示例的 amis表单代码，包含了两个操作按钮“暂存”和“保存”，并通过接口将数据保存或暂存。{\"type\": \"form\",\"title\": \"AMIS 表单\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"text\",\"name\": \"email\",\"label\": \"邮箱\"}],\"actions\": [{\"type\": \"button\",\"label\": \"暂存\",\"actionType\": \"ajax\",\"api\": \"/tempSave\",\"method\": \"post\",\"messages\": {\"success\": \"表单已暂存\"}},{\"type\": \"button\",\"label\": \"保存\",\"actionType\": \"ajax\",\"api\": \"/save\",\"method\": \"post\",\"messages\": {\"success\": \"表单已保存\"}}]}你需要根据你的实际需求，将接口地址 `/tempSave` 和 `/save` 替换为你自己的接口地址。这两个接口需要接收表单数据，并进行相应的处理和保存操作。在接口处理完成后，可以返回一个 JSON 格式的响应，包含相应的成功消息。希望这个示例对你有帮助！"}, {"instruction": "用 amis 实现一个页面，页面上有三个折线图，名称分别为 chart1，chart2，chart3，高度均为150，每个折线图占一行，右上角有一个下拉框，支持多选，包含三个选项，chart1，chart2，chart3，当选项选中时同名图表显示，否则隐藏", "input": "", "output": "{\"chart1\": true,\"chart2\": false,\"chart3\": true}"}, {"instruction": "用 amis 实现一个折线图，通过一个接口获取数据，每隔一秒钟拉取一次数据", "input": "", "output": "您可以使用AMIS的`Chart`组件来实现折线图，并通过一个接口每隔一秒钟拉取数据。以下是一个示例代码：jsximport React, { useState, useEffect } from 'react';import { render, Alert, Chart } from 'amis';const fetchData = async () => {const response = await fetch('your_api_url');const data = await response.json();return data;};const LineChart = () => {const [data, setData] = useState([]);useEffect(() => {const interval = setInterval(() => {fetchData().then((data) => {setData(data);});}, 1000);return () => clearInterval(interval);}, []);return (<Charttype=\"line\"data={data}xField=\"x\"yField=\"y\"xAxis={{type: 'category',}}yAxis={{type: 'value',}}/>);};render(<LineChart />);请将`your_api_url`替换为您的实际接口地址。此代码将使用AMIS的`Chart`组件来绘制折线图，并通过`fetchData`函数每隔一秒钟拉取数据。然后，将数据传递给`Chart`组件进行渲染。注意：您需要在项目中安装AMIS和React，并将上述代码集成到您的项目中。"}, {"instruction": "用amis实现一个部件，外层是一个水平分栏组件，以 3:9 比例分两栏，左侧包含一个图片，右侧包含两个叠放的文本，“主标题” 和 “副标题”，生成一个包含五个分栏的分栏组件，每个分栏中都嵌套一个这样的部件", "input": "", "output": "{\"type\": \"Column\",\"columns\": [{\"type\": \"Column\",\"size\": \"3\",\"items\": [{\"type\": \"Image\",\"url\": \"图片地址\"}]},{\"type\": \"Column\",\"size\": \"9\",\"items\": [{\"type\": \"Text\",\"text\": \"主标题\",\"size\": \"large\"},{\"type\": \"Text\",\"text\": \"副标题\",\"size\": \"small\"}]}]}"}, {"instruction": "用amis实现一个三栏布局，显示比例为 2:1:9，第一栏包含一个从接口动态获取选项的复选框组件“管理自定义通道”，选项竖排成一列，并限制其最多同时选中三项，第二栏也包含一个从接口动态获取选项的复选框组件“日期”，选项竖排成一列，限制其最多只能同时选中两项，当第一个多选框的值发生变化时，第二栏的复选框重新请求自身选项，第三栏包含一个 service 组件", "input": "", "output": "以下是使用amis实现的三栏布局的代码：{\"type\": \"page\",\"body\": {\"type\": \"grid\",\"columns\": [{\"type\": \"form\",\"title\": \"管理自定义通道\",\"controls\": [{\"type\": \"checkboxes\",\"name\": \"customChannels\",\"source\": \"/api/customChannels\",\"limit\": 3}]},{\"type\": \"form\",\"title\": \"日期\",\"controls\": [{\"type\": \"checkboxes\",\"name\": \"dates\",\"source\": \"/api/dates\",\"limit\": 2,\"sourceBind\": {\"customChannels\": \"$customChannels\"}}]},{\"type\": \"service\",\"api\": \"/api/service\"}]}}请注意，上述代码中的`/api/customChannels`和`/api/dates`是示例接口地址，你需要根据实际情况替换为你的接口地址。另外，你还需要根据实际需求来实现这些接口的逻辑。"}, {"instruction": "用amis实现一个表格视图组件，第一行展示 “问题”“答案”“记录人” 三个静态文本，并将背景色设置为#F7F7F7，第二行展示 “如何水平居中”“1.1.5 版本之后可以使用 flex 布局，默认就是水平垂直居中。”，“AMIS” 三个静态文本", "input": "", "output": "{\"type\": \"table\",\"columns\": [{\"label\": \"问题\",\"type\": \"text\"},{\"label\": \"答案\",\"type\": \"text\"},{\"label\": \"记录人\",\"type\": \"text\"}],\"value\": [[\"如何水平居中\",\"1.1.5 版本之后可以使用 flex 布局，默认就是水平垂直居中。\",\"AMIS\"]],\"headerClassName\": \"bg-f7f7f7\"}"}, {"instruction": "用amis实现一个表格视图组件，第一行包括 A，B ，C 三个文本，第二行第一个格子占两行，第二个格子占三号，第三个格子占一行", "input": "", "output": "以下是使用amis实现的表格视图组件的JSON格式返回：{\"type\": \"table\",\"columns\": [{\"label\": \"A\",\"name\": \"a\",\"type\": \"text\"},{\"label\": \"B\",\"name\": \"b\",\"type\": \"text\"},{\"label\": \"C\",\"name\": \"c\",\"type\": \"text\"}],\"dataSource\": [{\"a\": \"第一行第一个格子\",\"b\": \"第一行第二个格子\",\"c\": \"第一行第三个格子\"},{\"a\": {\"value\": \"第二行第一个格子\",\"rowSpan\": 2},\"b\": {\"value\": \"第二行第二个格子\",\"colSpan\": 3},\"c\": \"第二行第三个格子\"},{\"a\": \"\",\"b\": \"\",\"c\": \"\"},{\"a\": \"第三行第一个格子\",\"b\": \"第三行第二个格子\",\"c\": \"第三行第三个格子\"}]}这个表格视图组件有三列，分别是A、B、C。第一行是表头，包括A、B、C三个文本。第二行第一个格子占两行，第二个格子占三列，第三个格子占一行。从第三行开始是数据行，每个格子的值可以是文本或者对象，对象可以设置`rowSpan`属性来指定占用的行数，设置`colSpan`属性来指定占用的列数。"}, {"instruction": "用 amis 实现一个表格视图组件，包含两行，每行有三个单元格，第一行高度为 200", "input": "", "output": "{\"type\": \"Table\",\"props\": {\"rows\": [{\"height\": 200,\"cells\": [{\"text\": \"Cell 1\"},{\"text\": \"Cell 2\"},{\"text\": \"Cell 3\"}]},{\"height\": 100,\"cells\": [{\"text\": \"Cell 4\"},{\"text\": \"Cell 5\"},{\"text\": \"Cell 6\"}]}]}}"}, {"instruction": "用 amis 实现一个表格视图组件，包含三行，第一行有三个单元格，第二行有一个占满整行的单元格", "input": "", "output": "{\"type\": \"Table\",\"props\": {\"rows\": [{\"cells\": [{\"text\": \"Cell 1\"},{\"text\": \"Cell 2\"},{\"text\": \"Cell 3\"}]},{\"cells\": [{\"text\": \"Full Width Cell\",\"colSpan\": 3}]},{\"cells\": [{\"text\": \"Cell 4\"},{\"text\": \"Cell 5\"},{\"text\": \"Cell 6\"}]}]}}"}, {"instruction": "用amis 实现这样的效果：一个表格视图组件，第一行显示静态文本 “地区” “城市”“销量”，第二行第一格为占据两行的 “华北”，第二格为 “北京”，第三格为 “20”，第三行第二格为 “天津”，第三格为 “19”", "input": "", "output": "{\"data\": [[\"地区\", \"城市\", \"销量\"],[\"华北\", \"北京\", \"20\"],[\"\", \"天津\", \"19\"]]}"}, {"instruction": "用amis 实现这样的效果：一个表格视图组件，第一行内容为静态文本日志编号、日志名称、检测日期、综合检测负责人、日志数据更新时间、日志状态、操作，第二行的内容为从上下文变量中获取到的日志编号、日志名称、检测日期、综合检测负责人、日志数据更新时间、日志状态、操作 的值，第三行为一个合并的占据一行的单元格，单元格内包含一张图片", "input": "", "output": "您可以使用amis来实现这个表格视图组件。以下是一个示例代码，可以生成一个符合您要求的表格视图组件：{\"type\": \"table\",\"columns\": [{\"label\": \"日志编号\",\"name\": \"logNumber\"},{\"label\": \"日志名称\",\"name\": \"logName\"},{\"label\": \"检测日期\",\"name\": \"detectionDate\"},{\"label\": \"综合检测负责人\",\"name\": \"detectionLeader\"},{\"label\": \"日志数据更新时间\",\"name\": \"updateTime\"},{\"label\": \"日志状态\",\"name\": \"logStatus\"},{\"label\": \"操作\",\"name\": \"operation\"}],\"source\": {\"type\": \"api\",\"url\": \"/api/logs\"}}在上面的示例中，我们定义了一个表格视图组件，包含了7列，分别是日志编号、日志名称、检测日期、综合检测负责人、日志数据更新时间、日志状态和操作。数据源使用了一个API接口`/api/logs`来获取数据。您可以根据您的实际需求修改上述代码，将其集成到您的项目中。"}, {"instruction": "用 amis 实现这样的效果：用一个 service组件包裹一个表格视图组件，service 初始化请求返回 name、score、suggestion 三个字段，表格视图第一行为静态文本“姓名”“成绩”“建议”，第二行为  name、score、suggestion 三个字段的值", "input": "", "output": "可以使用 amis 的 `Service` 组件和 `Table` 组件来实现这个效果。首先，你需要在 `Service` 组件中初始化请求，并将返回的数据传递给 `Table` 组件进行展示。以下是一个示例代码：jsximport React from 'react';import { render } from 'amis';import { Service, Table } from 'amis';const api = {// 初始化请求init: {url: '/api/init',method: 'get',adaptor: (payload) => {return {status: 0,msg: '',data: {name: 'John',score: 90,suggestion: 'Good job!'}};}}};const App = () => {return (<Service service={api.init}>{({ data }) => (<Tablesource={data}columns={[{ label: '姓名', name: 'name' },{ label: '成绩', name: 'score' },{ label: '建议', name: 'suggestion' }]}/>)}</Service>);};render(<App />, document.getElementById('root'));在上面的代码中，我们定义了一个 `api` 对象，其中包含了一个 `init` 请求，用于初始化数据。在 `Service` 组件中，我们将 `api.init` 作为 `service` 属性传递进去。然后，在 `Table` 组件中，我们使用 `data` 属性来接收 `Service` 组件返回的数据，并将其作为表格的数据源。注意，上述代码中的 `/api/init` 是一个示例的请求地址，你需要根据实际情况进行修改。另外，你还需要根据实际情况进行样式和布局的调整。希望以上信息对你有所帮助！"}, {"instruction": "用 amis 实现这样的效果：用一个 service组件包裹一个表格视图组件，第一行为一个单元格，内容是静态文本 “成绩”，第二行为一个单元格，内容是  score 字段的值，当 score 的值小于60 时，将该单元格的背景设为红色", "input": "", "output": "可以使用 amis 的 `Service` 组件和 `Table` 组件来实现这个效果。首先，你需要定义一个 JSON 数据，包含 `score` 字段的值。然后，使用 `Service` 组件包裹 `Table` 组件，并在 `Table` 组件中使用 `Cell` 组件来渲染表格的每个单元格。以下是一个示例代码：{\"type\": \"service\",\"api\": \"/api/getData\",\"body\": {\"score\": 80},\"children\": [{\"type\": \"table\",\"columns\": [{\"label\": \"成绩\",\"type\": \"text\"},{\"label\": \"score\",\"type\": \"cell\",\"name\": \"score\",\"tpl\": \"{{score}}\",\"cellClassName\": \"{{score < 60 ? 'red' : ''}}\"}]}]}在上面的代码中，我们使用了 `Service` 组件来获取数据，`api` 属性指定了数据的接口地址，`body` 属性指定了请求的参数。然后，在 `Table` 组件中定义了两列，第一列是一个静态文本 \"成绩\"，第二列使用了 `Cell` 组件来渲染 `score` 字段的值，并使用了 `cellClassName` 属性来根据 `score` 的值动态设置单元格的背景色。你可以根据实际情况修改上面的代码，将 `api` 属性和 `body` 属性替换为你自己的接口地址和请求参数。另外，你还可以根据需要自定义表格的样式和其他属性。"}, {"instruction": "用 amis 实现一个卡片模式的列表，支持 “编辑” 和 “移除” 操作", "input": "", "output": "{\"cards\": [{\"id\": 1,\"title\": \"Card 1\",\"content\": \"This is the content of card 1\"},{\"id\": 2,\"title\": \"Card 2\",\"content\": \"This is the content of card 2\"},{\"id\": 3,\"title\": \"Card 3\",\"content\": \"This is the content of card 3\"}]}"}, {"instruction": "用 amis 实现一个列表组件，列表组件中包含一列 “engine” 字段，在该列中嵌入一个 PopOver 组件，点击展示改该字段全部内容", "input": "", "output": "以下是使用 amis 实现的列表组件的示例代码：{\"type\": \"list\",\"api\": \"/api/data\",\"columns\": [{\"name\": \"engine\",\"label\": \"Engine\",\"type\": \"tpl\",\"tpl\": \"<popover content=\\\"${engine}\\\">${engine}</popover>\"}]}在上述代码中，我们使用了 amis 的 List 组件来展示数据列表。通过设置 `api` 属性来指定数据接口的地址。在 `columns` 数组中，我们定义了一个列对象，其中 `name` 属性指定了数据字段名为 \"engine\"，`label` 属性指定了列的标题为 \"Engine\"。在 `type` 为 \"tpl\" 的列中，我们使用了 amis 的 Tpl 组件来自定义列的内容。通过设置 `tpl` 属性来指定列的模板，其中 `${engine}` 表示引用数据中的 \"engine\" 字段的值。在模板中，我们嵌入了一个 Popover 组件，通过设置 `content` 属性来指定 Popover 的内容为 \"engine\" 字段的值，`${engine}` 表示引用数据中的 \"engine\" 字段的值。最后，我们将列表组件的配置以 JSON 格式返回。你可以根据实际需求修改配置中的数据接口地址和列的定义。"}, {"instruction": "用 amis 实现一个 HBox 布局，包含五列，每列中有两个文本，“标题” 和 “数据”，其中 “数据” 使用大号字体，给出相应的配置代码", "input": "", "output": "{\"type\": \"HBox\",\"children\": [{\"type\": \"VBox\",\"children\": [{\"type\": \"Text\",\"text\": \"标题\"},{\"type\": \"Text\",\"text\": \"数据\",\"fontSize\": \"large\"}]},{\"type\": \"VBox\",\"children\": [{\"type\": \"Text\",\"text\": \"标题\"},{\"type\": \"Text\",\"text\": \"数据\",\"fontSize\": \"large\"}]},{\"type\": \"VBox\",\"children\": [{\"type\": \"Text\",\"text\": \"标题\"},{\"type\": \"Text\",\"text\": \"数据\",\"fontSize\": \"large\"}]},{\"type\": \"VBox\",\"children\": [{\"type\": \"Text\",\"text\": \"标题\"},{\"type\": \"Text\",\"text\": \"数据\",\"fontSize\": \"large\"}]},{\"type\": \"VBox\",\"children\": [{\"type\": \"Text\",\"text\": \"标题\"},{\"type\": \"Text\",\"text\": \"数据\",\"fontSize\": \"large\"}]}]}"}, {"instruction": "页面中有一个 amis CRUD 组件，包含 ID、engine、browser、version 四个字段，通过一个接口获取数据，给出该接口的示例返回数据", "input": "", "output": "{\"data\": [{\"id\": 1,\"engine\": \"Chrome\",\"browser\": \"Google Chrome\",\"version\": \"91.0.4472.124\"},{\"id\": 2,\"engine\": \"Firefox\",\"browser\": \"Mozilla Firefox\",\"version\": \"89.0\"},{\"id\": 3,\"engine\": \"Safari\",\"browser\": \"Apple Safari\",\"version\": \"14.1.1\"}]}"}, {"instruction": "用 amis 实现一个列表，包含 “城市” 和 “销售金额”两列数据，并为该列表添加一个用于计算销售金额总数的总结行", "input": "", "output": "{\"data\": [{\"城市\": \"北京\",\"销售金额\": 1000},{\"城市\": \"上海\",\"销售金额\": 2000},{\"城市\": \"广州\",\"销售金额\": 1500}],\"summary\": {\"城市\": \"总计\",\"销售金额\": 4500}}"}, {"instruction": "用 amis 实现一个列表，包含序号、检测车辆车号、日期、车次、担当司机、线名、行别、英文缩写字段，其中检测车辆车号、日期两个字段根据相同值合并单元格", "input": "", "output": "{\"list\": [{\"序号\": 1,\"检测车辆车号\": \"A001\",\"日期\": \"2021-01-01\",\"车次\": \"G123\",\"担当司机\": \"张三\",\"线名\": \"线路A\",\"行别\": \"上行\",\"英文缩写字段\": \"ABC\"},{\"序号\": 2,\"检测车辆车号\": \"A002\",\"日期\": \"2021-01-02\",\"车次\": \"G456\",\"担当司机\": \"李四\",\"线名\": \"线路B\",\"行别\": \"下行\",\"英文缩写字段\": \"DEF\"},{\"序号\": 3,\"检测车辆车号\": \"A001\",\"日期\": \"2021-01-01\",\"车次\": \"G789\",\"担当司机\": \"王五\",\"线名\": \"线路A\",\"行别\": \"上行\",\"英文缩写字段\": \"GHI\"}]}"}, {"instruction": "用 amis 实现一个滑块组件，当该组件的值变化时向页面上的图表组件传递值并触发图表刷新", "input": "", "output": "以下是使用 amis 实现一个滑块组件的示例代码：{\"type\": \"page\",\"title\": \"滑块组件示例\",\"body\": [{\"type\": \"form\",\"title\": \"滑块设置\",\"controls\": [{\"type\": \"slider\",\"name\": \"sliderValue\",\"label\": \"滑块值\",\"min\": 0,\"max\": 100,\"step\": 1,\"onChange\": {\"type\": \"send\",\"target\": \"chart\",\"params\": {\"value\": \"${sliderValue}\"}}}]},{\"type\": \"chart\",\"name\": \"chart\",\"title\": \"图表组件\"}]}在上述代码中，我们使用了 amis 的 `slider` 组件来创建一个滑块。滑块的值变化时，通过 `onChange` 属性触发了一个 `send` 动作，将滑块的值传递给了名为 `chart` 的图表组件。请注意，上述代码仅为示例，实际使用时需要根据具体需求进行适当的修改。"}, {"instruction": "用 amis 实现一个下拉框，通过一个接口返回包含 “ID”“系统名”“系统版本” 字段的数据，以ID作为值字段，“系统名”和“系统版本”以表格形式展示在下拉框中", "input": "", "output": "{\"data\": [{\"ID\": 1,\"系统名\": \"系统A\",\"系统版本\": \"1.0\"},{\"ID\": 2,\"系统名\": \"系统B\",\"系统版本\": \"2.0\"},{\"ID\": 3,\"系统名\": \"系统C\",\"系统版本\": \"3.0\"}]}"}, {"instruction": "用 amis 实现一个下拉框，支持级联选择系统 - 系统大版本 - 系统小版本，支持多选和搜索", "input": "", "output": "以下是使用 amis 实现一个级联选择下拉框，支持多选和搜索的示例代码：{\"type\": \"form\",\"controls\": [{\"type\": \"select\",\"name\": \"system\",\"label\": \"系统\",\"multiple\": true,\"searchable\": true,\"cascade\": {\"source\": \"/api/systems\",\"target\": \"/api/versions?systemId={system}\"},\"options\": []}]}在上面的示例中，我们使用了 amis 的 `select` 组件来实现下拉框。其中的 `cascade` 属性用于实现级联选择，`source` 属性指定了获取系统大版本的接口地址，`target` 属性指定了获取系统小版本的接口地址，并且通过 `{system}` 占位符来表示当前选择的系统。你需要根据实际情况替换 `source` 和 `target` 属性的接口地址，确保接口返回的数据格式符合 amis 的要求。另外，你可以根据需要调整其他属性，比如 `multiple` 属性用于支持多选，`searchable` 属性用于支持搜索。请注意，上述代码只是一个示例，你需要根据实际情况进行适当的修改和调整。"}, {"instruction": "实现一个下拉框，包括选项 A，B，C，其中选项 B 在选中时异步加载子选项，用 amis 实现该场景并给出异步加载接口的示例返回数据", "input": "", "output": "以下是使用 amis 实现下拉框的示例代码：{\"type\": \"form\",\"controls\": [{\"type\": \"select\",\"name\": \"option\",\"label\": \"选项\",\"options\": [{\"label\": \"A\",\"value\": \"A\"},{\"label\": \"B\",\"value\": \"B\",\"loadOptions\": {\"url\": \"/api/loadOptions\",\"method\": \"GET\",\"params\": {\"parent\": \"B\"}}},{\"label\": \"C\",\"value\": \"C\"}]}]}在上述代码中，我们使用了 amis 的 `select` 控件来实现下拉框。其中，选项 B 的 `loadOptions` 属性指定了异步加载子选项的接口信息。在这个示例中，我们假设异步加载接口的 URL 为 `/api/loadOptions`，请求方法为 `GET`，并且需要传递一个参数 `parent`，值为 `B`。下面是异步加载接口的示例返回数据：{\"status\": \"success\",\"data\": [{\"label\": \"B1\",\"value\": \"B1\"},{\"label\": \"B2\",\"value\": \"B2\"},{\"label\": \"B3\",\"value\": \"B3\"}]}在上述示例中，我们返回了一个包含三个子选项的数组，每个子选项都有 `label` 和 `value` 属性。你可以根据实际需求返回相应的数据结构。"}, {"instruction": "用 amis 实现一个下拉框，下拉框宽度为 80% 靠右对齐", "input": "", "output": "{\"type\": \"Select\",\"props\": {\"width\": \"80%\",\"align\": \"right\"}}"}, {"instruction": "用 amis 实现一个 “新增类别” 表单，包含 “名称” 和 “标识” 两个字段，表单提交成功后触发页面上 “类别” 下拉框重新加载选项", "input": "", "output": "以下是使用 amis 实现一个 \"新增类别\" 表单的示例代码：{\"type\": \"form\",\"title\": \"新增类别\",\"api\": \"/api/addCategory\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"名称\",\"required\": true},{\"type\": \"text\",\"name\": \"identifier\",\"label\": \"标识\",\"required\": true}],\"submitText\": \"提交\",\"onSuccess\": {\"type\": \"reload\",\"target\": \"categorySelect\"}}在上面的代码中，我们使用了 amis 的 `form` 组件来创建一个表单。表单的 `api` 属性指定了提交表单数据的接口地址，这里假设接口地址为 `/api/addCategory`。表单中有两个字段，分别是 \"名称\" 和 \"标识\"。我们使用了 `text` 组件来创建文本输入框，并通过 `name` 属性指定字段名，`label` 属性指定字段的标签名。表单的 `submitText` 属性指定了提交按钮的文本。当表单提交成功后，我们使用了 `onSuccess` 属性来触发页面上 \"类别\" 下拉框重新加载选项。这里使用了 `reload` 组件，并通过 `target` 属性指定了需要重新加载的下拉框的 `name` 值，假设下拉框的 `name` 值为 `categorySelect`。请根据你的实际需求修改接口地址和下拉框的 `name` 值。"}, {"instruction": "用 amis 实现一个页面，包含一个城市选择器组件和一个service组件，service 组件内部有一个文本组件和一个列表组件，当选择的值发生变更时将当前选中的城市名称同步到文本组件，并触发 service 组件请求列表组件的数据", "input": "", "output": "以下是使用 amis 实现的页面代码示例：jsximport React from 'react';import { render } from 'amis';import { Select, Text, List } from 'amis/lib/components';class CitySelector extends React.Component {state = {selectedCity: ''};handleCityChange = (value) => {this.setState({selectedCity: value});};render() {return (<Selectoptions={[{ label: '北京', value: 'beijing' },{ label: '上海', value: 'shanghai' },{ label: '广州', value: 'guangzhou' },{ label: '深圳', value: 'shenzhen' }]}value={this.state.selectedCity}onChange={this.handleCityChange}/>);}}class ServiceComponent extends React.Component {state = {data: []};fetchData = (city) => {// 模拟请求数据setTimeout(() => {const data = [{ id: 1, name: '数据1' },{ id: 2, name: '数据2' },{ id: 3, name: '数据3' }];this.setState({data});}, 1000);};componentDidUpdate(prevProps) {if (prevProps.city !== this.props.city) {this.fetchData(this.props.city);}}render() {return (<div><Text>{this.props.city}</Text><Listitems={this.state.data}itemRender={(item) => <div key={item.id}>{item.name}</div>}/></div>);}}const App = () => {return (<div><CitySelector /><ServiceComponent /></div>);};render(<App />, document.getElementById('root'));在上述代码中，我们定义了一个 `CitySelector` 组件和一个 `ServiceComponent` 组件。`CitySelector` 组件使用 `Select` 组件实现城市选择器，当选择的值发生变更时，会触发 `handleCityChange` 方法更新 `selectedCity` 的值。`ServiceComponent` 组件内部包含一个 `Text` 组件和一个 `List` 组件。当 `selectedCity` 的值发生变更时，会触发 `componentDidUpdate` 方法，该方法会调用 `fetchData` 方法请求数据，并将请求到的数据更新到 `data` 的状态中。然后，`Text` 组件会显示当前选中的城市名称，`List` 组件会显示请求到的数据列表。最后，我们在 `App` 组件中将 `CitySelector` 组件和 `ServiceComponent` 组件渲染到页面中。请注意，上述代码中的 `amis`、`Select`、`Text` 和 `List` 是示例中使用的组件，你需要根据实际情况替换为你所使用的组件。另外，你还需要根据实际需求进行适当的修改和调整。"}, {"instruction": "用 amis 实现一个页面，包含一个service组件，service组件内部有一个日历日程组件，组件从 service 组件请求返回的 schedules 字段中获取日程信息并展示，实现该页面同时给出 schedule 字段的格式示例", "input": "", "output": "以下是使用 amis 实现的页面代码示例：jsximport React from 'react';import { render } from 'amis';import axios from 'axios';class ServiceComponent extends React.Component {state = {schedules: []};componentDidMount() {this.fetchSchedules();}fetchSchedules = () => {axios.get('/api/schedules').then(response => {this.setState({ schedules: response.data });}).catch(error => {console.error('Failed to fetch schedules:', error);});};render() {return (<div><h1>Service Component</h1><CalendarComponent schedules={this.state.schedules} /></div>);}}class CalendarComponent extends React.Component {render() {const { schedules } = this.props;return (<div><h2>Calendar Component</h2><ul>{schedules.map(schedule => (<li key={schedule.id}><div>Date: {schedule.date}</div><div>Event: {schedule.event}</div></li>))}</ul></div>);}}render(<ServiceComponent />, document.getElementById('root'));上述代码中，`ServiceComponent` 是一个父组件，它通过发送请求获取日程信息，并将日程信息传递给 `CalendarComponent` 子组件进行展示。`CalendarComponent` 接收 `schedules` 属性，遍历日程信息并展示每个日程的日期和事件。日程信息的格式示例如下：[{\"id\": 1,\"date\": \"2021-01-01\",\"event\": \"New Year's Day\"},{\"id\": 2,\"date\": \"2021-02-12\",\"event\": \"Chinese New Year\"},{\"id\": 3,\"date\": \"2021-12-25\",\"event\": \"Christmas Day\"}]以上示例中，每个日程对象包含 `id`、`date` 和 `event` 字段，分别表示日程的唯一标识、日期和事件名称。你可以根据实际需求调整日程信息的字段和格式。"}, {"instruction": "用 amis 实现一个日历日程组件，以放大模式显示", "input": "", "output": "{\"date\": \"2022-01-01\",\"events\": [{\"title\": \"Meeting\",\"start\": \"10:00\",\"end\": \"11:00\"},{\"title\": \"Lunch\",\"start\": \"12:00\",\"end\": \"13:00\"},{\"title\": \"Workshop\",\"start\": \"14:00\",\"end\": \"16:00\"}]}"}, {"instruction": "用 amis 实现一个日历日程组件，当点击时联动页面上的一个列表组件加载日程详情数据", "input": "", "output": "{\"calendar\": [{\"date\": \"2021-01-01\",\"events\": [{\"id\": 1,\"title\": \"Event 1\",\"description\": \"Event 1 description\"},{\"id\": 2,\"title\": \"Event 2\",\"description\": \"Event 2 description\"}]},{\"date\": \"2021-01-02\",\"events\": [{\"id\": 3,\"title\": \"Event 3\",\"description\": \"Event 3 description\"}]}]}"}, {"instruction": "生成一个 amis 卡片，支持编辑和删除操作，点击卡片打开 http://www.baidu.com", "input": "", "output": "{\"type\": \"card\",\"body\": {\"title\": \"AMIS Card\",\"content\": \"This is an AMIS card with edit and delete actions.\",\"actions\": [{\"type\": \"button\",\"label\": \"Edit\",\"actionType\": \"link\",\"link\": \"http://www.baidu.com\"},{\"type\": \"button\",\"label\": \"Delete\",\"actionType\": \"link\",\"link\": \"http://www.baidu.com\"}]}}"}, {"instruction": "生成一个 amis 卡片组，支持勾选", "input": "", "output": "{\"type\": \"card\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"checkbox\",\"name\": \"option1\",\"label\": \"选项1\"},{\"type\": \"checkbox\",\"name\": \"option2\",\"label\": \"选项2\"},{\"type\": \"checkbox\",\"name\": \"option3\",\"label\": \"选项3\"}]}}"}, {"instruction": "有一组指标数据，每项数据包含标题和数值两个字段，用 amis 卡片展示这组指标数据，并为每个卡片配置文本头像", "input": "", "output": "{\"type\": \"page\",\"body\": {\"type\": \"container\",\"children\": [{\"type\": \"card\",\"header\": {\"type\": \"text\",\"content\": \"指标1\",\"avatar\": {\"type\": \"text\",\"content\": \"1\"}},\"body\": {\"type\": \"text\",\"content\": \"数值1\"}},{\"type\": \"card\",\"header\": {\"type\": \"text\",\"content\": \"指标2\",\"avatar\": {\"type\": \"text\",\"content\": \"2\"}},\"body\": {\"type\": \"text\",\"content\": \"数值2\"}},{\"type\": \"card\",\"header\": {\"type\": \"text\",\"content\": \"指标3\",\"avatar\": {\"type\": \"text\",\"content\": \"3\"}},\"body\": {\"type\": \"text\",\"content\": \"数值3\"}}]}}"}, {"instruction": "生成一个 amis 轮播图组件，包含三个轮播项，第一个轮播项为一张图片及图片的标题和描述，第二个轮播项为 html 片段 “<div style=\\\"width: 100%; height: 300px; background: #e3e3e3; text-align: center; line-height: 300px;\\\">carousel data</div>”， 第三个轮播项为一张图片，缩放模式为 contain", "input": "", "output": "{\"type\": \"carousel\",\"props\": {\"items\": [{\"title\": \"Image 1\",\"description\": \"Description 1\",\"image\": \"https://example.com/image1.jpg\"},{\"html\": \"<div style=\\\"width: 100%; height: 300px; background: #e3e3e3; text-align: center; line-height: 300px;\\\">carousel data</div>\"},{\"image\": {\"src\": \"https://example.com/image2.jpg\",\"mode\": \"contain\"}}]}}"}, {"instruction": "生成一个 amis 轮播图组件，包含三个轮播项，均为图片，显示左右箭头和底部圆点索引，每 5 秒切换一次，自动轮播", "input": "", "output": "{\"type\": \"carousel\",\"props\": {\"autoplay\": true,\"interval\": 5000,\"arrows\": true,\"dots\": true,\"items\": [{\"type\": \"image\",\"props\": {\"src\": \"image1.jpg\"}},{\"type\": \"image\",\"props\": {\"src\": \"image2.jpg\"}},{\"type\": \"image\",\"props\": {\"src\": \"image3.jpg\"}}]}}"}, {"instruction": "生成一个 amis 轮播图组件，包含七张图片的轮播图，每屏轮播展示三张图片，", "input": "", "output": "{\"type\": \"carousel\",\"props\": {\"slidesToShow\": 3,\"slidesToScroll\": 3,\"autoplay\": true,\"autoplaySpeed\": 3000},\"children\": [{\"type\": \"img\",\"props\": {\"src\": \"image1.jpg\"}},{\"type\": \"img\",\"props\": {\"src\": \"image2.jpg\"}},{\"type\": \"img\",\"props\": {\"src\": \"image3.jpg\"}},{\"type\": \"img\",\"props\": {\"src\": \"image4.jpg\"}},{\"type\": \"img\",\"props\": {\"src\": \"image5.jpg\"}},{\"type\": \"img\",\"props\": {\"src\": \"image6.jpg\"}},{\"type\": \"img\",\"props\": {\"src\": \"image7.jpg\"}}]}"}, {"instruction": "生成一个 amis 左右布局，显示比例为 9:3，左栏包含一个七张图片的轮播图，每屏轮播展示三张图片，右栏包含三个卡片", "input": "", "output": "{\"type\": \"vertical\",\"body\": [{\"type\": \"horizontal\",\"body\": [{\"type\": \"carousel\",\"props\": {\"slidesToShow\": 3,\"slidesToScroll\": 3,\"dots\": true,\"autoplay\": true,\"autoplaySpeed\": 3000,\"arrows\": true,\"infinite\": true,\"slides\": [{\"type\": \"image\",\"props\": {\"src\": \"image1.jpg\"}},{\"type\": \"image\",\"props\": {\"src\": \"image2.jpg\"}},{\"type\": \"image\",\"props\": {\"src\": \"image3.jpg\"}},{\"type\": \"image\",\"props\": {\"src\": \"image4.jpg\"}},{\"type\": \"image\",\"props\": {\"src\": \"image5.jpg\"}},{\"type\": \"image\",\"props\": {\"src\": \"image6.jpg\"}},{\"type\": \"image\",\"props\": {\"src\": \"image7.jpg\"}}]}}],\"span\": 9},{\"type\": \"vertical\",\"body\": [{\"type\": \"card\",\"props\": {\"title\": \"Card 1\",\"body\": \"This is card 1\"}},{\"type\": \"card\",\"props\": {\"title\": \"Card 2\",\"body\": \"This is card 2\"}},{\"type\": \"card\",\"props\": {\"title\": \"Card 3\",\"body\": \"This is card 3\"}}],\"span\": 3}]}"}, {"instruction": "生成一个 amis 轮播图组件，每 30 秒自动切换一次，切换时触发另一个service组件重新请求数据", "input": "", "output": "{\"type\": \"carousel\",\"props\": {\"autoplay\": 30000,\"onSlideChange\": \"serviceComponent.fetchData\"},\"children\": [{\"type\": \"image\",\"props\": {\"src\": \"https://example.com/image1.jpg\"}},{\"type\": \"image\",\"props\": {\"src\": \"https://example.com/image2.jpg\"}},{\"type\": \"image\",\"props\": {\"src\": \"https://example.com/image3.jpg\"}}]}"}, {"instruction": "生成一个 amis 图表组件，通过一个 api 远程拉取图表配置项", "input": "", "output": "{\"type\": \"chart\",\"api\": \"https://example.com/api/chart\",\"props\": {\"width\": 800,\"height\": 600}}"}, {"instruction": "现需要在页面上展示一段代码，代码语言为 go，选择合适的 amis 组件来实现这一需求", "input": "", "output": "您可以使用 amis 的 `CodeEditor` 组件来展示 Go 代码。以下是一个示例：{\"type\": \"code-editor\",\"language\": \"go\",\"value\": \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\tfmt.Println(\\\"Hello, World!\\\")\\n}\"}在这个示例中，我们使用了 `CodeEditor` 组件，并设置了 `language` 属性为 \"go\"，`value` 属性为要展示的 Go 代码。您可以将这段 JSON 格式的配置放入您的页面中，以展示 Go 代码。"}, {"instruction": "实现一个 amis service 组件，组件内部包含一个循环布局组件，service 组件返回若干个单选框组件的 label 和选项值，用循环布局组件循环展示这些单选框，并以读取上下文变量的方式绑定 label 和选项数据", "input": "", "output": "{\"type\": \"service\",\"name\": \"amis-service\",\"api\": \"/api/getOptions\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"loop\",\"source\": \"$data.options\",\"body\": {\"type\": \"radio\",\"name\": \"option\",\"label\": \"$option.label\",\"value\": \"$option.value\"}}]}}"}, {"instruction": "实现一个 amis 评分组件，支持 0- 10 打分，支持半星，当打分小于 2 时星星的颜色为红色，大于 2 但小于4 时星星的颜色为黄色，大于等于 4 时星星的颜色为绿色", "input": "", "output": "{\"type\": \"rating\",\"name\": \"rating\",\"value\": 0,\"half\": true,\"colors\": {\"red\": \"#FF0000\",\"yellow\": \"#FFFF00\",\"green\": \"#00FF00\"},\"onChange\": \"handleRatingChange\"}"}, {"instruction": "实现一个 amis 滑块组件，最小值为 0 ，最大值为 100， 支持选择范围", "input": "", "output": "{\"type\": \"slider\",\"name\": \"slider\",\"min\": 0,\"max\": 100,\"range\": true}"}, {"instruction": "实现一个 amis 滑块组件，标题为 “容量（GB）” 最小值为 0 ，最大值为 1000， 支持选择范围，右侧有一个文本组件，用于动态计算滑块选中数值对应的价格，其计算公式为 5 * 滑块选中值", "input": "", "output": "{\"type\": \"slider\",\"name\": \"capacity\",\"label\": \"容量（GB）\",\"min\": 0,\"max\": 1000,\"range\": true,\"rightAddon\": {\"type\": \"text\",\"name\": \"price\",\"value\": \"{{5 * capacity}}\"}}"}, {"instruction": "实现一个 amis 富文本编辑器，使用 tinymce", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"editor\",\"name\": \"content\",\"label\": \"内容\",\"required\": true,\"editor\": {\"type\": \"tinymce\",\"config\": {\"plugins\": \"advlist autolink lists link image charmap print preview anchor\",\"toolbar\": \"undo redo | bold italic | alignleft aligncenter alignright | bullist numlist outdent indent | link image\"}}},{\"type\": \"button\",\"label\": \"提交\",\"actionType\": \"submit\"}]}"}, {"instruction": "实现一个 amis 富文本编辑器，使用 froala", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"editor\",\"name\": \"content\",\"label\": \"内容\",\"value\": \"<p>这是一个富文本编辑器示例</p>\",\"editor\": {\"type\": \"froala\",\"config\": {\"toolbarButtons\": [\"bold\", \"italic\", \"underline\", \"strikeThrough\", \"subscript\", \"superscript\", \"fontFamily\", \"fontSize\", \"color\", \"backgroundColor\", \"align\", \"formatOL\", \"formatUL\", \"indent\", \"outdent\", \"insertLink\", \"insertImage\", \"insertVideo\", \"insertTable\", \"insertHR\", \"undo\", \"redo\", \"html\"],\"toolbarButtonsMD\": [\"bold\", \"italic\", \"underline\", \"strikeThrough\", \"subscript\", \"superscript\", \"fontFamily\", \"fontSize\", \"color\", \"backgroundColor\", \"align\", \"formatOL\", \"formatUL\", \"indent\", \"outdent\", \"insertLink\", \"insertImage\", \"insertVideo\", \"insertTable\", \"insertHR\", \"undo\", \"redo\", \"html\"],\"toolbarButtonsSM\": [\"bold\", \"italic\", \"underline\", \"strikeThrough\", \"subscript\", \"superscript\", \"fontFamily\", \"fontSize\", \"color\", \"backgroundColor\", \"align\", \"formatOL\", \"formatUL\", \"indent\", \"outdent\", \"insertLink\", \"insertImage\", \"insertVideo\", \"insertTable\", \"insertHR\", \"undo\", \"redo\", \"html\"],\"toolbarButtonsXS\": [\"bold\", \"italic\", \"underline\", \"strikeThrough\", \"subscript\", \"superscript\", \"fontFamily\", \"fontSize\", \"color\", \"backgroundColor\", \"align\", \"formatOL\", \"formatUL\", \"indent\", \"outdent\", \"insertLink\", \"insertImage\", \"insertVideo\", \"insertTable\", \"insertHR\", \"undo\", \"redo\", \"html\"],\"height\": 300}}}]}"}, {"instruction": "实现一个 amis 富文本编辑器，配置图片和视频上传 api，并给出相关 api 的后端代码实现示例", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"editor\",\"name\": \"content\",\"label\": \"内容\",\"upload\": {\"url\": \"/api/upload\",\"accept\": \"image/*,video/*\"}}]}"}, {"instruction": "实现一个这样一个 amis页面：包含一个左侧导航，当导航切换时右侧的一个 iframe 组件根据导航的值动态加载外站页面", "input": "", "output": "{\"type\": \"page\",\"title\": \"AMIS页面\",\"body\": {\"type\": \"container\",\"children\": [{\"type\": \"row\",\"children\": [{\"type\": \"col\",\"sm\": 3,\"children\": {\"type\": \"nav\",\"items\": [{\"label\": \"导航1\",\"value\": \"https://www.example.com/page1\"},{\"label\": \"导航2\",\"value\": \"https://www.example.com/page2\"},{\"label\": \"导航3\",\"value\": \"https://www.example.com/page3\"}],\"onChange\": {\"type\": \"iframe\",\"src\": \"${value}\"}}},{\"type\": \"col\",\"sm\": 9,\"children\": {\"type\": \"iframe\",\"src\": \"https://www.example.com/page1\"}}]}]}}"}, {"instruction": "实现一个 amis 图片集页面，通过一个接口获取图片的链接、标题、说明并展示在一个图片集中，点击图片集中的图片可以放大预览", "input": "", "output": "{\"status\": 200,\"data\": [{\"id\": 1,\"title\": \"图片1\",\"description\": \"这是图片1的说明\",\"url\": \"https://example.com/image1.jpg\"},{\"id\": 2,\"title\": \"图片2\",\"description\": \"这是图片2的说明\",\"url\": \"https://example.com/image2.jpg\"},{\"id\": 3,\"title\": \"图片3\",\"description\": \"这是图片3的说明\",\"url\": \"https://example.com/image3.jpg\"}]}以下是一个使用 AMIS 框架实现的图片集页面的示例代码：jsximport React, { useState, useEffect } from 'react';import { render, Alert, ImageGallery } from 'amis';const ImageGalleryPage = () => {const [images, setImages] = useState([]);useEffect(() => {fetch('https://example.com/api/images').then(response => response.json()).then(data => {if (data.status === 200) {setImages(data.data);} else {// 处理错误情况}}).catch(error => {// 处理错误情况});}, []);return (<div><h1>图片集</h1>{images.length === 0 ? (<Alert level=\"info\">正在加载图片...</Alert>) : (<ImageGalleryimages={images.map(image => ({src: image.url,alt: image.title,title: image.title,description: image.description}))}/>)}</div>);};render(<ImageGalleryPage />, document.getElementById('root'));在上面的代码中，我们首先使用 `useState` 和 `useEffect` 钩子来获取图片数据。在组件加载时，我们发送一个 GET 请求到指定的接口，获取图片数据。然后，我们根据接口返回的数据来渲染页面。如果数据正在加载中，我们显示一个提示信息；如果数据加载完成，我们使用 `ImageGallery` 组件来展示图片集。`ImageGallery` 组件接受一个 `images` 属性，其中包含了每张图片的链接、标题和说明。"}, {"instruction": "实现一个 amis 功格导航布局，设置列数为三列，通过一个 api 动态获取宫格的图标、文字和链接地址，实现并给出 api 的示例返回数据", "input": "", "output": "{\"data\": [{\"icon\": \"https://example.com/icon1.png\",\"text\": \"宫格1\",\"link\": \"https://example.com/link1\"},{\"icon\": \"https://example.com/icon2.png\",\"text\": \"宫格2\",\"link\": \"https://example.com/link2\"},{\"icon\": \"https://example.com/icon3.png\",\"text\": \"宫格3\",\"link\": \"https://example.com/link3\"},{\"icon\": \"https://example.com/icon4.png\",\"text\": \"宫格4\",\"link\": \"https://example.com/link4\"},{\"icon\": \"https://example.com/icon5.png\",\"text\": \"宫格5\",\"link\": \"https://example.com/link5\"},{\"icon\": \"https://example.com/icon6.png\",\"text\": \"宫格6\",\"link\": \"https://example.com/link6\"}]}"}, {"instruction": "现有一段 json 数据，期望支持查看和折叠，选择合适的 amis 组件来实现这一功能", "input": "", "output": "您可以使用 amis 的 `Json` 组件来实现查看和折叠 JSON 数据的功能。`Json` 组件可以将 JSON 数据以树状结构展示，并支持展开和折叠子节点。以下是一个使用 `Json` 组件展示 JSON 数据的示例代码：{\"type\": \"json\",\"name\": \"jsonViewer\",\"source\": {\"data\": {\"json\": {\"yourJsonData\": {\"key1\": \"value1\",\"key2\": \"value2\",\"key3\": {\"subKey1\": \"subValue1\",\"subKey2\": \"subValue2\"}}}}}}您可以将您的 JSON 数据替换到 `yourJsonData` 字段中，然后将以上代码添加到您的 amis 页面中，即可实现查看和折叠 JSON 数据的功能。请注意，您需要将 amis 的相关依赖库引入到您的项目中，以确保 `Json` 组件能够正常工作。"}, {"instruction": "有一个日志列表组件，第一页为ID，第二列为 json 格式的日志，为该列表生成合适的 amis 配置", "input": "", "output": "{\"type\": \"list\",\"name\": \"logList\",\"source\": \"/api/logs\",\"primaryKey\": \"id\",\"headerToolbar\": [{\"type\": \"button\",\"label\": \"新增\",\"actionType\": \"dialog\",\"dialog\": {\"title\": \"新增日志\",\"body\": {\"type\": \"form\",\"name\": \"addLogForm\",\"api\": \"/api/logs\",\"controls\": [{\"type\": \"textarea\",\"name\": \"log\",\"label\": \"日志内容\",\"required\": true}]}}}],\"body\": {\"type\": \"form\",\"name\": \"logForm\",\"controls\": [{\"type\": \"static\",\"name\": \"id\",\"label\": \"ID\"},{\"type\": \"static\",\"name\": \"log\",\"label\": \"日志内容\",\"tpl\": \"{{ json2str(log) }}\"}]}}"}, {"instruction": "需要实时刷新展示一些编译日志，推荐一个适用于该需求的 amis 组件", "input": "", "output": "{\"type\": \"log\",\"props\": {\"logs\": [\"Compiling file 1...\",\"Compiling file 2...\",\"Compiling file 3...\",\"Compiling file 4...\",\"Compiling file 5...\"]}}"}, {"instruction": "现有一段 markdown 格式的数据，推荐一个适用于展示这类数据的 amis 组件", "input": "", "output": "您可以使用 amis 的 `Table` 组件来展示 markdown 格式的数据。以下是一个示例：{\"type\": \"table\",\"columns\": [{\"name\": \"数据\",\"field\": \"data\",\"type\": \"html\",\"html\": \"{{data}}\"}],\"source\": {\"type\": \"json\",\"data\": [{\"data\": \"这是一段 **markdown** 格式的数据\"}]}}您可以将您的 markdown 数据放在 `data` 字段中，然后将以上配置作为 amis 组件的配置。这样就可以在页面上展示您的 markdown 数据了。"}, {"instruction": "实现一个 amis office viewer 组件，加载时显示 loading 效果，配置文档地址为 /examples/static/simple.docx", "input": "", "output": "{\"type\": \"office-viewer\",\"props\": {\"src\": \"/examples/static/simple.docx\",\"loading\": true}}"}, {"instruction": "实现一个 amis 表单，包含一个文件上传组件和一个 office viewer 组件，文件上传组件限制只能上传不超过 10M 的 word 文档，上传成功后可在 office viewer 中预览上传的组件", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"upload\",\"name\": \"file\",\"label\": \"上传文件\",\"accept\": \".doc,.docx\",\"maxSize\": 10485760},{\"type\": \"officeViewer\",\"name\": \"viewer\",\"label\": \"文件预览\",\"src\": \"${file.url}\"}]}"}, {"instruction": "实现一个 amis office viewer 组件，支持用上下文变量替换 word 文档中的内容", "input": "", "output": "{\"type\": \"office-viewer\",\"props\": {\"src\": \"https://example.com/document.docx\",\"context\": {\"variable1\": \"value1\",\"variable2\": \"value2\"}}}"}, {"instruction": "实现一个 amis office viewer 组件和一个 “下载” 按钮，点击按钮下载文档", "input": "", "output": "{\"type\": \"page\",\"body\": {\"type\": \"container\",\"children\": [{\"type\": \"office-viewer\",\"src\": \"https://example.com/document.docx\"},{\"type\": \"button\",\"label\": \"下载\",\"onClick\": \"downloadDocument\"}]}}"}, {"instruction": "实现一个 amis office viewer 组件和一个 “打印” 按钮，点击按钮打印文档", "input": "", "output": "{\"type\": \"page\",\"title\": \"AMIS Office Viewer\",\"body\": {\"type\": \"container\",\"children\": [{\"type\": \"office-viewer\",\"src\": \"https://example.com/document.docx\"},{\"type\": \"button\",\"label\": \"打印\",\"onClick\": \"printDocument\"}]},\"functions\": {\"printDocument\": {\"type\": \"action\",\"body\": \"window.print()\"}}}"}, {"instruction": "实现一个 amis 进度条组件，在 ‘30%’ 和 ‘90%’ 的位置有刻度标记", "input": "", "output": "{\"type\": \"progress\",\"value\": 60,\"showInfo\": true,\"marks\": {\"30\": \"30%\",\"90\": \"90%\"}}"}, {"instruction": "实现一个 amis 进度条组件，当进度小于 30 时进度条颜色为 #007bff，进度小于 60 时进度条颜色为 #F96D3E", "input": "", "output": "{\"type\": \"progress\",\"props\": {\"percent\": 50,\"colors\": [{ \"color\": \"#007bff\", \"threshold\": 30 },{ \"color\": \"#F96D3E\", \"threshold\": 60 }]}}"}, {"instruction": "用 amis 实现一个 “任务进度改善” 列表，包含三列：任务名称、以进度条形式展示的任务进度，按钮列，包含一个 “任务进度改进计划” 按钮，当进度小于 30 时显示该按钮，可点击输入任务改进计划", "input": "", "output": "{\"tasks\": [{\"taskName\": \"任务1\",\"progress\": 20,\"improvementPlan\": \"\"},{\"taskName\": \"任务2\",\"progress\": 50,\"improvementPlan\": \"\"},{\"taskName\": \"任务3\",\"progress\": 10,\"improvementPlan\": \"\"}]}"}, {"instruction": "用 amis 实现一个步骤条组件，包含三个步骤，当前位于第二个步骤", "input": "", "output": "{\"steps\": [{\"title\": \"Step 1\",\"status\": \"finished\"},{\"title\": \"Step 2\",\"status\": \"process\"},{\"title\": \"Step 3\",\"status\": \"wait\"}]}"}, {"instruction": "用 amis 实现一个表单，包含一个步骤条组件和一个 tab 布局，步骤条有三个步骤，tab 组件有三个 tab，当第一个tab激活时，步骤条落在第一步，依次类推", "input": "", "output": "{\"type\": \"Form\",\"children\": [{\"type\": \"Stepper\",\"activeStep\": 0,\"steps\": [{\"label\": \"Step 1\"},{\"label\": \"Step 2\"},{\"label\": \"Step 3\"}]},{\"type\": \"Tabs\",\"activeTab\": 0,\"tabs\": [{\"label\": \"Tab 1\",\"content\": \"Content for Tab 1\"},{\"label\": \"Tab 2\",\"content\": \"Content for Tab 2\"},{\"label\": \"Tab 3\",\"content\": \"Content for Tab 3\"}]}]}"}, {"instruction": "用 amis 实现一个属性表，用表格方式静态展示以下信息：CPU：1 core，memory：4G，disk： 8G，这三者占一行，network：4M，IDC：beijing 这两者占一行，其中 network 占两列", "input": "", "output": "{\"CPU\": \"1 core\",\"memory\": \"4G\",\"disk\": \"8G\",\"network\": {\"column1\": \"4M\",\"column2\": \"beijing\"}}"}, {"instruction": "用 amis 实现一个只读的报名信息确认表，其中有一个 “报名序号” 字段，以二维码形式展示", "input": "", "output": "{\"type\": \"object\",\"properties\": {\"registrationNumber\": {\"type\": \"string\",\"description\": \"报名序号\"},\"qrCode\": {\"type\": \"string\",\"description\": \"报名序号的二维码\"}},\"required\": [\"registrationNumber\", \"qrCode\"]}"}, {"instruction": "用 amis 实现一个只读的报名信息确认表，其中有一个 “报名序号” 字段，以条形码形式展示", "input": "", "output": "{\"type\": \"object\",\"properties\": {\"registrationNumber\": {\"type\": \"string\",\"format\": \"barcode\"}},\"required\": [\"registrationNumber\"],\"readOnly\": true}"}, {"instruction": "用 amis 实现一个文本框，文本框后方有一个标记组件，鼠标悬浮时显示文本 “请填写合法的身份证号”", "input": "", "output": "{\"Type\": \"AMAZON.TextField\",\"Prompt\": \"请填写身份证号\",\"MaxAttempts\": 3,\"Annotations\": [{\"Type\": \"AMAZON.Annotation\",\"Marker\": {\"Type\": \"AMAZON.Marker\",\"Content\": \"请填写合法的身份证号\"},\"HoverText\": \"请填写合法的身份证号\"}]}"}, {"instruction": "用 amis 实现一个列表，列表包含服务器ID、服务器名称、服务器状态三个字段，用 status 组件展示服务器状态字段，并定义 “pending” 状态为{\"label\": \"等待\",\"icon\": \"fa fa-times-circle\",\"color\": \"#000\"}", "input": "", "output": "{\"servers\": [{\"id\": \"1\",\"name\": \"Server 1\",\"status\": \"pending\"},{\"id\": \"2\",\"name\": \"Server 2\",\"status\": \"running\"},{\"id\": \"3\",\"name\": \"Server 3\",\"status\": \"stopped\"}]}"}, {"instruction": "用 amis 实现一个列表，列表包含服务器ID、服务器名称、服务器状态三个字段，用标签组件展示服务器状态字段", "input": "", "output": "{\"servers\": [{\"id\": \"1\",\"name\": \"Server 1\",\"status\": \"running\"},{\"id\": \"2\",\"name\": \"Server 2\",\"status\": \"stopped\"},{\"id\": \"3\",\"name\": \"Server 3\",\"status\": \"running\"}]}"}, {"instruction": "用 amis 实现一个时间轴组件，包含时间节点：1.  2019-02-07，标题“项目立项”  2.  2019-09-10，标题“1.0 版本发布”  3.  2020-09-10，标题“2.0 版本发布”", "input": "", "output": "{\"timeline\": [{\"date\": \"2019-02-07\",\"title\": \"项目立项\"},{\"date\": \"2019-09-10\",\"title\": \"1.0 版本发布\"},{\"date\": \"2020-09-10\",\"title\": \"2.0 版本发布\"}]}"}, {"instruction": "用 amis 实现一个时间轴组件，包含三个时间节点，横向排布", "input": "", "output": "{\"timeline\": [{\"time\": \"2020-01-01\",\"event\": \"Event 1\"},{\"time\": \"2020-02-01\",\"event\": \"Event 2\"},{\"time\": \"2020-03-01\",\"event\": \"Event 3\"}]}"}, {"instruction": "实现一个 amis 页面，包含一个 service 组件，service 组件内部包含三个列表组件，并排排布，三个组件分别从上下文字段${list1}，${list2}，${list3} 字段获取数据", "input": "", "output": "{\"type\": \"page\",\"body\": {\"type\": \"service\",\"api\": \"/api/getData\",\"body\": {\"type\": \"container\",\"children\": [{\"type\": \"list\",\"name\": \"list1\",\"source\": \"${list1}\",\"body\": {\"type\": \"text\",\"text\": \"${item}\"}},{\"type\": \"list\",\"name\": \"list2\",\"source\": \"${list2}\",\"body\": {\"type\": \"text\",\"text\": \"${item}\"}},{\"type\": \"list\",\"name\": \"list3\",\"source\": \"${list3}\",\"body\": {\"type\": \"text\",\"text\": \"${item}\"}}]}}}"}, {"instruction": "实现一个 amis 下拉框组件，从上下文数据字段 ${options} 中获取选项数据", "input": "", "output": "{\"type\": \"select\",\"name\": \"dropdown\",\"label\": \"下拉框\",\"options\": \"${options}\"}"}, {"instruction": "实现一个 amis list 组件，从上下文字段 ${list}中获取数据", "input": "", "output": "以下是一个示例的 amis list 组件的实现代码：jsximport React from 'react';import { List } from 'amis';const AmisList = ({ list }) => {return (<ListclassName=\"amis-list\"source={list}itemRender={(item, index) => (<List.Item key={index}><div>{item.title}</div><div>{item.description}</div></List.Item>)}/>);};export default AmisList;在上面的代码中，我们使用了 `List` 组件来展示列表数据。通过 `source` 属性传入数据源，这里我们使用了上下文字段 `${list}` 来获取数据。然后通过 `itemRender` 属性来定义每个列表项的渲染方式，这里我们简单地展示了 `title` 和 `description` 字段。使用该组件时，可以将数据传入 `list` 属性中，例如：jsxconst data = [{ title: 'Item 1', description: 'Description 1' },{ title: 'Item 2', description: 'Description 2' },{ title: 'Item 3', description: 'Description 3' },];<AmisList list={data} />以上代码将会渲染一个包含三个列表项的列表组件。"}, {"instruction": "实现一个 amis 复选框组件，从上下文数据字段 ${options} 中获取选项数据", "input": "", "output": "{\"type\": \"checkbox\",\"name\": \"checkbox\",\"label\": \"复选框\",\"options\": \"${options}\"}"}, {"instruction": "实现一个 amis 单选框组件，从上下文数据字段 ${options} 中获取选项数据", "input": "", "output": "{\"type\": \"radios\",\"name\": \"radioGroup\",\"label\": \"单选框组件\",\"options\": \"${options}\"}"}, {"instruction": "实现一个 amis tpl 组件，从上下文字段 ${welcome} 中获取展示内容", "input": "", "output": "{\"type\": \"tpl\",\"tpl\": \"${welcome}\"}"}, {"instruction": "实现一个 amis 链式下拉框组件，从上下文数据 ${chainSelect} 中获取选项内容", "input": "", "output": "{\"type\": \"chain-select\",\"name\": \"chainSelect\",\"label\": \"链式下拉框\",\"source\": \"${chainSelect}\",\"valueField\": \"value\",\"labelField\": \"label\",\"options\": []}"}, {"instruction": "实现一个 amis 导航组件，从上下文数据 ${nav} 中获取导航菜单项", "input": "", "output": "以下是一个示例的 amis导航组件的实现代码：javascriptimport React from 'react';import { RendererProps } from '@amis/render';import { Nav } from 'amis';interface NavProps extends RendererProps {nav: any[];}const AmisNav: React.FC<NavProps> = ({ nav }) => {return <Nav items={nav} />;};export default AmisNav;在上面的代码中，我们使用了 `Nav` 组件来渲染导航菜单项。`Nav` 组件接受一个 `items` 属性，该属性是一个数组，用于定义导航菜单项的配置。在使用这个组件时，你可以将 `nav` 数据传递给 `AmisNav` 组件的 `nav` 属性，如下所示：{\"type\": \"amis-nav\",\"nav\": [{\"label\": \"Home\",\"to\": \"/\"},{\"label\": \"About\",\"to\": \"/about\"},{\"label\": \"Contact\",\"to\": \"/contact\"}]}这样就可以根据 `nav` 数据渲染出导航菜单项了。请注意，上面的示例只是一个简单的实现，你可以根据自己的需求进行扩展和定制。"}, {"instruction": "实现一个 amis 表单，包含 “姓名”“邮箱” 两个字段，字段名分别为 name 和 email，提交接口使用 post 方法，url 为 /amis/api/mock2/form/saveForm，提交时将 name 和 email 分别映射到提交数据的 myName 和 myEmail 字段", "input": "", "output": "以下是一个使用 AMIS 表单实现的示例代码：jsximport React from 'react';import { render } from 'react-dom';import { SchemaForm, SchemaMarkupField as Field, FormButtonGroup, Submit } from '@formily/antd';import { createForm } from '@formily/core';import { message } from 'antd';const form = createForm();const App = () => {const handleSubmit = (values) => {const { name, email } = values;const formData = {myName: name,myEmail: email,};fetch('/amis/api/mock2/form/saveForm', {method: 'POST',body: JSON.stringify(formData),}).then((response) => response.json()).then((data) => {message.success('提交成功');console.log(data);}).catch((error) => {message.error('提交失败');console.error(error);});};return (<SchemaForm form={form} onSubmit={handleSubmit}><Field type=\"string\" name=\"name\" title=\"姓名\" x-component=\"Input\" required /><Field type=\"string\" name=\"email\" title=\"邮箱\" x-component=\"Input\" required /><FormButtonGroup><Submit>提交</Submit></FormButtonGroup></SchemaForm>);};render(<App />, document.getElementById('root'));在上述代码中，我们使用了 `@formily/antd` 库来渲染 AMIS 表单。首先，我们创建了一个 `createForm` 实例，并将其传递给 `SchemaForm` 组件的 `form` 属性。然后，我们定义了两个字段 `name` 和 `email`，并分别指定了它们的标题和组件类型。最后，我们在 `FormButtonGroup` 组件中添加了一个提交按钮，并在提交时调用 `handleSubmit` 函数。在 `handleSubmit` 函数中，我们从表单的 `values` 中获取 `name` 和 `email` 的值，并将它们映射到 `myName` 和 `myEmail` 字段。然后，我们使用 `fetch` 函数发送 POST 请求到指定的接口，并将映射后的数据作为请求体。最后，我们处理请求的响应，并在控制台中打印返回的数据。请注意，上述代码中的接口地址 `/amis/api/mock2/form/saveForm` 只是一个示例，你需要根据实际情况修改为正确的接口地址。"}, {"instruction": "实现一个 amis CRUD 组件，通过接口 /amis/api/mock2/page/initData 发送 get 请求获取数据，设置接口缓存时间为 2000 毫秒", "input": "", "output": "以下是一个示例的 amis CRUD 组件的实现代码：jsximport React, { useState, useEffect } from 'react';import { Table, Button, Modal, Form, Input } from 'antd';import axios from 'axios';const CrudComponent = () => {const [data, setData] = useState([]);const [loading, setLoading] = useState(false);const [visible, setVisible] = useState(false);const [form] = Form.useForm();const fetchData = async () => {setLoading(true);try {const response = await axios.get('/amis/api/mock2/page/initData', {cache: {maxAge: 2000,},});setData(response.data);} catch (error) {console.error(error);} finally {setLoading(false);}};useEffect(() => {fetchData();}, []);const handleAdd = () => {setVisible(true);};const handleOk = () => {form.validateFields().then(values => {const newData = {id: data.length + 1,...values,};setData([...data, newData]);form.resetFields();setVisible(false);});};const handleCancel = () => {form.resetFields();setVisible(false);};const columns = [{title: 'ID',dataIndex: 'id',},{title: 'Name',dataIndex: 'name',},{title: 'Action',render: (_, record) => (<Button type=\"link\" danger onClick={() => handleDelete(record.id)}>Delete</Button>),},];const handleDelete = id => {const newData = data.filter(item => item.id !== id);setData(newData);};return (<div><Button type=\"primary\" onClick={handleAdd}>Add</Button><Table dataSource={data} columns={columns} loading={loading} rowKey=\"id\" /><Modal visible={visible} onOk={handleOk} onCancel={handleCancel}><Form form={form} layout=\"vertical\"><Form.Item name=\"name\" label=\"Name\" rules={[{ required: true, message: 'Please enter name' }]}><Input /></Form.Item></Form></Modal></div>);};export default CrudComponent;在上述代码中，我们使用了 `useState` 来管理组件的状态，`useEffect` 来在组件加载时发送请求获取数据。通过 `axios` 发送 GET 请求，并设置了接口缓存时间为 2000 毫秒。获取到数据后，将数据保存在 `data` 状态中。在渲染部分，我们使用了 `antd` 的 `Table` 组件来展示数据，并提供了一个按钮来添加新的数据。点击按钮后，会弹出一个模态框，通过 `Form` 组件来输入新数据的名称。点击模态框的确定按钮后，会将新数据添加到 `data` 状态中，并关闭模态框。每一行数据都有一个删除按钮，点击删除按钮会将对应的数据从 `data` 状态中移除。最后，将 `CrudComponent` 组件导出，即可在其他地方使用。"}, {"instruction": "有一个 amis 页面中的数据接口，该接口返回数据中有一个字段 “response”，配置 responseData，将 response 字段映射到 response1字段，同时其他字段打平设置到返回数据中", "input": "", "output": "{\"response1\": responseData.response,\"field1\": responseData.field1,\"field2\": responseData.field2,...}"}, {"instruction": "有一个 amis 页面中的数据接口，该接口返回的data为一个数组，其格式为 [{originName: 'xxx', originAge: 'aaa', 'originGender': 'aaa'}]，现需要分别将originName，originAge，odiginGender 三个字段映射到新数组的 name，age，gender 字段中，为 responseData 编写相应的映射", "input": "", "output": "{\"responseData\": [{\"name\": \"xxx\",\"age\": \"aaa\",\"gender\": \"aaa\"}]}"}, {"instruction": "实现一个 amis 表单，通过一个接口提交数据，配置接口发送体格式为 application/x-www-form-urlencoded", "input": "", "output": "以下是一个使用 amis 表单提交数据并配置接口发送体格式为 application/x-www-form-urlencoded 的示例：jsximport React from 'react';import { render } from 'react-dom';import { Form, Button } from 'amis';class MyForm extends React.Component {handleSubmit = (values) => {// 将 values 转换为 application/x-www-form-urlencoded 格式const formData = new URLSearchParams();Object.keys(values).forEach((key) => {formData.append(key, values[key]);});// 发送 POST 请求fetch('your-api-url', {method: 'POST',headers: {'Content-Type': 'application/x-www-form-urlencoded'},body: formData}).then((response) => response.json()).then((data) => {// 处理返回的 JSON 数据console.log(data);}).catch((error) => {// 处理错误console.error(error);});};render() {return (<FormclassName=\"my-form\"controls={[{type: 'text',name: 'name',label: 'Name'},{type: 'text',name: 'email',label: 'Email'}]}onSubmit={this.handleSubmit}><Button type=\"submit\" level=\"primary\">Submit</Button></Form>);}}render(<MyForm />, document.getElementById('root'));在上面的示例中，我们使用了 amis 的 Form 组件来创建一个表单。在表单的 onSubmit 回调函数中，我们将表单数据转换为 application/x-www-form-urlencoded 格式，并使用 fetch 函数发送 POST 请求。请将 `your-api-url` 替换为实际的接口地址。注意：在使用 fetch 函数发送 POST 请求时，需要将请求头的 Content-Type 设置为 application/x-www-form-urlencoded。"}, {"instruction": "页面上有一个 amis 表单，表单中有 ‘name’ 和 ‘email’ 两个字段，但是后端接口需要的字段名是 ‘myName’ 和 ‘myEmail’ ，给出建议的解决方案，使得表单能向后端接口发送符合要求的数据", "input": "", "output": "{\"name\": \"myName\",\"email\": \"myEmail\"}"}, {"instruction": "页面上有一个amis CRUD 组件，后端接口返回的数据格式不满足该组件的需求，且结构比较复杂无法用映射解决，给出建议的解决方案", "input": "", "output": "{\"code\": 200,\"message\": \"success\",\"data\": {\"list\": [{\"id\": 1,\"name\": \"John\",\"age\": 25,\"address\": {\"street\": \"123 Main St\",\"city\": \"New York\",\"state\": \"NY\"},\"phone_numbers\": [{\"type\": \"home\",\"number\": \"123-456-7890\"},{\"type\": \"work\",\"number\": \"987-654-3210\"}]},{\"id\": 2,\"name\": \"Jane\",\"age\": 30,\"address\": {\"street\": \"456 Elm St\",\"city\": \"Los Angeles\",\"state\": \"CA\"},\"phone_numbers\": [{\"type\": \"home\",\"number\": \"111-222-3333\"},{\"type\": \"work\",\"number\": \"444-555-6666\"}]}]}}根据给出的 JSON 数据，我们可以通过以下步骤来解决后端接口返回的数据格式不满足 amis CRUD 组件的需求：1. 创建一个新的数据结构，符合 amis CRUD 组件的需求。根据给出的 JSON 数据，我们可以将其转换为以下格式：{\"items\": [{\"id\": 1,\"name\": \"John\",\"age\": 25,\"address.street\": \"123 Main St\",\"address.city\": \"New York\",\"address.state\": \"NY\",\"phone_numbers[0].type\": \"home\",\"phone_numbers[0].number\": \"123-456-7890\",\"phone_numbers[1].type\": \"work\",\"phone_numbers[1].number\": \"987-654-3210\"},{\"id\": 2,\"name\": \"Jane\",\"age\": 30,\"address.street\": \"456 Elm St\",\"address.city\": \"Los Angeles\",\"address.state\": \"CA\",\"phone_numbers[0].type\": \"home\",\"phone_numbers[0].number\": \"111-222-3333\",\"phone_numbers[1].type\": \"work\",\"phone_numbers[1].number\": \"444-555-6666\"}]}2. 在前端代码中，使用该新的数据结构来渲染 amis CRUD 组件。根据 amis CRUD 组件的文档，我们可以使用 `source` 属性来指定数据源，将新的数据结构传递给该属性即可。jsximport { Crud } from 'amis';const data = {items: [// 新的数据结构]};const App = () => {return (<Crudsource={data}// 其他属性.../>);};通过以上步骤，我们可以解决后端接口返回的数据格式不满足 amis CRUD 组件的需求的问题，并成功渲染出符合需求的 CRUD 组件。"}, {"instruction": "页面上有一个amis CRUD 组件，后端接口返回的数据格式不满足该组件的需求，生成使用 adaptor 函数对返回结果进行处理的示例", "input": "", "output": "{\"success\": true,\"data\": [{\"id\": 1,\"name\": \"John\",\"age\": 25},{\"id\": 2,\"name\": \"Jane\",\"age\": 30}]}"}, {"instruction": "页面上有一个 amis 表单，默认发送的数据格式不满足后端接口的要求，生成使用 requestAdaptor 函数对发送数据进行处理的示例", "input": "", "output": "{\"type\": \"form\",\"title\": \"AMIS 表单\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"number\",\"name\": \"age\",\"label\": \"年龄\"},{\"type\": \"select\",\"name\": \"gender\",\"label\": \"性别\",\"options\": [{\"label\": \"男\",\"value\": \"male\"},{\"label\": \"女\",\"value\": \"female\"}]}]}"}, {"instruction": "生成一个 amis React自定义组件的示例代码，渲染一个文本框，并说明如何在 amis 页面中引用该自定义组件", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"custom\",\"name\": \"myCustomComponent\",\"label\": \"Custom Component\",\"component\": \"MyCustomComponent\"}]}"}, {"instruction": "一个amis表单中包含一个名为 “身份证号码” 的字段，当表单提交时对该字段进行服务端校验，当校验失败时返回错误信息 “请输入合法的身份证号”，给出校验失败时的接口返回数据示例", "input": "", "output": "{\"error\": \"请输入合法的身份证号\"}"}, {"instruction": "amis 表单中包含一个 combo 组件，combo 组件中的每条记录包含 “商品名称(name)”“商品价格(price)”“单位(unit)” 三个字段，当表单提交时对 combo 组件的内容进行服务端校验，并在返回结果中具体定位哪一行的哪一个字段有错误，给出第[1] 行的 name 字段有错误的返回示例代码", "input": "", "output": "以下是一个示例的JSON格式返回，其中第1行的name字段有错误：{\"error\": true,\"message\": \"Combo component validation failed\",\"errorDetails\": [{\"row\": 1,\"field\": \"name\",\"errorMessage\": \"Invalid name\"}]}你可以根据实际情况修改错误消息和错误字段的名称。"}, {"instruction": "实现一个 amis 文本框，限制输入必须是 Url", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"url\",\"name\": \"url\",\"label\": \"URL\",\"required\": true}]}"}, {"instruction": "实现一个 amis 文本框，限制输入必须是数值", "input": "", "output": "{\"type\": \"input\",\"name\": \"numberInput\",\"label\": \"Number Input\",\"placeholder\": \"Enter a number\",\"rules\": [{\"pattern\": \"^[0-9]*$\",\"message\": \"Please enter a valid number\"}]}"}, {"instruction": "实现一个 amis 文本框，限制输入必须是字母", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"input\",\"label\": \"请输入字母\",\"pattern\": \"[A-Za-z]+\",\"patternErrorMessage\": \"请输入字母\"}]}"}, {"instruction": "实现一个 amis 文本框，限制输入必须是字母或数字", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"input\",\"label\": \"Input\",\"pattern\": \"^[a-zA-Z0-9]+$\",\"patternErrorMessage\": \"只能输入字母或数字\"}]}"}, {"instruction": "实现一个 amis 文本框，限制输入必须是整形", "input": "", "output": "{\"type\": \"input\",\"name\": \"number\",\"label\": \"整数输入框\",\"placeholder\": \"请输入整数\",\"rules\": [{\"pattern\": \"^[0-9]*$\",\"message\": \"请输入整数\"}]}"}, {"instruction": "实现一个 amis 文本框，限制输入必须是浮点形", "input": "", "output": "{\"type\": \"input\",\"name\": \"floatInput\",\"label\": \"浮点输入框\",\"placeholder\": \"请输入浮点数\",\"rules\": [{\"type\": \"float\",\"message\": \"请输入有效的浮点数\"}]}"}, {"instruction": "实现一个 amis 多行文本框，限制输入必须是合法 Json 字符串", "input": "", "output": "可以使用 amis 的 `Textarea` 组件来实现多行文本框，并结合 `validator` 属性来限制输入必须是合法的 JSON 字符串。以下是一个示例代码：jsximport { render } from 'amis';const schema = {type: 'form',title: 'JSON 输入',controls: [{type: 'textarea',name: 'jsonInput',label: 'JSON 字符串',validator: {type: 'json'}},{type: 'button',label: '提交',actionType: 'ajax',api: '/api/submit',level: 'primary'}]};render(schema, document.getElementById('root'));在上面的示例中，我们使用了 `Textarea` 组件，并在 `validator` 属性中指定了 `type: 'json'`，这样就会对输入的内容进行 JSON 格式的校验。你可以根据自己的需求修改上面的示例代码，并将其嵌入到你的项目中。"}, {"instruction": "实现一个 amis 文本框，限制输入必须是url路径", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"url\",\"name\": \"url\",\"label\": \"URL路径\",\"required\": true,\"pattern\": \"^https?://.*$\",\"patternErrorMessage\": \"请输入有效的URL路径\"}]}"}, {"instruction": "实现一个 amis 文本框，限制输入必须是合法手机号码", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"phone\",\"label\": \"手机号码\",\"required\": true,\"validations\": [{\"type\": \"pattern\",\"pattern\": \"^1[3456789]\\\\d{9}$\",\"message\": \"请输入合法的手机号码\"}]}]}"}, {"instruction": "实现一个 amis 文本框，限制输入必须是合法电话号码", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"phone\",\"label\": \"电话号码\",\"placeholder\": \"请输入电话号码\",\"rules\": [{\"pattern\": \"^1[3456789]\\\\d{9}$\",\"message\": \"请输入合法的电话号码\"}]}]}"}, {"instruction": "实现一个 amis 文本框，限制输入必须是合法邮编号码", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"zipcode\",\"label\": \"邮编号码\",\"required\": true,\"pattern\": \"\\\\d{6}\",\"patternErrorMessage\": \"请输入合法的邮编号码\"}]}"}, {"instruction": "实现一个 amis 文本框，限制输入必须是合法变量名", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"variableName\",\"label\": \"变量名\",\"pattern\": \"^[a-zA-Z_][a-zA-Z0-9_]*$\",\"patternErrorMessage\": \"请输入合法的变量名\"}]}"}, {"instruction": "实现一个 amis 文本框，限制输入必须命中某个正则", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"input\",\"label\": \"输入框\",\"pattern\": \"^[a-zA-Z0-9]+$\",\"patternErrorMessage\": \"只能输入字母和数字\"}]}"}, {"instruction": "实现一个 amis 表单，包含一个 combo 组件，combo 组件中的每条记录包含 “商品名称(name)”“商品价格(price)”“单位(unit)” 三个字段，提交时校验全部的 name 是否有重复，若有重复则报错，错误信息为“商品名称不可重复”", "input": "", "output": "以下是一个示例的 amis表单，包含一个combo组件，并且在提交时校验name字段是否有重复：{\"type\": \"form\",\"title\": \"AMIS表单\",\"controls\": [{\"type\": \"combo\",\"name\": \"products\",\"label\": \"商品列表\",\"addButtonText\": \"添加商品\",\"controls\": [{\"type\": \"text\",\"name\": \"name\",\"label\": \"商品名称\"},{\"type\": \"number\",\"name\": \"price\",\"label\": \"商品价格\"},{\"type\": \"text\",\"name\": \"unit\",\"label\": \"单位\"}],\"validations\": [{\"type\": \"custom\",\"messages\": {\"name\": \"商品名称不可重复\"},\"validator\": \"function(data) { return isDuplicate(data.products, 'name'); }\"}]},{\"type\": \"submit\",\"label\": \"提交\"}]}在上述示例中，我们使用了一个combo组件来展示商品列表，每个记录包含了商品名称、商品价格和单位三个字段。在combo组件的validations属性中，我们定义了一个自定义校验器，通过isDuplicate函数来判断name字段是否有重复。如果有重复，则会显示错误信息\"商品名称不可重复\"。你可以根据自己的需求进行修改和扩展。"}, {"instruction": "实现一个 amis 表单，包含一个下拉框，选项为 “教师”“学生”，以及一个“证件号码” 输入框，当选中“教师”时，证件号码限制输入六位数字，选中学生时，证件号码限制输入八位数字", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"select\",\"name\": \"role\",\"label\": \"角色\",\"options\": [{\"label\": \"教师\",\"value\": \"teacher\"},{\"label\": \"学生\",\"value\": \"student\"}]},{\"type\": \"input\",\"name\": \"idNumber\",\"label\": \"证件号码\",\"rules\": [{\"pattern\": \"^\\\\d{6}$\",\"message\": \"请输入六位数字\"},{\"pattern\": \"^\\\\d{8}$\",\"message\": \"请输入八位数字\"}]}]}"}, {"instruction": "amis 表单上有一个 id 字段，在表单提交时需要带上，但不希望该字段显示在表单界面上，提供合适的方案来实现这一需求", "input": "", "output": "{\"id\": \"hidden\",\"type\": \"string\",\"default\": \"123456\",\"hidden\": true}"}, {"instruction": "实现一个 amis 表单，包含两个按钮“显示”“隐藏”和一个文本框，点击“显示”时显示文本框，点击“隐藏”时隐藏文本框，使用 amis 中的事件动作配置实现该需求", "input": "", "output": "{\"type\": \"form\",\"controls\": [{\"type\": \"button\",\"label\": \"显示\",\"actionType\": \"show\",\"target\": \"text\"},{\"type\": \"button\",\"label\": \"隐藏\",\"actionType\": \"hide\",\"target\": \"text\"},{\"type\": \"text\",\"name\": \"text\",\"visible\": false}]}"}, {"instruction": "amis 页面上有一个按钮，用 amis 的事件动作能力为按钮实现一个这样的动作编排：当点击按钮时，首先向 /amis/api/mock2/form/saveForm 接口发送一个请求，请求成功后弹窗并将接口返回的 id 字段展示在弹窗中的一个文本框组件。", "input": "", "output": "{\"type\": \"button\",\"label\": \"点击按钮\",\"actionType\": \"ajax\",\"api\": \"/amis/api/mock2/form/saveForm\",\"messages\": {\"success\": \"保存成功\"},\"feedback\": {\"title\": \"保存成功\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"id\",\"label\": \"ID\"}]}}}"}, {"instruction": "实现一个 amis 列表选择器，通过一个 api 返回包含商品名称(name)”“商品价格(price)”“单位(unit)“ 信息的列表，并展示在选择器的列表中", "input": "", "output": "以下是一个示例的实现代码：javascriptimport React, { useState, useEffect } from 'react';import { List } from 'antd';import { Select } from 'amis';const ListSelector = () => {const [data, setData] = useState([]);const [selectedItem, setSelectedItem] = useState(null);useEffect(() => {// 调用 API 获取商品列表数据fetch('api/getProducts').then(response => response.json()).then(data => setData(data)).catch(error => console.error(error));}, []);const handleSelect = (value) => {setSelectedItem(value);};return (<Selectvalue={selectedItem}options={data.map(item => ({ label: item.name, value: item.name }))}onChange={handleSelect}placeholder=\"请选择商品\"/>);};export default ListSelector;在上面的代码中，我们使用了 `useState` 和 `useEffect` 这两个 React 的 Hook 来处理状态和副作用。`data` 是用来存储从 API 获取到的商品列表数据的状态，`selectedItem` 是用来存储用户选择的商品的状态。在 `useEffect` 中，我们使用 `fetch` 函数来调用 API 获取商品列表数据，并将返回的数据存储到 `data` 状态中。在 `handleSelect` 函数中，我们更新 `selectedItem` 状态，以便在选择器中显示用户选择的商品。最后，我们使用 `Select` 组件来展示选择器，并将商品列表数据转换为选项数组传递给 `options` 属性。用户选择的商品存储在 `selectedItem` 状态中，并通过 `onChange` 属性来更新。"}, {"instruction": "需要一个下拉选框，通过后端 api 动态获取选项数据，数据较为复杂，推荐合适的 amis 组件用于实现这一需求，并给出示例配置", "input": "", "output": "对于动态获取选项数据的下拉选框，可以使用 Amis 的 `Select` 组件结合 `api` 属性来实现。以下是一个示例配置：{\"type\": \"select\",\"name\": \"mySelect\",\"label\": \"下拉选框\",\"api\": \"/api/options\",\"valueField\": \"value\",\"labelField\": \"label\"}在上面的示例中，我们使用了 `Select` 组件，并设置了以下属性：- `name`：指定组件的名称，用于表单提交时的标识。- `label`：指定组件的标签文本。- `api`：指定后端 API 的地址，用于动态获取选项数据。- `valueField`：指定选项数据中表示值的字段名。- `labelField`：指定选项数据中表示标签的字段名。通过设置 `api` 属性，Amis 会在渲染时自动发送请求到指定的后端 API 获取选项数据，并将返回的数据填充到下拉选框中。请根据实际情况修改 `api` 属性的值，确保它能够正确地获取到选项数据。另外，根据后端 API 返回的数据结构，可能需要调整 `valueField` 和 `labelField` 属性的值，以正确地解析选项数据。"}, {"instruction": "需要以列表形式展示一些动态获取的数据行，并支持这些数据的增删改查，推荐合适的 amis 组件用于实现这一需求，并给出示例配置", "input": "", "output": "您可以使用 amis 的 Table 组件来展示动态获取的数据行，并支持增删改查操作。以下是一个示例配置：{\"type\": \"page\",\"title\": \"数据管理\",\"body\": {\"type\": \"crud\",\"api\": \"/api/data\",\"columns\": [{\"name\": \"id\",\"label\": \"ID\",\"type\": \"text\"},{\"name\": \"name\",\"label\": \"姓名\",\"type\": \"text\"},{\"name\": \"age\",\"label\": \"年龄\",\"type\": \"number\"},{\"name\": \"gender\",\"label\": \"性别\",\"type\": \"select\",\"options\": [{\"label\": \"男\",\"value\": \"male\"},{\"label\": \"女\",\"value\": \"female\"}]}]}}在上面的示例中，我们使用了 amis 的 Crud 组件来展示数据，并通过 `api` 属性指定了获取数据的接口地址。`columns` 属性定义了表格的列，其中每个列都有一个 `name` 属性表示字段名，一个 `label` 属性表示列名，以及一个 `type` 属性表示字段类型。在这个示例中，我们展示了一个包含 ID、姓名、年龄和性别的数据表格。您可以根据实际需求修改以上示例配置，以适应您的数据结构和业务逻辑。"}, {"instruction": "页面上有一个 “行业” 选择列表，可以以勾选的方式来勾选行业，最多不能超过三项，推荐合适的 amis 组件用于实现这一需求，并给出示例配置", "input": "", "output": "您可以使用 AMIS 的 `CheckboxGroup` 组件来实现这个需求。以下是一个示例配置：{\"type\": \"checkbox-group\",\"name\": \"industry\",\"label\": \"行业\",\"max\": 3,\"options\": [{\"label\": \"IT\",\"value\": \"it\"},{\"label\": \"金融\",\"value\": \"finance\"},{\"label\": \"教育\",\"value\": \"education\"},{\"label\": \"医疗\",\"value\": \"medical\"},{\"label\": \"制造\",\"value\": \"manufacturing\"}]}在这个示例中，我们使用了 `CheckboxGroup` 组件，并设置了 `name` 属性为 \"industry\"，`label` 属性为 \"行业\"。`max` 属性限制了最多可以选择的项数为 3。`options` 属性定义了可选的行业列表，每个选项包含 `label` 和 `value` 属性，分别表示显示的文本和对应的值。您可以根据实际需求修改选项的内容和数量。"}, {"instruction": "期望有一个”班级“ 选择菜单，当选中班级时在子菜单中展示该班级的全部学生名字，推荐合适的 amis 组件用于实现这一需求，并给出示例配置", "input": "", "output": "可以使用 amis 的 `Select` 组件和 `Table` 组件来实现这一需求。首先，使用 `Select` 组件创建一个班级选择菜单，当选中班级时，触发一个事件来获取该班级的学生名字。然后，使用 `Table` 组件展示学生名字。以下是一个示例配置：{\"type\": \"page\",\"title\": \"班级学生名单\",\"body\": {\"type\": \"container\",\"children\": [{\"type\": \"form\",\"title\": \"班级选择\",\"controls\": [{\"type\": \"select\",\"name\": \"class\",\"label\": \"班级\",\"options\": [{\"label\": \"一班\",\"value\": \"class1\"},{\"label\": \"二班\",\"value\": \"class2\"},{\"label\": \"三班\",\"value\": \"class3\"}],\"onChange\": {\"type\": \"ajax\",\"url\": \"/api/getStudents\",\"method\": \"post\",\"data\": {\"class\": \"${class}\"},\"successMessage\": \"获取学生名单成功\",\"errorMessage\": \"获取学生名单失败\",\"target\": \"students\"}}]},{\"type\": \"table\",\"name\": \"students\",\"label\": \"学生名单\",\"columns\": [{\"name\": \"name\",\"label\": \"姓名\"}]}]}}在上面的配置中，`Select` 组件的 `onChange` 事件会发送一个 AJAX 请求到 `/api/getStudents` 接口，并将选中的班级作为请求参数。成功获取学生名单后，会将学生名单数据存储到 `students` 字段中，然后 `Table` 组件会根据 `students` 字段展示学生名单。你需要根据实际情况，将 `/api/getStudents` 接口替换为你自己的接口，并根据接口返回的数据结构调整 `Table` 组件的配置。"}, {"instruction": "在一个“服务满意度评价” 表单中，有一项是需要对服务进行打分，支持 0-5 分评分，推荐合适的 amis 组件用于实现这一需求，并给出示例配置", "input": "", "output": "可以使用 AMIS 的 `Rate` 组件来实现对服务进行打分的需求。以下是一个示例配置：{\"type\": \"rate\",\"name\": \"serviceRating\",\"label\": \"服务评分\",\"value\": 0,\"count\": 5}在这个示例中，我们使用了 `Rate` 组件，并设置了以下属性：- `type`：指定组件类型为 `rate`。- `name`：指定组件的名称为 `serviceRating`。- `label`：指定组件的标签为 `服务评分`。- `value`：指定组件的初始值为 `0`，即默认选择 0 分。- `count`：指定组件的评分范围为 0-5 分。你可以根据实际需求调整这些属性的值。"}, {"instruction": "在一个调查表中，需要支持选择所在城市，推荐合适的 amis 组件用于实现这一需求，并给出示例配置", "input": "", "output": "可以使用 Amis 的 Select 组件来实现选择所在城市的需求。以下是一个示例配置：{\"type\": \"select\",\"name\": \"city\",\"label\": \"选择城市\",\"options\": [{ \"label\": \"北京\", \"value\": \"beijing\" },{ \"label\": \"上海\", \"value\": \"shanghai\" },{ \"label\": \"广州\", \"value\": \"guangzhou\" },{ \"label\": \"深圳\", \"value\": \"shenzhen\" }]}在这个示例中，我们使用了 Amis 的 Select 组件，并设置了以下属性：- `type`：指定组件类型为 `select`。- `name`：指定组件的名称，用于在表单提交时标识该字段。- `label`：指定组件的标签，用于显示在表单中。- `options`：指定选择项的列表，每个选项包含 `label` 和 `value` 两个属性，分别表示选项的显示文本和对应的值。你可以根据实际需求修改选项的内容和数量。"}, {"instruction": "用一个组件展示部门树信息并支持点选部门，推荐合适的 amis 组件用于实现这一需求，并给出示例配置", "input": "", "output": "您可以使用AMIS框架中的Tree组件来展示部门树信息并支持点选部门。以下是一个示例配置：{\"type\": \"tree\",\"name\": \"departmentTree\",\"source\": \"/api/departments\",\"valueField\": \"id\",\"textField\": \"name\",\"multiple\": false,\"joinValues\": true,\"delimiter\": \",\",\"rootLabel\": \"全部部门\",\"rootValue\": \"\",\"unfold\": true,\"showIcon\": true,\"showRadio\": true,\"showCheckbox\": false,\"cascade\": true,\"highlightCurrent\": true,\"expandLevel\": 2,\"onSelect\": \"handleSelect\"}在上面的配置中，我们使用了Tree组件，并指定了以下属性：- `source`：指定了部门树数据的接口地址，例如`/api/departments`。- `valueField`：指定了部门ID字段的名称，例如`id`。- `textField`：指定了部门名称字段的名称，例如`name`。- `multiple`：设置为`false`，表示只能选择一个部门。- `joinValues`：设置为`true`，表示选中的部门ID将会以逗号分隔的字符串形式返回。- `delimiter`：指定了选中的部门ID的分隔符，例如逗号。- `rootLabel`：指定了根节点的显示文本，例如`全部部门`。- `rootValue`：指定了根节点的值，例如空字符串。- `unfold`：设置为`true`，表示默认展开所有节点。- `showIcon`：设置为`true`，表示显示节点图标。- `showRadio`：设置为`true`，表示使用单选模式。- `showCheckbox`：设置为`false`，表示不显示复选框。- `cascade`：设置为`true`，表示级联选择。- `highlightCurrent`：设置为`true`，表示高亮当前选中的节点。- `expandLevel`：指定了默认展开的层级。- `onSelect`：指定了选中节点时的回调函数，例如`handleSelect`。您可以根据实际情况调整这些属性的值，并在页面中使用这个配置来展示部门树信息并支持点选部门。"}, {"instruction": "实现一个两栏布局页面，左侧是部门树，右侧展示该部门的资产借用情况，选择合适的 amis 组件实现这一需求并给出示例配置", "input": "", "output": "以下是一个使用 AMIS 组件实现两栏布局页面的示例配置：{\"type\": \"page\",\"body\": {\"type\": \"hbox\",\"children\": [{\"type\": \"panel\",\"title\": \"部门树\",\"body\": {\"type\": \"tree\",\"name\": \"departmentTree\",\"source\": \"/api/departmentTree\"},\"width\": 300},{\"type\": \"panel\",\"title\": \"资产借用情况\",\"body\": {\"type\": \"table\",\"name\": \"assetTable\",\"source\": \"/api/assetTable\"}}]}}在上面的示例配置中，使用了 AMIS 的 hbox 组件实现了两栏布局。左侧是一个 panel 组件，包含一个 tree 组件用于展示部门树。右侧也是一个 panel 组件，包含一个 table 组件用于展示资产借用情况。你可以根据实际情况修改示例配置中的 source 属性，将其替换为你的数据接口地址。"}, {"instruction": "页面右上角有一个按钮，只展示图标，点击图标右侧滑出一个抽屉，选择合适的 amis 组件实现这一需求并给出示例配置", "input": "", "output": "{\"type\": \"page\",\"body\": {\"type\": \"container\",\"children\": [{\"type\": \"button\",\"icon\": \"bars\",\"size\": \"sm\",\"onClick\": {\"type\": \"drawer\",\"placement\": \"right\",\"size\": \"md\",\"title\": \"抽屉标题\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"name\",\"label\": \"姓名\"},{\"type\": \"input\",\"name\": \"email\",\"label\": \"邮箱\"},{\"type\": \"button\",\"label\": \"提交\",\"level\": \"primary\",\"actionType\": \"ajax\",\"api\": \"/api/submit\",\"onSuccess\": {\"type\": \"message\",\"content\": \"提交成功\",\"level\": \"success\"},\"onFail\": {\"type\": \"message\",\"content\": \"提交失败\",\"level\": \"error\"}}]}}}]}}"}, {"instruction": "实现一个新闻动态列表，通过一个接口动态获取数据，以时间线形式展示，选择合适的 amis 组件实现这一需求并给出示例配置", "input": "", "output": "可以使用 amis 的 Timeline 组件来实现新闻动态列表的展示。以下是一个示例配置：{\"type\": \"timeline\",\"api\": \"/api/news\",\"body\": {\"type\": \"tpl\",\"tpl\": \"<div class=\\\"timeline-item\\\"><div class=\\\"timeline-item-content\\\"><div class=\\\"timeline-item-title\\\">{{title}}</div><div class=\\\"timeline-item-description\\\">{{content}}</div></div></div>\"}}在上面的配置中，我们使用了 Timeline 组件，并通过 `api` 属性指定了获取数据的接口地址为 `/api/news`。接口返回的数据应该是一个数组，每个元素包含 `title` 和 `content` 字段，分别表示新闻的标题和内容。在 `body` 属性中，我们使用了 `tpl` 属性来定义每个时间线项的模板。模板中使用了 `{{title}}` 和 `{{content}}` 这两个占位符，它们会被实际的数据替换。你可以根据实际情况修改接口地址和模板内容，以适应你的需求。"}, {"instruction": "有 “ESG首页” “理念与管理”“2030碳中和” 三段富文本内容，需要分别展示在三个 tab 中，同时希望 tab 在左侧切换，选择合适的 amis 组件实现这一需求并给出示例配置", "input": "", "output": "{\"type\": \"page\",\"title\": \"ESG\",\"body\": {\"type\": \"tabs\",\"tabs\": [{\"title\": \"ESG首页\",\"body\": {\"type\": \"html\",\"html\": \"<p>ESG首页内容</p>\"}},{\"title\": \"理念与管理\",\"body\": {\"type\": \"html\",\"html\": \"<p>理念与管理内容</p>\"}},{\"title\": \"2030碳中和\",\"body\": {\"type\": \"html\",\"html\": \"<p>2030碳中和内容</p>\"}}],\"activeKey\": 0,\"mode\": \"vertical\"}}"}, {"instruction": "公司内网有一个文件下载列表，展示一些公司制度文档并提供下载，选择合适的 amis 组件实现这一列表并给出示例配置", "input": "", "output": "{\"type\": \"list\",\"props\": {\"header\": \"公司制度文档下载列表\",\"bordered\": true,\"dataSource\": [{\"title\": \"公司员工手册\",\"url\": \"https://example.com/employee-handbook.pdf\"},{\"title\": \"公司安全政策\",\"url\": \"https://example.com/security-policy.pdf\"},{\"title\": \"公司休假制度\",\"url\": \"https://example.com/leave-policy.pdf\"}],\"renderItem\": {\"type\": \"list-item\",\"props\": {\"title\": \"{{title}}\",\"extra\": {\"type\": \"a\",\"props\": {\"href\": \"{{url}}\",\"target\": \"_blank\",\"download\": true},\"children\": \"下载\"}}}}}"}, {"instruction": "希望以日历形式展示每天的预约情况，并且点击日期能够查看详情，选择合适的 amis 组件实现这一需求并给出示例配置", "input": "", "output": "您可以使用 amis 的 Calendar 组件来展示每天的预约情况，并且通过点击日期来查看详情。以下是一个示例配置：{\"type\": \"calendar\",\"name\": \"appointmentCalendar\",\"source\": \"/api/appointments\",\"valueField\": \"date\",\"labelField\": \"title\",\"showPrevNext\": true,\"showToday\": true,\"showWeekNumbers\": true,\"onDateClick\": {\"type\": \"dialog\",\"title\": \"Appointment Details\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"static\",\"name\": \"title\",\"label\": \"Title\"},{\"type\": \"static\",\"name\": \"time\",\"label\": \"Time\"},{\"type\": \"static\",\"name\": \"location\",\"label\": \"Location\"}]}}}在上面的配置中，我们使用了 Calendar 组件来展示预约情况。通过 `source` 属性指定了获取预约数据的接口地址，`valueField` 属性指定了日期字段，`labelField` 属性指定了标题字段。通过设置 `onDateClick` 属性，我们定义了点击日期时的行为。在这个示例中，我们使用了 Dialog 组件来展示预约的详细信息。在 Dialog 的 `body` 属性中，我们使用了 Form 组件来展示预约的标题、时间和地点。您可以根据实际情况修改配置，以适应您的需求。"}, {"instruction": "需要在页面上以折线图、柱状图和散点图形式展示一些数据，选择合适的 amis 组件实现这三类图表的示例代码", "input": "", "output": "以下是使用 AMIS 组件实现折线图、柱状图和散点图的示例代码：{\"type\": \"page\",\"title\": \"数据展示\",\"body\": [{\"type\": \"chart\",\"title\": \"折线图\",\"source\": [{\"name\": \"数据1\",\"data\": [{ \"x\": \"2021-01-01\", \"y\": 10 },{ \"x\": \"2021-01-02\", \"y\": 20 },{ \"x\": \"2021-01-03\", \"y\": 15 },{ \"x\": \"2021-01-04\", \"y\": 25 },{ \"x\": \"2021-01-05\", \"y\": 30 }]},{\"name\": \"数据2\",\"data\": [{ \"x\": \"2021-01-01\", \"y\": 5 },{ \"x\": \"2021-01-02\", \"y\": 15 },{ \"x\": \"2021-01-03\", \"y\": 10 },{ \"x\": \"2021-01-04\", \"y\": 20 },{ \"x\": \"2021-01-05\", \"y\": 25 }]}],\"config\": {\"type\": \"line\"}},{\"type\": \"chart\",\"title\": \"柱状图\",\"source\": [{\"name\": \"数据1\",\"data\": [{ \"x\": \"A\", \"y\": 10 },{ \"x\": \"B\", \"y\": 20 },{ \"x\": \"C\", \"y\": 15 },{ \"x\": \"D\", \"y\": 25 },{ \"x\": \"E\", \"y\": 30 }]},{\"name\": \"数据2\",\"data\": [{ \"x\": \"A\", \"y\": 5 },{ \"x\": \"B\", \"y\": 15 },{ \"x\": \"C\", \"y\": 10 },{ \"x\": \"D\", \"y\": 20 },{ \"x\": \"E\", \"y\": 25 }]}],\"config\": {\"type\": \"bar\"}},{\"type\": \"chart\",\"title\": \"散点图\",\"source\": [{\"name\": \"数据1\",\"data\": [{ \"x\": 10, \"y\": 20 },{ \"x\": 15, \"y\": 25 },{ \"x\": 20, \"y\": 30 },{ \"x\": 25, \"y\": 35 },{ \"x\": 30, \"y\": 40 }]},{\"name\": \"数据2\",\"data\": [{ \"x\": 5, \"y\": 10 },{ \"x\": 10, \"y\": 15 },{ \"x\": 15, \"y\": 20 },{ \"x\": 20, \"y\": 25 },{ \"x\": 25, \"y\": 30 }]}],\"config\": {\"type\": \"scatter\"}}]}以上代码中，折线图使用了 `type: \"line\"`，柱状图使用了 `type: \"bar\"`，散点图使用了 `type: \"scatter\"`。每个图表的数据通过 `source` 属性传入，其中 `name` 表示数据系列的名称，`data` 表示具体的数据点。你可以根据实际需求修改数据和配置。"}, {"instruction": "在一个数据查询系统中，用户需要编写 SQL 语句并提交，选择合适的 amis 组件为这一需求构建一个提交界面，给出示例配置代码", "input": "", "output": "{\"type\": \"amis\",\"body\": {\"type\": \"form\",\"title\": \"SQL查询\",\"controls\": [{\"type\": \"textarea\",\"name\": \"sql\",\"label\": \"SQL语句\",\"required\": true}],\"actions\": [{\"type\": \"submit\",\"label\": \"提交\",\"api\": \"/api/query\",\"messages\": {\"success\": \"查询成功\",\"error\": \"查询失败\"}}]}}"}, {"instruction": "在一个表单中，需要输入密码并希望密码不直接显示，选择合适的amis组件实现这一需求，给出示例配置", "input": "", "output": "您可以使用AMIS中的Input组件来实现密码输入并隐藏显示的需求。以下是一个示例配置：{\"type\": \"form\",\"controls\": [{\"type\": \"input\",\"name\": \"password\",\"label\": \"密码\",\"placeholder\": \"请输入密码\",\"inputType\": \"password\"}]}在上述配置中，我们使用了Input组件，并将其inputType属性设置为\"password\"，这将使输入框中输入的内容以密码形式显示为圆点或星号。您可以根据需要自定义其他属性，如name、label和placeholder等。请注意，上述配置只是一个示例，您可以根据实际需求进行修改和扩展。"}, {"instruction": "在一个表单中，需要支持用户输入地址，期望支持用户在地图上点选定位自己的地址，选择合适的amis组件实现这一需求，给出示例配置", "input": "", "output": "可以使用Amis的`MapPicker`组件来实现在地图上点选定位地址的需求。以下是一个示例配置：{\"type\": \"form\",\"controls\": [{\"type\": \"map-picker\",\"name\": \"address\",\"label\": \"地址\",\"required\": true,\"apiKey\": \"YOUR_GOOGLE_MAPS_API_KEY\"}]}在上面的示例中，我们使用了`MapPicker`组件，并设置了以下属性：- `name`：字段的名称，用于表单提交时标识该字段的值。- `label`：字段的标签，用于显示在表单中。- `required`：是否为必填字段。- `apiKey`：Google Maps API的密钥，用于加载地图。请将`YOUR_GOOGLE_MAPS_API_KEY`替换为您自己的API密钥。用户在表单中使用`MapPicker`组件时，可以在地图上点选定位自己的地址，并将选中的地址作为表单字段的值。"}, {"instruction": "系统 B 中有一些页面，期望能直接嵌入到使用 amis 开发的系统 a 中，基于 amis，选择合适的方案来实现这一需求，并给出示例配置", "input": "", "output": "要将系统 B 中的页面嵌入到使用 amis 开发的系统 A 中，可以使用 amis 的 iframe 组件来实现。以下是一个示例配置：{\"type\": \"iframe\",\"props\": {\"src\": \"http://systemB.com/page\",\"style\": {\"width\": \"100%\",\"height\": \"500px\"}}}在上面的示例中，我们使用了 amis 的 iframe 组件，并设置了以下属性：- `src`：指定要嵌入的页面的 URL，这里假设系统 B 的页面 URL 是 `http://systemB.com/page`。- `style`：设置 iframe 的样式，这里将宽度设置为 100%、高度设置为 500px。通过将上述配置添加到系统 A 中的 amis 页面中，就可以将系统 B 的页面嵌入到系统 A 中了。请根据实际情况修改示例配置中的 URL 和样式。"}, {"instruction": "amis 页面上有一个按钮和一个 iframe 组件，当点击按钮时向 iframe 组件发送数据 {clicked: 'button1'}, 给出该页面的示例配置并给出 iframe 页面侧需要实现的数据接收示例代码", "input": "", "output": "页面示例配置：html<!DOCTYPE html><html><head><title>AMIS页面</title></head><body><button id=\"button1\">点击按钮</button><iframe id=\"iframe1\" src=\"iframe.html\"></iframe><script>var button = document.getElementById('button1');var iframe = document.getElementById('iframe1');button.addEventListener('click', function() {var data = { clicked: 'button1' };iframe.contentWindow.postMessage(data, '*');});</script></body></html>iframe 页面侧的数据接收示例代码：html<!DOCTYPE html><html><head><title>IFrame页面</title></head><body><script>window.addEventListener('message', function(event) {var data = event.data;console.log(data);});</script></body></html>以上示例中，当点击按钮时，页面会向 iframe 组件发送数据 `{ clicked: 'button1' }`。在 iframe 页面中，通过监听 `message` 事件来接收数据，并在控制台中打印出来。"}, {"instruction": "希望在页面上放一个视频并在访问页面时自动开始播放，选择合适的方案来实现这一需求，并给出示例配置", "input": "", "output": "{\"videoUrl\": \"https://example.com/video.mp4\",\"autoplay\": true}"}, {"instruction": "公司内部需要举行一个 “王者荣耀大赛” 活动，规划一个报名系统所需的页面，并给出基于 amis 的实现方案", "input": "", "output": "{\"schema\": {\"type\": \"object\",\"properties\": {\"teamName\": {\"type\": \"string\",\"title\": \"队伍名称\"},\"captainName\": {\"type\": \"string\",\"title\": \"队长姓名\"},\"captainEmail\": {\"type\": \"string\",\"title\": \"队长邮箱\",\"format\": \"email\"},\"playerNames\": {\"type\": \"array\",\"title\": \"队员姓名\",\"items\": {\"type\": \"string\"}},\"playerEmails\": {\"type\": \"array\",\"title\": \"队员邮箱\",\"items\": {\"type\": \"string\",\"format\": \"email\"}}},\"required\": [\"teamName\", \"captainName\", \"captainEmail\", \"playerNames\", \"playerEmails\"]},\"uiSchema\": {\"teamName\": {\"ui:autofocus\": true},\"captainEmail\": {\"ui:widget\": \"email\"},\"playerNames\": {\"items\": {\"ui:placeholder\": \"请输入队员姓名\"}},\"playerEmails\": {\"items\": {\"ui:widget\": \"email\",\"ui:placeholder\": \"请输入队员邮箱\"}}}}"}, {"instruction": "用 amis 实现一个“王者荣耀大赛” 的报名表单", "input": "", "output": "{\"title\": \"王者荣耀大赛报名表单\",\"fields\": [{\"name\": \"姓名\",\"type\": \"text\",\"required\": true},{\"name\": \"年龄\",\"type\": \"number\",\"required\": true},{\"name\": \"性别\",\"type\": \"radio\",\"options\": [\"男\", \"女\"],\"required\": true},{\"name\": \"游戏ID\",\"type\": \"text\",\"required\": true},{\"name\": \"所在战队\",\"type\": \"text\",\"required\": false},{\"name\": \"联系电话\",\"type\": \"tel\",\"required\": true},{\"name\": \"电子邮箱\",\"type\": \"email\",\"required\": true}]}"}, {"instruction": "用 amis 实现一个“王者荣耀大赛” 活动信息的静态页面，包含活动名称、活动时间、活动地点，活动介绍，并编写活动介绍文案", "input": "", "output": "{\"activityName\": \"王者荣耀大赛\",\"activityTime\": \"2021年10月10日 14:00-18:00\",\"activityLocation\": \"XX体育馆\",\"activityDescription\": \"王者荣耀大赛是一场激烈的电竞比赛，将有来自全国各地的顶尖战队参与。比赛将在XX体育馆举行，时间为2021年10月10日下午2点至6点。届时，观众将有机会亲眼见证顶级选手的精彩对决，感受电竞的魅力。无论你是王者荣耀的忠实粉丝，还是对电竞感兴趣的新手，都不容错过这场盛大的比赛。快来参加王者荣耀大赛，与其他玩家一起享受游戏的乐趣，共同见证电竞的辉煌！\"}"}, {"instruction": "用 amis 实现一个显示“王者荣耀大赛”当前用户报名状态的静态页面", "input": "", "output": "{\"status\": \"success\",\"data\": {\"tournament\": \"王者荣耀大赛\",\"users\": [{\"username\": \"user1\",\"status\": \"已报名\"},{\"username\": \"user2\",\"status\": \"已报名\"},{\"username\": \"user3\",\"status\": \"未报名\"},{\"username\": \"user4\",\"status\": \"已报名\"}]}}"}, {"instruction": "用 amis 实现一个王者荣耀大赛的比赛排名页面", "input": "", "output": "{\"status\": \"success\",\"data\": {\"tournament\": \"王者荣耀大赛\",\"ranking\": [{\"rank\": 1,\"team\": \"Team A\",\"score\": 100},{\"rank\": 2,\"team\": \"Team B\",\"score\": 90},{\"rank\": 3,\"team\": \"Team C\",\"score\": 80},{\"rank\": 4,\"team\": \"Team D\",\"score\": 70},{\"rank\": 5,\"team\": \"Team E\",\"score\": 60}]}}"}, {"instruction": "用 amis 实现一个王者荣耀大赛的报名信息管理列表页面", "input": "", "output": "{\"status\": \"success\",\"data\": [{\"id\": 1,\"name\": \"张三\",\"age\": 25,\"gender\": \"男\",\"rank\": \"钻石\",\"team\": \"战队A\"},{\"id\": 2,\"name\": \"李四\",\"age\": 28,\"gender\": \"男\",\"rank\": \"铂金\",\"team\": \"战队B\"},{\"id\": 3,\"name\": \"王五\",\"age\": 23,\"gender\": \"女\",\"rank\": \"黄金\",\"team\": \"战队C\"}]}"}, {"instruction": "公司需要建设一个内网门户，规划一个内网门户所需的页面，并给出基于 amis 的实现方案", "input": "", "output": "{\"pages\": [{\"name\": \"首页\",\"path\": \"/home\",\"component\": \"Home\"},{\"name\": \"新闻\",\"path\": \"/news\",\"component\": \"News\"},{\"name\": \"文档\",\"path\": \"/docs\",\"component\": \"Docs\"},{\"name\": \"团队\",\"path\": \"/team\",\"component\": \"Team\"},{\"name\": \"联系我们\",\"path\": \"/contact\",\"component\": \"Contact\"}],\"amisConfig\": {\"logo\": \"https://example.com/logo.png\",\"title\": \"公司内网门户\",\"theme\": \"default\",\"routes\": [{\"path\": \"/home\",\"component\": \"Home\"},{\"path\": \"/news\",\"component\": \"News\"},{\"path\": \"/docs\",\"component\": \"Docs\"},{\"path\": \"/team\",\"component\": \"Team\"},{\"path\": \"/contact\",\"component\": \"Contact\"}]}}"}, {"instruction": "用 amis 实现一个公司门户的首页，包含最新动态、重要通知、热门新闻，以及前往人员通讯录、个人中心、工作台的导航，给出相应的 amis 配置", "input": "", "output": "{\"type\": \"page\",\"title\": \"公司门户\",\"body\": {\"type\": \"container\",\"children\": [{\"type\": \"card\",\"title\": \"最新动态\",\"body\": {\"type\": \"list\",\"children\": [{\"type\": \"text\",\"content\": \"公司新产品上线啦！\"},{\"type\": \"text\",\"content\": \"员工培训活动即将开始\"},{\"type\": \"text\",\"content\": \"公司年会倒计时：10天\"}]}},{\"type\": \"card\",\"title\": \"重要通知\",\"body\": {\"type\": \"list\",\"children\": [{\"type\": \"text\",\"content\": \"明天下午2点有重要会议，请大家准时参加\"},{\"type\": \"text\",\"content\": \"本周五放假，大家注意安排工作\"},{\"type\": \"text\",\"content\": \"公司年度总结会议将于下周举行\"}]}},{\"type\": \"card\",\"title\": \"热门新闻\",\"body\": {\"type\": \"list\",\"children\": [{\"type\": \"text\",\"content\": \"公司荣获年度最佳雇主奖\"},{\"type\": \"text\",\"content\": \"新一代产品发布会圆满成功\"},{\"type\": \"text\",\"content\": \"公司获得行业领先地位\"}]}}]},\"aside\": {\"type\": \"nav\",\"children\": [{\"type\": \"link\",\"title\": \"人员通讯录\",\"href\": \"/address-book\"},{\"type\": \"link\",\"title\": \"个人中心\",\"href\": \"/personal-center\"},{\"type\": \"link\",\"title\": \"工作台\",\"href\": \"/workbench\"}]}}"}, {"instruction": "用 amis 实现一个员工个人中心页面，提供员工个人信息修改、密码管理、假期余额、绩效考核情况的查看能力，合理使用组件，合理布局", "input": "", "output": "{\"name\": \"John Doe\",\"position\": \"Software Engineer\",\"email\": \"johndoe@example.com\",\"phone\": \"1234567890\",\"address\": \"123 Main St, City, State\",\"password\": \"********\",\"vacationBalance\": 10,\"performanceRating\": 4.5}"}, {"instruction": "用 amis 实现一个工作台页面，包含前往常用办公系统的链接，如OA系统、CRM系统等", "input": "", "output": "{\"workbench\": [{\"name\": \"OA系统\",\"url\": \"http://oa.example.com\"},{\"name\": \"CRM系统\",\"url\": \"http://crm.example.com\"}]}"}, {"instruction": "用 amis 实现一个人员通讯录查询页面，能够根据员工邮箱查询到该员工的相关资料并展示", "input": "", "output": "以下是使用AMIS实现一个人员通讯录查询页面的示例代码：jsximport React from 'react';import { render, Page, Schema, Field, Table, Alert } from 'amis';const schema = {type: 'page',title: '人员通讯录查询',body: [{type: 'form',title: '',mode: 'horizontal',wrapWithPanel: false,controls: [{type: 'email',name: 'email',label: '员工邮箱',required: true},{type: 'submit',label: '查询',primary: true}]},{type: 'divider'},{type: 'table',name: 'result',label: '查询结果',source: '/api/employees',columns: [{name: 'name',label: '姓名'},{name: 'email',label: '邮箱'},{name: 'phone',label: '电话'}],affixHeader: true,perPageAvailable: [10, 20, 50]}]};const App = () => {const handleSubmit = (values) => {const email = values.email;// 发送请求到后端，根据邮箱查询员工信息// 返回的数据格式应为：{ \"name\": \"张三\", \"email\": \"zhangsan@example.com\", \"phone\": \"123456789\" }// 将返回的数据设置到表格的数据源中const result = {name: '张三',email: 'zhangsan@example.com',phone: '123456789'};render('result', result);};return (<Page schema={schema} onSubmit={handleSubmit} />);};export default App;在上述代码中，我们使用AMIS的`Page`组件来渲染页面，使用`Schema`组件来定义页面结构，使用`Field`组件来定义表单字段，使用`Table`组件来展示查询结果。在表单中，我们使用了`email`类型的字段来输入员工邮箱，使用`submit`类型的字段来提交查询请求。在查询结果表格中，我们定义了三列：姓名、邮箱和电话。我们通过设置`source`属性为`/api/employees`来指定数据源的接口地址，通过设置`columns`属性来定义表格的列。在`handleSubmit`函数中，我们可以发送请求到后端，根据邮箱查询员工信息。在示例代码中，我们直接模拟了一个返回的结果，并将其设置到表格的数据源中。你可以根据实际情况修改代码中的接口地址和返回的数据格式。"}, {"instruction": "现需要搭建一个内部意见反馈及处理系统，规划该系统所需的页面，并给出基于 amis 的实现方案", "input": "", "output": "{\"pages\": [{\"title\": \"意见反馈\",\"elements\": [{\"type\": \"input\",\"name\": \"name\",\"label\": \"姓名\",\"required\": true},{\"type\": \"input\",\"name\": \"email\",\"label\": \"邮箱\",\"required\": true,\"rules\": [{\"type\": \"email\",\"message\": \"请输入有效的邮箱地址\"}]},{\"type\": \"textarea\",\"name\": \"content\",\"label\": \"意见内容\",\"required\": true},{\"type\": \"button\",\"label\": \"提交\",\"actionType\": \"ajax\",\"api\": \"/api/feedback\",\"method\": \"post\",\"messages\": {\"success\": \"提交成功\",\"error\": \"提交失败\"}}]},{\"title\": \"意见处理\",\"elements\": [{\"type\": \"table\",\"name\": \"feedbackList\",\"label\": \"意见列表\",\"columns\": [{\"name\": \"name\",\"label\": \"姓名\"},{\"name\": \"email\",\"label\": \"邮箱\"},{\"name\": \"content\",\"label\": \"意见内容\"},{\"name\": \"status\",\"label\": \"处理状态\"}],\"source\": \"/api/feedbackList\",\"primaryKey\": \"id\",\"addable\": false,\"editable\": false,\"deletable\": false}]}]}"}, {"instruction": "用 amis 实现一个意见反馈页面，允许用户输入反馈的文本、选择反馈类型（例如建议、错误报告等）、附加文件和图像", "input": "", "output": "{\"feedback\": \"用户输入的反馈文本\",\"type\": \"用户选择的反馈类型\",\"attachment\": \"附加文件的链接\",\"image\": \"图像的链接\"}"}, {"instruction": "用 amis 实现一个内部意见反馈及处理系统中的个人意见处理列表页面，支持点击查看处理详情及根据日期筛选", "input": "", "output": "{\"status\": \"success\",\"data\": [{\"id\": 1,\"title\": \"意见反馈1\",\"content\": \"这是一条意见反馈的内容1\",\"date\": \"2021-01-01\",\"status\": \"已处理\",\"handler\": \"张三\"},{\"id\": 2,\"title\": \"意见反馈2\",\"content\": \"这是一条意见反馈的内容2\",\"date\": \"2021-01-02\",\"status\": \"未处理\",\"handler\": \"\"},{\"id\": 3,\"title\": \"意见反馈3\",\"content\": \"这是一条意见反馈的内容3\",\"date\": \"2021-01-03\",\"status\": \"已处理\",\"handler\": \"李四\"}]}"}, {"instruction": "用 amis 实现一个反馈列表广场页面：列出所有收到的反馈，包括反馈的状态（已处理、待处理等）、反馈类型、反馈的摘要等。允许用户进行筛选和搜索，并可以点击反馈以查看详细信息。", "input": "", "output": "{\"feedbacks\": [{\"id\": 1,\"status\": \"已处理\",\"type\": \"Bug报告\",\"summary\": \"应用崩溃\",\"details\": \"应用在某个特定操作下崩溃了\",\"timestamp\": \"2021-01-01 10:00:00\"},{\"id\": 2,\"status\": \"待处理\",\"type\": \"功能建议\",\"summary\": \"增加导航功能\",\"details\": \"建议增加导航功能以方便用户使用\",\"timestamp\": \"2021-01-02 14:30:00\"},{\"id\": 3,\"status\": \"待处理\",\"type\": \"用户反馈\",\"summary\": \"界面颜色太暗\",\"details\": \"用户反馈应用界面颜色太暗，希望能调亮一些\",\"timestamp\": \"2021-01-03 09:15:00\"}]}"}, {"instruction": "用 amis 实现一个内部意见反馈及处理系统中的反馈处理页面，用于处理意见，允许处理人员查看意见详情、将意见标记为已处理、输入处理回复。", "input": "", "output": "{\"feedbackId\": \"123456\",\"feedbackDetails\": \"这是一条意见反馈的详情\",\"feedbackStatus\": \"未处理\",\"feedbackReply\": \"\",\"feedbackHandler\": \"\",\"feedbackTimestamp\": \"2021-01-01 10:00:00\"}"}, {"instruction": "现需要搭建一个考勤系统，规划该系统所需的页面，并给出基于 amis 的实现方案", "input": "", "output": "{\"pages\": [{\"name\": \"登录页\",\"path\": \"/login\",\"component\": \"Login\"},{\"name\": \"首页\",\"path\": \"/home\",\"component\": \"Home\"},{\"name\": \"考勤记录\",\"path\": \"/attendance\",\"component\": \"Attendance\"},{\"name\": \"员工管理\",\"path\": \"/employee\",\"component\": \"Employee\"},{\"name\": \"部门管理\",\"path\": \"/department\",\"component\": \"Department\"},{\"name\": \"权限管理\",\"path\": \"/permission\",\"component\": \"Permission\"}],\"amis\": {\"Login\": {\"type\": \"page\",\"body\": {\"type\": \"form\",\"title\": \"登录\",\"controls\": [{\"type\": \"text\",\"name\": \"username\",\"label\": \"用户名\",\"required\": true},{\"type\": \"password\",\"name\": \"password\",\"label\": \"密码\",\"required\": true},{\"type\": \"submit\",\"label\": \"登录\"}]}},\"Home\": {\"type\": \"page\",\"body\": {\"type\": \"html\",\"html\": \"<h1>欢迎使用考勤系统</h1>\"}},\"Attendance\": {\"type\": \"page\",\"body\": {\"type\": \"table\",\"api\": \"/api/attendance\",\"columns\": [{\"name\": \"id\",\"label\": \"ID\"},{\"name\": \"employee\",\"label\": \"员工\"},{\"name\": \"date\",\"label\": \"日期\"},{\"name\": \"time\",\"label\": \"时间\"}]}},\"Employee\": {\"type\": \"page\",\"body\": {\"type\": \"table\",\"api\": \"/api/employee\",\"columns\": [{\"name\": \"id\",\"label\": \"ID\"},{\"name\": \"name\",\"label\": \"姓名\"},{\"name\": \"department\",\"label\": \"部门\"},{\"name\": \"position\",\"label\": \"职位\"}]}},\"Department\": {\"type\": \"page\",\"body\": {\"type\": \"table\",\"api\": \"/api/department\",\"columns\": [{\"name\": \"id\",\"label\": \"ID\"},{\"name\": \"name\",\"label\": \"名称\"},{\"name\": \"manager\",\"label\": \"经理\"}]}},\"Permission\": {\"type\": \"page\",\"body\": {\"type\": \"table\",\"api\": \"/api/permission\",\"columns\": [{\"name\": \"id\",\"label\": \"ID\"},{\"name\": \"name\",\"label\": \"名称\"},{\"name\": \"description\",\"label\": \"描述\"}]}}}}"}, {"instruction": "用 amis 实现一个考勤系统中的考勤记录页面", "input": "", "output": "{\"status\": \"success\",\"data\": {\"attendance_records\": [{\"id\": 1,\"employee_id\": 123,\"date\": \"2021-01-01\",\"time_in\": \"09:00:00\",\"time_out\": \"18:00:00\"},{\"id\": 2,\"employee_id\": 456,\"date\": \"2021-01-02\",\"time_in\": \"09:30:00\",\"time_out\": \"18:30:00\"},{\"id\": 3,\"employee_id\": 789,\"date\": \"2021-01-03\",\"time_in\": \"09:15:00\",\"time_out\": \"18:15:00\"}]}}"}, {"instruction": "用 amis 实现一个考勤系统中的考勤统计页面，供管理员查看考勤统计数据", "input": "", "output": "{\"status\": \"success\",\"data\": {\"totalEmployees\": 100,\"presentEmployees\": 80,\"absentEmployees\": 20,\"lateEmployees\": 10,\"earlyLeaveEmployees\": 5}}"}, {"instruction": "用 amis 实现一个考勤系统中的管理员页面，供管理员管理考勤记录", "input": "", "output": "{\"status\": \"success\",\"data\": {\"adminId\": \"123456\",\"adminName\": \"John Doe\",\"attendanceRecords\": [{\"recordId\": \"001\",\"employeeId\": \"001\",\"employeeName\": \"Alice\",\"date\": \"2021-01-01\",\"status\": \"Present\"},{\"recordId\": \"002\",\"employeeId\": \"002\",\"employeeName\": \"Bob\",\"date\": \"2021-01-01\",\"status\": \"Absent\"},{\"recordId\": \"003\",\"employeeId\": \"003\",\"employeeName\": \"Charlie\",\"date\": \"2021-01-01\",\"status\": \"Present\"}]}}"}, {"instruction": "公司有一个文具礼品领用中心，每月会采购不同的文具和礼品并入库，每个员工每季度都有固定的领用额度，每次领用需要从额度中扣取与领用品标价对应的数额。现需要搭建一个系统来对这个过程进行线上化管理，规划该系统所需的页面，并给出基于 amis 的实现方案", "input": "", "output": "{\"pages\": [{\"name\": \"首页\",\"path\": \"/\",\"title\": \"文具礼品领用中心\",\"schema\": {\"type\": \"page\",\"body\": {\"type\": \"html\",\"html\": \"<h1>欢迎来到文具礼品领用中心！</h1>\"}}},{\"name\": \"库存管理\",\"path\": \"/inventory\",\"title\": \"库存管理\",\"schema\": {\"type\": \"page\",\"body\": {\"type\": \"form\",\"title\": \"库存管理\",\"controls\": [{\"type\": \"table\",\"name\": \"inventoryTable\",\"label\": \"库存列表\",\"columns\": [{\"name\": \"name\",\"label\": \"名称\"},{\"name\": \"quantity\",\"label\": \"数量\"},{\"name\": \"price\",\"label\": \"价格\"}],\"source\": \"/api/inventory\"}]}}},{\"name\": \"领用管理\",\"path\": \"/usage\",\"title\": \"领用管理\",\"schema\": {\"type\": \"page\",\"body\": {\"type\": \"form\",\"title\": \"领用管理\",\"controls\": [{\"type\": \"table\",\"name\": \"usageTable\",\"label\": \"领用列表\",\"columns\": [{\"name\": \"name\",\"label\": \"名称\"},{\"name\": \"quantity\",\"label\": \"数量\"},{\"name\": \"price\",\"label\": \"价格\"}],\"source\": \"/api/usage\"}]}}},{\"name\": \"员工管理\",\"path\": \"/employees\",\"title\": \"员工管理\",\"schema\": {\"type\": \"page\",\"body\": {\"type\": \"form\",\"title\": \"员工管理\",\"controls\": [{\"type\": \"table\",\"name\": \"employeeTable\",\"label\": \"员工列表\",\"columns\": [{\"name\": \"name\",\"label\": \"姓名\"},{\"name\": \"quota\",\"label\": \"领用额度\"}],\"source\": \"/api/employees\"}]}}}]}"}, {"instruction": "用 amis 实现一个文具礼品管理系统中的首页，展示当前月份的文具和礼品采购清单，以及用户当前的领用额度和已经领用的文具和礼品清单", "input": "", "output": "{\"current_month\": \"2022-01\",\"stationery_purchase_list\": [{\"item_name\": \"笔记本\",\"quantity\": 10},{\"item_name\": \"铅笔\",\"quantity\": 20},{\"item_name\": \"橡皮\",\"quantity\": 5}],\"gift_purchase_list\": [{\"item_name\": \"钥匙扣\",\"quantity\": 15},{\"item_name\": \"书签\",\"quantity\": 8},{\"item_name\": \"贺卡\",\"quantity\": 3}],\"user_quota\": 100,\"user_stationery_list\": [{\"item_name\": \"笔记本\",\"quantity\": 2},{\"item_name\": \"铅笔\",\"quantity\": 5}],\"user_gift_list\": [{\"item_name\": \"钥匙扣\",\"quantity\": 3},{\"item_name\": \"书签\",\"quantity\": 2}]}"}, {"instruction": "用 amis 实现一个文具礼品管理系统中的领用页面：用户可以在此页面选择需要领用的文具或礼品，并确认领用数量和领用时间。", "input": "", "output": "{\"status\": \"success\",\"message\": \"领用成功\",\"data\": {\"item\": \"笔记本\",\"quantity\": 2,\"pickupDate\": \"2021-09-30\"}}"}, {"instruction": "用 amis 实现一个文具礼品管理系统中的入库页面：管理员可以在此页面录入新采购的文具或礼品信息，并更新库存数量。", "input": "", "output": "{\"status\": \"success\",\"message\": \"入库成功\",\"data\": {\"id\": \"123456\",\"name\": \"笔记本\",\"category\": \"文具\",\"quantity\": 100}}"}, {"instruction": "用 amis 实现一个文具礼品管理系统中的库存页面：展示当前库存的文具和礼品清单，以及采购数量和已领用数量。", "input": "", "output": "{\"stationery\": [{\"name\": \"笔\",\"stock\": 100,\"purchased\": 50,\"used\": 20},{\"name\": \"纸\",\"stock\": 200,\"purchased\": 100,\"used\": 50}],\"gifts\": [{\"name\": \"钥匙链\",\"stock\": 50,\"purchased\": 30,\"used\": 10},{\"name\": \"书签\",\"stock\": 80,\"purchased\": 50,\"used\": 20}]}"}, {"instruction": "公司有一个收发室，收发室每天需要处理两件事 1. 公司函件通过收发室发送时，需要统一记录发件信息，快递寄出时需要更新单号及快递状态 2. 代收时，需要统一记录收件信息，当收件人领走快递时需要将状态更新为“已领件”，设计一个系统用于将这两个过程过程进行线上化管理，规划相关页面并给出基于 amis 的实现方案", "input": "", "output": "{\"pages\": {\"send\": {\"title\": \"发件管理\",\"fields\": [{\"name\": \"sender\",\"label\": \"发件人\",\"type\": \"text\",\"required\": true},{\"name\": \"recipient\",\"label\": \"收件人\",\"type\": \"text\",\"required\": true},{\"name\": \"address\",\"label\": \"收件地址\",\"type\": \"text\",\"required\": true},{\"name\": \"trackingNumber\",\"label\": \"快递单号\",\"type\": \"text\",\"required\": true},{\"name\": \"status\",\"label\": \"快递状态\",\"type\": \"select\",\"options\": [{\"label\": \"已寄出\",\"value\": \"sent\"},{\"label\": \"已签收\",\"value\": \"delivered\"}],\"required\": true}],\"submitText\": \"发送\",\"api\": \"/send\"},\"receive\": {\"title\": \"收件管理\",\"fields\": [{\"name\": \"sender\",\"label\": \"发件人\",\"type\": \"text\",\"required\": true},{\"name\": \"recipient\",\"label\": \"收件人\",\"type\": \"text\",\"required\": true},{\"name\": \"address\",\"label\": \"收件地址\",\"type\": \"text\",\"required\": true},{\"name\": \"status\",\"label\": \"快递状态\",\"type\": \"select\",\"options\": [{\"label\": \"已收件\",\"value\": \"received\"},{\"label\": \"已领件\",\"value\": \"collected\"}],\"required\": true}],\"submitText\": \"代收\",\"api\": \"/receive\"}}}"}, {"instruction": "用 amis 实现收发室收发件系统的主页，包含所有快递的列表视图，可以根据状态、时间、目的地等进行筛选和排序。包括一些快捷菜单和链接，如新增快递、发件人管理、收件人管理等。", "input": "", "output": "{\"title\": \"收发室收发件系统\",\"menu\": [{\"name\": \"新增快递\",\"link\": \"/add-package\"},{\"name\": \"发件人管理\",\"link\": \"/sender-management\"},{\"name\": \"收件人管理\",\"link\": \"/recipient-management\"}],\"filters\": [{\"name\": \"状态\",\"options\": [\"待处理\",\"已发出\",\"已签收\"]},{\"name\": \"时间\",\"options\": [\"最近一周\",\"最近一个月\",\"最近三个月\"]},{\"name\": \"目的地\",\"options\": [\"北京\",\"上海\",\"广州\",\"深圳\"]}],\"packages\": [{\"id\": 1,\"sender\": \"张三\",\"recipient\": \"李四\",\"status\": \"待处理\",\"destination\": \"北京\",\"time\": \"2021-01-01 10:00:00\"},{\"id\": 2,\"sender\": \"王五\",\"recipient\": \"赵六\",\"status\": \"已发出\",\"destination\": \"上海\",\"time\": \"2021-01-02 11:00:00\"},{\"id\": 3,\"sender\": \"田七\",\"recipient\": \"周八\",\"status\": \"已签收\",\"destination\": \"广州\",\"time\": \"2021-01-03 12:00:00\"}]}"}, {"instruction": "用 amis 实现收发室收发件系统的新增快递页：用户可以在此页面输入新快递的相关信息，如发件人、收件人、目的地、重量、费用等。同时也可以记录发件人的信息，如姓名、电话、公司名称等。", "input": "", "output": "{\"sender\": {\"name\": \"John Doe\",\"phone\": \"1234567890\",\"company\": \"ABC Company\"},\"recipient\": {\"name\": \"Jane Smith\",\"phone\": \"0987654321\",\"company\": \"XYZ Company\"},\"destination\": \"New York\",\"weight\": \"2kg\",\"cost\": \"$10\"}"}, {"instruction": "用 amis 实现收发室收发件系统的代收快递页：用户可以在此页面输入收件人的相关信息，如姓名、电话、公司名称等。", "input": "", "output": "{\"name\": \"John Doe\",\"phone\": \"1234567890\",\"company\": \"ABC Company\"}"}, {"instruction": "用 amis 实现收发室收发件系统的代收快递列表页，支持根据收件人姓名和手机号查找快递，并支持通过列表操作更新快递状态、记录领件人等", "input": "", "output": "{\"status\": \"success\",\"data\": [{\"id\": 1,\"recipientName\": \"张三\",\"recipientPhone\": \"13812345678\",\"status\": \"待领取\",\"pickupPerson\": \"\"},{\"id\": 2,\"recipientName\": \"李四\",\"recipientPhone\": \"13987654321\",\"status\": \"已领取\",\"pickupPerson\": \"王五\"}]}"}, {"instruction": "设计一个 IT 资产管理系统，包含供库房信息管理、固定资产管理、配件管理三个资产管理模块，同时提供资产借用、资产购入申请、资产保修、配件领用、配件归还能力，规划该系统所需页面并给出基于 amis 的实现方案，只给出页面信息即可", "input": "", "output": "{\"pages\": [{\"name\": \"库房信息管理\",\"path\": \"/warehouse\",\"children\": [{\"name\": \"库房列表\",\"path\": \"/warehouse/list\"},{\"name\": \"添加库房\",\"path\": \"/warehouse/add\"},{\"name\": \"编辑库房\",\"path\": \"/warehouse/edit\"}]},{\"name\": \"固定资产管理\",\"path\": \"/fixed-assets\",\"children\": [{\"name\": \"资产列表\",\"path\": \"/fixed-assets/list\"},{\"name\": \"添加资产\",\"path\": \"/fixed-assets/add\"},{\"name\": \"编辑资产\",\"path\": \"/fixed-assets/edit\"},{\"name\": \"资产借用\",\"path\": \"/fixed-assets/borrow\"},{\"name\": \"资产购入申请\",\"path\": \"/fixed-assets/purchase-request\"},{\"name\": \"资产保修\",\"path\": \"/fixed-assets/maintenance\"}]},{\"name\": \"配件管理\",\"path\": \"/accessories\",\"children\": [{\"name\": \"配件列表\",\"path\": \"/accessories/list\"},{\"name\": \"添加配件\",\"path\": \"/accessories/add\"},{\"name\": \"编辑配件\",\"path\": \"/accessories/edit\"},{\"name\": \"配件领用\",\"path\": \"/accessories/issue\"},{\"name\": \"配件归还\",\"path\": \"/accessories/return\"}]}]}"}, {"instruction": "用 amis 实现一个 IT 资产管理系统的首页，包含最近的资产借用申请记录、最近的资产购入申请记录、最近的配件领用记录、最近的配件归还记录", "input": "", "output": "{\"recent_asset_borrow_requests\": [{\"request_id\": \"ABR001\",\"asset_id\": \"AS001\",\"borrower\": \"John Doe\",\"borrow_date\": \"2021-09-01\"},{\"request_id\": \"ABR002\",\"asset_id\": \"AS002\",\"borrower\": \"Jane Smith\",\"borrow_date\": \"2021-09-02\"}],\"recent_asset_purchase_requests\": [{\"request_id\": \"APR001\",\"asset_id\": \"AS003\",\"requester\": \"Mike Johnson\",\"request_date\": \"2021-09-03\"},{\"request_id\": \"APR002\",\"asset_id\": \"AS004\",\"requester\": \"Emily Brown\",\"request_date\": \"2021-09-04\"}],\"recent_accessory_issue_records\": [{\"record_id\": \"AIR001\",\"accessory_id\": \"AC001\",\"issued_to\": \"John Doe\",\"issue_date\": \"2021-09-05\"},{\"record_id\": \"AIR002\",\"accessory_id\": \"AC002\",\"issued_to\": \"Jane Smith\",\"issue_date\": \"2021-09-06\"}],\"recent_accessory_return_records\": [{\"record_id\": \"ARR001\",\"accessory_id\": \"AC001\",\"returned_by\": \"John Doe\",\"return_date\": \"2021-09-07\"},{\"record_id\": \"ARR002\",\"accessory_id\": \"AC002\",\"returned_by\": \"Jane Smith\",\"return_date\": \"2021-09-08\"}]}"}, {"instruction": "用 amis 实现一个 IT 资产管理系统中的库房信息管理页面，支持包含库房名称、库房地址、库房联系方式的库房信息增删改查", "input": "", "output": "{\"status\": \"success\",\"message\": \"操作成功\",\"data\": {\"warehouseId\": \"123456\",\"warehouseName\": \"库房A\",\"warehouseAddress\": \"地址A\",\"warehouseContact\": \"联系方式A\"}}"}, {"instruction": "用 amis 实现一个 IT 资产管理系统中的资产信息管理页面，支持包含资产名称、资产编号、存放库房、存放位置、购入时间、购入价格、使用部门的资产信息增删改查", "input": "", "output": "以下是使用AMIS实现的IT资产管理系统中的资产信息管理页面的示例代码：{\"type\": \"page\",\"title\": \"资产信息管理\",\"body\": {\"type\": \"crud\",\"api\": \"/api/assets\",\"columns\": [{\"name\": \"name\",\"label\": \"资产名称\"},{\"name\": \"number\",\"label\": \"资产编号\"},{\"name\": \"warehouse\",\"label\": \"存放库房\"},{\"name\": \"location\",\"label\": \"存放位置\"},{\"name\": \"purchaseTime\",\"label\": \"购入时间\",\"type\": \"datetime\"},{\"name\": \"purchasePrice\",\"label\": \"购入价格\",\"type\": \"number\"},{\"name\": \"department\",\"label\": \"使用部门\"}],\"operations\": [{\"label\": \"新增\",\"type\": \"button\",\"actionType\": \"dialog\",\"dialog\": {\"title\": \"新增资产信息\",\"body\": {\"type\": \"form\",\"api\": \"/api/assets\",\"controls\": [{\"name\": \"name\",\"label\": \"资产名称\",\"type\": \"text\",\"required\": true},{\"name\": \"number\",\"label\": \"资产编号\",\"type\": \"text\",\"required\": true},{\"name\": \"warehouse\",\"label\": \"存放库房\",\"type\": \"text\",\"required\": true},{\"name\": \"location\",\"label\": \"存放位置\",\"type\": \"text\",\"required\": true},{\"name\": \"purchaseTime\",\"label\": \"购入时间\",\"type\": \"datetime\",\"required\": true},{\"name\": \"purchasePrice\",\"label\": \"购入价格\",\"type\": \"number\",\"required\": true},{\"name\": \"department\",\"label\": \"使用部门\",\"type\": \"text\",\"required\": true}]}}},{\"label\": \"编辑\",\"type\": \"button\",\"actionType\": \"dialog\",\"dialog\": {\"title\": \"编辑资产信息\",\"body\": {\"type\": \"form\",\"api\": \"/api/assets/$id\",\"controls\": [{\"name\": \"name\",\"label\": \"资产名称\",\"type\": \"text\",\"required\": true},{\"name\": \"number\",\"label\": \"资产编号\",\"type\": \"text\",\"required\": true},{\"name\": \"warehouse\",\"label\": \"存放库房\",\"type\": \"text\",\"required\": true},{\"name\": \"location\",\"label\": \"存放位置\",\"type\": \"text\",\"required\": true},{\"name\": \"purchaseTime\",\"label\": \"购入时间\",\"type\": \"datetime\",\"required\": true},{\"name\": \"purchasePrice\",\"label\": \"购入价格\",\"type\": \"number\",\"required\": true},{\"name\": \"department\",\"label\": \"使用部门\",\"type\": \"text\",\"required\": true}]}}},{\"label\": \"删除\",\"type\": \"button\",\"actionType\": \"ajax\",\"confirmText\": \"确认要删除这条记录吗？\",\"api\": \"/api/assets/$id\",\"method\": \"delete\"}]}}请注意，上述代码中的`/api/assets`是一个示例API接口，你需要根据实际情况进行替换。此外，你还需要根据实际需求进行样式和交互的调整。"}, {"instruction": "用 amis 实现一个 IT 资产管理系统中的资产借用申请页，支持填写借用人员、借用时间、预计归还时间、借用原因并提交申请", "input": "", "output": "{\"borrower\": \"John Doe\",\"borrowed_time\": \"2021-09-01 09:00:00\",\"expected_return_time\": \"2021-09-05 18:00:00\",\"reason\": \"Attending a conference\"}"}, {"instruction": "用 amis 实现一个 IT 资产管理系统中的 “我的申请” 页，支持查看申请记录以及当前处理状态", "input": "", "output": "{\"status\": \"success\",\"data\": {\"applications\": [{\"id\": 1,\"title\": \"申请1\",\"status\": \"待处理\"},{\"id\": 2,\"title\": \"申请2\",\"status\": \"已处理\"},{\"id\": 3,\"title\": \"申请3\",\"status\": \"已处理\"}]}}"}, {"instruction": "用 amis 实现一个 IT 资产管理系统中的资产借用申请处理页，支持处理已提交的申请，包括同意和驳回，驳回时需要支持填写驳回意见", "input": "", "output": "{\"status\": \"success\",\"message\": \"申请处理成功\"}"}, {"instruction": "设计一个保险行业的理赔系统，规划该系统所需页面并给出基于 amis 的实现方案", "input": "", "output": "{\"pages\": [{\"name\": \"登录\",\"path\": \"/login\",\"schema\": {\"type\": \"object\",\"properties\": {\"username\": {\"type\": \"string\",\"title\": \"用户名\"},\"password\": {\"type\": \"string\",\"title\": \"密码\"}}},\"uiSchema\": {\"password\": {\"ui:widget\": \"password\"}}},{\"name\": \"首页\",\"path\": \"/home\",\"schema\": {\"type\": \"object\",\"properties\": {\"username\": {\"type\": \"string\",\"title\": \"用户名\"}}},\"uiSchema\": {\"username\": {\"ui:disabled\": true}}},{\"name\": \"理赔申请\",\"path\": \"/claim\",\"schema\": {\"type\": \"object\",\"properties\": {\"policyNumber\": {\"type\": \"string\",\"title\": \"保单号\"},\"claimAmount\": {\"type\": \"number\",\"title\": \"理赔金额\"},\"claimReason\": {\"type\": \"string\",\"title\": \"理赔原因\"}}},\"uiSchema\": {}},{\"name\": \"理赔详情\",\"path\": \"/claim/:id\",\"schema\": {\"type\": \"object\",\"properties\": {\"policyNumber\": {\"type\": \"string\",\"title\": \"保单号\"},\"claimAmount\": {\"type\": \"number\",\"title\": \"理赔金额\"},\"claimReason\": {\"type\": \"string\",\"title\": \"理赔原因\"},\"status\": {\"type\": \"string\",\"title\": \"状态\"}}},\"uiSchema\": {\"status\": {\"ui:disabled\": true}}}]}基于 amis 的实现方案如下：jsximport React from 'react';import { render } from 'amis';import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';const LoginPage = () => {const schema = {type: 'object',properties: {username: {type: 'string',title: '用户名'},password: {type: 'string',title: '密码'}}};const uiSchema = {password: {'ui:widget': 'password'}};return (<div><h1>登录</h1><Form schema={schema} uiSchema={uiSchema} /></div>);};const HomePage = () => {const schema = {type: 'object',properties: {username: {type: 'string',title: '用户名'}}};const uiSchema = {username: {'ui:disabled': true}};return (<div><h1>首页</h1><Form schema={schema} uiSchema={uiSchema} /></div>);};const ClaimPage = () => {const schema = {type: 'object',properties: {policyNumber: {type: 'string',title: '保单号'},claimAmount: {type: 'number',title: '理赔金额'},claimReason: {type: 'string',title: '理赔原因'}}};return (<div><h1>理赔申请</h1><Form schema={schema} /></div>);};const ClaimDetailPage = ({ match }) => {const { id } = match.params;const schema = {type: 'object',properties: {policyNumber: {type: 'string',title: '保单号'},claimAmount: {type: 'number',title: '理赔金额'},claimReason: {type: 'string',title: '理赔原因'},status: {type: 'string',title: '状态'}}};const uiSchema = {status: {'ui:disabled': true}};return (<div><h1>理赔详情</h1><h2>理赔ID: {id}</h2><Form schema={schema} uiSchema={uiSchema} /></div>);};const App = () => {return (<Router><Switch><Route path=\"/login\" component={LoginPage} /><Route path=\"/home\" component={HomePage} /><Route path=\"/claim\" component={ClaimPage} /><Route path=\"/claim/:id\" component={ClaimDetailPage} /></Switch></Router>);};render(<App />, document.getElementById('root'));以上是一个简单的保险行业的理赔系统的页面规划和基于 amis 的实现方案。你可以根据实际需求进行修改和扩展。"}, {"instruction": "用 amis 实现一个保险理赔系统中的申请理赔页面，保险客户可以提交理赔申请，填写相关信息和文件上传。", "input": "", "output": "{\"status\": \"success\",\"message\": \"理赔申请提交成功\",\"data\": {\"claimId\": \"123456789\",\"customerName\": \"John Doe\",\"policyNumber\": \"P123456789\",\"claimAmount\": 5000,\"documents\": [\"document1.pdf\",\"document2.jpg\"]}}"}, {"instruction": "用 amis 实现一个保险理赔系统中的理赔审核页面，理赔审核员可以审核客户提交的理赔申请，决定是否批准理赔请求。", "input": "", "output": "{\"status\": \"success\",\"message\": \"理赔审核成功\",\"data\": {\"claimId\": \"123456\",\"approved\": true}}"}, {"instruction": "用 amis 实现一个保险理赔系统中的理赔处理页面，如果理赔审核通过，理赔处理员可以在这个页面上进行进一步的处理，例如赔付和文件存档。", "input": "", "output": "{\"status\": \"success\",\"message\": \"理赔审核通过\",\"data\": {\"claimId\": \"123456\",\"claimAmount\": 10000,\"claimStatus\": \"approved\",\"claimDocuments\": [{\"documentId\": \"doc123\",\"documentName\": \"Claim Form\",\"documentType\": \"pdf\"},{\"documentId\": \"doc456\",\"documentName\": \"Medical Report\",\"documentType\": \"pdf\"}]}}"}, {"instruction": "设计一个工业行业的质检系统，规划该系统的页面并给出基于 amis 的实现方案", "input": "", "output": "{\"pages\": [{\"title\": \"质检系统\",\"elements\": [{\"type\": \"header\",\"title\": \"质检管理\"},{\"type\": \"tabs\",\"tabs\": [{\"title\": \"质检任务\",\"elements\": [{\"type\": \"table\",\"columns\": [{\"title\": \"任务编号\",\"dataIndex\": \"taskNumber\"},{\"title\": \"任务名称\",\"dataIndex\": \"taskName\"},{\"title\": \"负责人\",\"dataIndex\": \"taskOwner\"},{\"title\": \"状态\",\"dataIndex\": \"status\"}],\"dataSource\": \"http://api.example.com/tasks\"}]},{\"title\": \"质检报告\",\"elements\": [{\"type\": \"table\",\"columns\": [{\"title\": \"报告编号\",\"dataIndex\": \"reportNumber\"},{\"title\": \"报告名称\",\"dataIndex\": \"reportName\"},{\"title\": \"负责人\",\"dataIndex\": \"reportOwner\"},{\"title\": \"状态\",\"dataIndex\": \"status\"}],\"dataSource\": \"http://api.example.com/reports\"}]}]}]}]}"}, {"instruction": "用 amis 实现一个工业行业质检系统的原材料采购录入页面，支持采购记录的增删改查", "input": "", "output": "以下是一个使用AMIS实现的工业行业质检系统的原材料采购录入页面的示例代码：{\"type\": \"page\",\"title\": \"原材料采购录入\",\"body\": {\"type\": \"form\",\"api\": \"/api/purchase\",\"controls\": [{\"type\": \"text\",\"name\": \"materialName\",\"label\": \"原材料名称\",\"required\": true},{\"type\": \"number\",\"name\": \"quantity\",\"label\": \"采购数量\",\"required\": true},{\"type\": \"date\",\"name\": \"purchaseDate\",\"label\": \"采购日期\",\"required\": true},{\"type\": \"button-toolbar\",\"buttons\": [{\"type\": \"submit\",\"label\": \"保存\"},{\"type\": \"button\",\"label\": \"重置\",\"actionType\": \"reset\"}]}]}}这个页面使用了AMIS的`form`组件来创建一个表单，表单的`api`属性指定了数据提交的接口地址为`/api/purchase`。表单中包含了原材料名称、采购数量和采购日期三个输入框，其中原材料名称和采购数量是必填项。最后，页面上还有一个保存按钮和一个重置按钮。你可以根据实际需求修改这个示例代码，添加其他字段或者修改接口地址等。"}, {"instruction": "用 amis 实现一个工业行业质检系统的产品检验信息录入页面，支持增删改查", "input": "", "output": "{\"status\": \"success\",\"message\": \"产品检验信息录入页面\",\"data\": {\"fields\": [{\"name\": \"产品名称\",\"type\": \"text\",\"required\": true},{\"name\": \"生产日期\",\"type\": \"date\",\"required\": true},{\"name\": \"质检结果\",\"type\": \"select\",\"options\": [\"合格\", \"不合格\"],\"required\": true},{\"name\": \"检验员\",\"type\": \"text\",\"required\": true}],\"records\": [{\"id\": 1,\"产品名称\": \"产品A\",\"生产日期\": \"2021-01-01\",\"质检结果\": \"合格\",\"检验员\": \"张三\"},{\"id\": 2,\"产品名称\": \"产品B\",\"生产日期\": \"2021-02-01\",\"质检结果\": \"不合格\",\"检验员\": \"李四\"}]}}"}, {"instruction": "用 amis 实现一个工业行业质检系统的统计分析页面", "input": "", "output": "{\"status\": \"success\",\"data\": {\"total_products\": 1000,\"total_defects\": 50,\"defect_rate\": 5,\"defect_types\": [{\"type\": \"dimension\",\"count\": 20},{\"type\": \"color\",\"count\": 15},{\"type\": \"material\",\"count\": 10},{\"type\": \"functionality\",\"count\": 5}]}}"}, {"instruction": "用 amis 实现一个工业行业质检系统的异常检测汇总页面", "input": "", "output": "{\"status\": \"success\",\"data\": {\"total_count\": 100,\"abnormal_count\": 20,\"abnormal_items\": [{\"item_id\": \"001\",\"item_name\": \"温度异常\",\"abnormal_count\": 5},{\"item_id\": \"002\",\"item_name\": \"湿度异常\",\"abnormal_count\": 10},{\"item_id\": \"003\",\"item_name\": \"压力异常\",\"abnormal_count\": 5}]}}"}, {"instruction": "用 amis 实现一个工业行业质检系统的报告输出页面，支持选择不同的数据类型和需求并点击生成报告，如生产过程质量报告、产品质量报告等", "input": "", "output": "{\"status\": \"success\",\"message\": \"报告生成成功\",\"data\": {\"reportType\": \"生产过程质量报告\",\"dataType\": \"工业行业质检数据\",\"reportContent\": \"报告内容...\"}}"}, {"instruction": "实现一个员工食堂订餐系统，支持员工每天在主食、荤菜、素菜、饮品中各选一项并提交，员工可在个人中心查看自己的订餐记录，如遇菜品不足，管理员可从后台取消点餐，员工可在个人中心看到点餐状态。规划该系统所需页面，并给出基于 amis 的实现方案", "input": "", "output": "{\"pages\": [{\"name\": \"login\",\"title\": \"登录\",\"path\": \"/login\",\"schema\": {\"type\": \"object\",\"properties\": {\"username\": {\"type\": \"string\",\"title\": \"用户名\"},\"password\": {\"type\": \"string\",\"title\": \"密码\"}}},\"uiSchema\": {\"password\": {\"type\": \"password\"}}},{\"name\": \"home\",\"title\": \"首页\",\"path\": \"/home\",\"schema\": {\"type\": \"object\",\"properties\": {\"mainDish\": {\"type\": \"string\",\"title\": \"主食\"},\"meatDish\": {\"type\": \"string\",\"title\": \"荤菜\"},\"vegetableDish\": {\"type\": \"string\",\"title\": \"素菜\"},\"drink\": {\"type\": \"string\",\"title\": \"饮品\"}}},\"uiSchema\": {\"mainDish\": {\"ui:widget\": \"select\",\"ui:options\": {\"enumOptions\": [\"米饭\",\"面条\",\"馒头\"]}},\"meatDish\": {\"ui:widget\": \"select\",\"ui:options\": {\"enumOptions\": [\"红烧肉\",\"鱼香肉丝\",\"宫保鸡丁\"]}},\"vegetableDish\": {\"ui:widget\": \"select\",\"ui:options\": {\"enumOptions\": [\"青椒炒肉\",\"鱼香茄子\",\"蒜蓉西兰花\"]}},\"drink\": {\"ui:widget\": \"select\",\"ui:options\": {\"enumOptions\": [\"可乐\",\"雪碧\",\"绿茶\"]}}}},{\"name\": \"personalCenter\",\"title\": \"个人中心\",\"path\": \"/personal-center\",\"schema\": {\"type\": \"object\",\"properties\": {\"orderHistory\": {\"type\": \"array\",\"title\": \"订餐记录\",\"items\": {\"type\": \"object\",\"properties\": {\"date\": {\"type\": \"string\",\"title\": \"日期\"},\"mainDish\": {\"type\": \"string\",\"title\": \"主食\"},\"meatDish\": {\"type\": \"string\",\"title\": \"荤菜\"},\"vegetableDish\": {\"type\": \"string\",\"title\": \"素菜\"},\"drink\": {\"type\": \"string\",\"title\": \"饮品\"},\"status\": {\"type\": \"string\",\"title\": \"状态\"}}}}}}},{\"name\": \"admin\",\"title\": \"管理员后台\",\"path\": \"/admin\",\"schema\": {\"type\": \"object\",\"properties\": {\"cancelOrder\": {\"type\": \"array\",\"title\": \"取消点餐\",\"items\": {\"type\": \"object\",\"properties\": {\"date\": {\"type\": \"string\",\"title\": \"日期\"},\"mainDish\": {\"type\": \"string\",\"title\": \"主食\"},\"meatDish\": {\"type\": \"string\",\"title\": \"荤菜\"},\"vegetableDish\": {\"type\": \"string\",\"title\": \"素菜\"},\"drink\": {\"type\": \"string\",\"title\": \"饮品\"},\"employee\": {\"type\": \"string\",\"title\": \"员工\"}}}}}}}]}"}, {"instruction": "用 amis 实现一个员工食堂点餐系统的订餐页面，包含一个表单，表单中包含主食、荤菜、素菜、饮品下拉框，员工可以分别选择这四个选项并提交", "input": "", "output": "{\"mainDish\": \"牛肉面\",\"meatDish\": \"红烧肉\",\"vegetableDish\": \"酸菜\",\"drink\": \"可乐\"}"}, {"instruction": "用 amis 实现一个员工食堂点餐系统的个人中心页面，员工可以查看自己的订餐记录和点餐状态", "input": "", "output": "{\"status\": \"success\",\"data\": {\"employeeId\": \"123456\",\"name\": \"张三\",\"orderHistory\": [{\"orderId\": \"789012\",\"date\": \"2021-09-01\",\"menu\": [{\"dishId\": \"345678\",\"dishName\": \"红烧肉\",\"price\": 20.00},{\"dishId\": \"901234\",\"dishName\": \"宫保鸡丁\",\"price\": 18.00}],\"status\": \"已完成\"},{\"orderId\": \"345678\",\"date\": \"2021-09-02\",\"menu\": [{\"dishId\": \"567890\",\"dishName\": \"鱼香肉丝\",\"price\": 22.00},{\"dishId\": \"123456\",\"dishName\": \"麻婆豆腐\",\"price\": 16.00}],\"status\": \"已完成\"}],\"orderStatus\": \"已点餐\"}}"}, {"instruction": "用 amis 实现一个员工食堂点餐系统的订餐后台管理页面，管理员可以取消员工的订餐，支持批量操作", "input": "", "output": "{\"status\": \"success\",\"message\": \"取消订餐成功\"}"}, {"instruction": "用 amis 实现一个员工食堂点餐系统的餐品管理页面，管理员可以根据添加和删除主食、荤菜、素菜、饮品", "input": "", "output": "以下是使用 amis 实现的员工食堂点餐系统的餐品管理页面的代码示例：jsximport React from 'react';import { render } from 'amis';import 'amis/lib/themes/default.css';const schema = {type: 'page',title: '餐品管理',body: {type: 'crud',api: '/api/dishes',filter: {title: '搜索',type: 'text',name: 'keyword',placeholder: '请输入关键字',},headerToolbar: [{type: 'button',label: '添加主食',actionType: 'dialog',dialog: {title: '添加主食',body: {type: 'form',api: '/api/dishes',controls: [{type: 'text',name: 'name',label: '名称',required: true,},{type: 'number',name: 'price',label: '价格',required: true,},{type: 'textarea',name: 'description',label: '描述',},],},},},{type: 'button',label: '添加荤菜',actionType: 'dialog',dialog: {title: '添加荤菜',body: {type: 'form',api: '/api/dishes',controls: [{type: 'text',name: 'name',label: '名称',required: true,},{type: 'number',name: 'price',label: '价格',required: true,},{type: 'textarea',name: 'description',label: '描述',},],},},},{type: 'button',label: '添加素菜',actionType: 'dialog',dialog: {title: '添加素菜',body: {type: 'form',api: '/api/dishes',controls: [{type: 'text',name: 'name',label: '名称',required: true,},{type: 'number',name: 'price',label: '价格',required: true,},{type: 'textarea',name: 'description',label: '描述',},],},},},{type: 'button',label: '添加饮品',actionType: 'dialog',dialog: {title: '添加饮品',body: {type: 'form',api: '/api/dishes',controls: [{type: 'text',name: 'name',label: '名称',required: true,},{type: 'number',name: 'price',label: '价格',required: true,},{type: 'textarea',name: 'description',label: '描述',},],},},},],columns: [{name: 'name',label: '名称',},{name: 'price',label: '价格',},{name: 'description',label: '描述',},{type: 'operation',label: '操作',width: 100,buttons: [{type: 'button',label: '编辑',actionType: 'dialog',dialog: {title: '编辑餐品',body: {type: 'form',api: '/api/dishes/$id',controls: [{type: 'text',name: 'name',label: '名称',required: true,},{type: 'number',name: 'price',label: '价格',required: true,},{type: 'textarea',name: 'description',label: '描述',},],},},},{type: 'button',label: '删除',actionType: 'ajax',confirmText: '确认要删除吗？',api: 'DELETE /api/dishes/$id',level: 'danger',},],},],},};render(schema, document.getElementById('root'));这段代码使用了 amis 的 CRUD 组件来展示餐品列表，并提供了添加和删除主食、荤菜、素菜、饮品的功能。管理员可以通过点击页面上的按钮来添加新的餐品，并可以编辑和删除已有的餐品。注意：上述代码中的 `/api/dishes` 是一个示例的 API 接口地址，你需要根据实际情况修改为你自己的接口地址。"}, {"instruction": "目前大部分汽车经销商的售后服务业务和数据仍以线下处理为主，数据的及时性、准确性、管理成本，均存在一定的改善空间。搭建一个4S店售后服务系统，解决此类问题，规划该系统所需页面并给出基于 amis 的实现方案", "input": "", "output": "{\"pages\": [{\"name\": \"首页\",\"url\": \"/home\",\"components\": [{\"type\": \"Title\",\"props\": {\"text\": \"欢迎使用4S店售后服务系统\"}},{\"type\": \"Button\",\"props\": {\"text\": \"进入系统\",\"onClick\": \"goToDashboard\"}}]},{\"name\": \"仪表盘\",\"url\": \"/dashboard\",\"components\": [{\"type\": \"Title\",\"props\": {\"text\": \"仪表盘\"}},{\"type\": \"Card\",\"props\": {\"title\": \"待处理工单\",\"content\": \"显示待处理的售后工单列表\"}},{\"type\": \"Card\",\"props\": {\"title\": \"已完成工单\",\"content\": \"显示已完成的售后工单列表\"}},{\"type\": \"Button\",\"props\": {\"text\": \"创建工单\",\"onClick\": \"goToCreateOrder\"}}]},{\"name\": \"创建工单\",\"url\": \"/create-order\",\"components\": [{\"type\": \"Title\",\"props\": {\"text\": \"创建工单\"}},{\"type\": \"Form\",\"props\": {\"fields\": [{\"name\": \"车辆信息\",\"type\": \"text\",\"label\": \"车牌号\"},{\"name\": \"问题描述\",\"type\": \"textarea\",\"label\": \"问题描述\"},{\"name\": \"提交\",\"type\": \"button\",\"text\": \"提交工单\",\"onClick\": \"submitOrder\"}]}}]}]}"}, {"instruction": "用 amis 实现一个 4S 店售后服务系统中的客户管理页面，包括客户信息、车辆信息、服务历史等", "input": "", "output": "{\"customer\": {\"name\": \"John Doe\",\"phone\": \"1234567890\",\"email\": \"johndoe@example.com\"},\"vehicle\": {\"make\": \"Toyota\",\"model\": \"Camry\",\"year\": 2020,\"vin\": \"1234567890\"},\"serviceHistory\": [{\"date\": \"2021-01-01\",\"serviceType\": \"Oil Change\",\"mileage\": 10000},{\"date\": \"2021-02-15\",\"serviceType\": \"Tire Rotation\",\"mileage\": 15000},{\"date\": \"2021-03-30\",\"serviceType\": \"Brake Inspection\",\"mileage\": 20000}]}"}, {"instruction": "用 amis 实现一个 4S 店售后服务系统中的维修管理页面，包括维修记录、维修费用、维修材料等", "input": "", "output": "{\"repairRecords\": [{\"id\": 1,\"carModel\": \"Audi A4\",\"repairDate\": \"2021-05-10\",\"description\": \"Engine oil change\",\"cost\": 100},{\"id\": 2,\"carModel\": \"BMW X5\",\"repairDate\": \"2021-06-15\",\"description\": \"Brake pad replacement\",\"cost\": 200}],\"repairCosts\": [{\"id\": 1,\"carModel\": \"Audi A4\",\"cost\": 100},{\"id\": 2,\"carModel\": \"BMW X5\",\"cost\": 200}],\"repairMaterials\": [{\"id\": 1,\"materialName\": \"Engine oil\",\"quantity\": 5},{\"id\": 2,\"materialName\": \"Brake pads\",\"quantity\": 2}]}"}, {"instruction": "用 amis 实现一个 4S 店售后服务系统中的配件管理页面，包括配件库存、采购管理、配件报废等", "input": "", "output": "{\"status\": \"success\",\"data\": {\"inventory\": [{\"part_id\": \"P001\",\"part_name\": \"Engine Oil\",\"quantity\": 100},{\"part_id\": \"P002\",\"part_name\": \"Air Filter\",\"quantity\": 50},{\"part_id\": \"P003\",\"part_name\": \"Brake Pads\",\"quantity\": 80}],\"purchases\": [{\"purchase_id\": \"PO001\",\"part_id\": \"P001\",\"part_name\": \"Engine Oil\",\"quantity\": 50,\"date\": \"2021-01-01\"},{\"purchase_id\": \"PO002\",\"part_id\": \"P002\",\"part_name\": \"Air Filter\",\"quantity\": 20,\"date\": \"2021-02-15\"}],\"scraps\": [{\"scrap_id\": \"SO001\",\"part_id\": \"P003\",\"part_name\": \"Brake Pads\",\"quantity\": 10,\"reason\": \"Worn out\",\"date\": \"2021-03-10\"}]}}"}, {"instruction": "用 amis 实现一个 4S 店售后服务系统中的售后服务页面，包括维修预约、保养预约、车辆年检预约等", "input": "", "output": "{\"services\": [{\"name\": \"维修预约\",\"description\": \"提供车辆维修预约服务\",\"url\": \"https://example.com/repair-booking\"},{\"name\": \"保养预约\",\"description\": \"提供车辆保养预约服务\",\"url\": \"https://example.com/maintenance-booking\"},{\"name\": \"车辆年检预约\",\"description\": \"提供车辆年检预约服务\",\"url\": \"https://example.com/inspection-booking\"}]}"}, {"instruction": "用 amis 实现一个 4S 店售后服务系统中的售后服务评价页面，包括客户评价、员工评价、售后服务评分等", "input": "", "output": "{\"customer_rating\": 4.5,\"employee_rating\": 4.2,\"service_rating\": 4.8}"}, {"instruction": "用 amis 实现一个 4S 店售后服务系统中的报表分析页面，包括数据分析、统计分析、趋势分析等", "input": "", "output": "{\"dataAnalysis\": {\"totalSales\": 1000000,\"totalCustomers\": 500,\"averageSalesPerCustomer\": 2000},\"statisticalAnalysis\": {\"topSellingModels\": [{\"model\": \"Model A\",\"sales\": 200,\"percentageOfTotalSales\": 20},{\"model\": \"Model B\",\"sales\": 150,\"percentageOfTotalSales\": 15},{\"model\": \"Model C\",\"sales\": 100,\"percentageOfTotalSales\": 10}],\"salesByMonth\": {\"January\": 50000,\"February\": 60000,\"March\": 70000}},\"trendAnalysis\": {\"salesTrend\": {\"January\": 50000,\"February\": 60000,\"March\": 70000},\"customerTrend\": {\"January\": 100,\"February\": 150,\"March\": 200}}}"}, {"instruction": "实现一个工业行业的智能生产管理系统，包含设备维护、销售订单、物料拆分、原料采购、生产计划及实施、质量检测、库存及财务管理模块，规划所需页面，并给出基于 amis 的实现方案", "input": "", "output": "{\"pages\": [{\"name\": \"设备维护\",\"path\": \"/equipment-maintenance\",\"component\": \"EquipmentMaintenance\"},{\"name\": \"销售订单\",\"path\": \"/sales-orders\",\"component\": \"SalesOrders\"},{\"name\": \"物料拆分\",\"path\": \"/material-split\",\"component\": \"MaterialSplit\"},{\"name\": \"原料采购\",\"path\": \"/raw-material-purchase\",\"component\": \"RawMaterialPurchase\"},{\"name\": \"生产计划\",\"path\": \"/production-plan\",\"component\": \"ProductionPlan\"},{\"name\": \"质量检测\",\"path\": \"/quality-inspection\",\"component\": \"QualityInspection\"},{\"name\": \"库存管理\",\"path\": \"/inventory-management\",\"component\": \"InventoryManagement\"},{\"name\": \"财务管理\",\"path\": \"/financial-management\",\"component\": \"FinancialManagement\"}],\"components\": [{\"name\": \"EquipmentMaintenance\",\"type\": \"form\",\"fields\": [{\"name\": \"equipmentName\",\"label\": \"设备名称\",\"type\": \"text\"},{\"name\": \"maintenanceDate\",\"label\": \"维护日期\",\"type\": \"date\"},{\"name\": \"maintenanceDescription\",\"label\": \"维护描述\",\"type\": \"textarea\"}]},{\"name\": \"SalesOrders\",\"type\": \"table\",\"columns\": [{\"name\": \"orderNumber\",\"label\": \"订单号\",\"type\": \"text\"},{\"name\": \"customerName\",\"label\": \"客户名称\",\"type\": \"text\"},{\"name\": \"orderDate\",\"label\": \"订单日期\",\"type\": \"date\"},{\"name\": \"orderStatus\",\"label\": \"订单状态\",\"type\": \"text\"}]},{\"name\": \"MaterialSplit\",\"type\": \"form\",\"fields\": [{\"name\": \"materialName\",\"label\": \"物料名称\",\"type\": \"text\"},{\"name\": \"splitQuantity\",\"label\": \"拆分数量\",\"type\": \"number\"},{\"name\": \"splitDate\",\"label\": \"拆分日期\",\"type\": \"date\"}]},{\"name\": \"RawMaterialPurchase\",\"type\": \"form\",\"fields\": [{\"name\": \"materialName\",\"label\": \"物料名称\",\"type\": \"text\"},{\"name\": \"purchaseQuantity\",\"label\": \"采购数量\",\"type\": \"number\"},{\"name\": \"purchaseDate\",\"label\": \"采购日期\",\"type\": \"date\"}]},{\"name\": \"ProductionPlan\",\"type\": \"form\",\"fields\": [{\"name\": \"product\",\"label\": \"产品\",\"type\": \"text\"},{\"name\": \"quantity\",\"label\": \"数量\",\"type\": \"number\"},{\"name\": \"startDate\",\"label\": \"开始日期\",\"type\": \"date\"},{\"name\": \"endDate\",\"label\": \"结束日期\",\"type\": \"date\"}]},{\"name\": \"QualityInspection\",\"type\": \"form\",\"fields\": [{\"name\": \"product\",\"label\": \"产品\",\"type\": \"text\"},{\"name\": \"inspectionDate\",\"label\": \"检测日期\",\"type\": \"date\"},{\"name\": \"inspectionResult\",\"label\": \"检测结果\",\"type\": \"text\"}]},{\"name\": \"InventoryManagement\",\"type\": \"table\",\"columns\": [{\"name\": \"materialName\",\"label\": \"物料名称\",\"type\": \"text\"},{\"name\": \"quantity\",\"label\": \"数量\",\"type\": \"number\"},{\"name\": \"location\",\"label\": \"位置\",\"type\": \"text\"}]},{\"name\": \"FinancialManagement\",\"type\": \"table\",\"columns\": [{\"name\": \"transactionDate\",\"label\": \"交易日期\",\"type\": \"date\"},{\"name\": \"transactionType\",\"label\": \"交易类型\",\"type\": \"text\"},{\"name\": \"amount\",\"label\": \"金额\",\"type\": \"number\"},{\"name\": \"description\",\"label\": \"描述\",\"type\": \"text\"}]}]}"}, {"instruction": "用 AMis 实现一个智能生产管理系统中的仪表盘页面，展示系统的总体运行情况，包括设备状态、生产计划完成情况、库存情况等。", "input": "", "output": "{\"title\": \"智能生产管理系统\",\"widgets\": [{\"type\": \"card\",\"title\": \"设备状态\",\"data\": {\"total\": 100,\"online\": 80,\"offline\": 20}},{\"type\": \"progress\",\"title\": \"生产计划完成情况\",\"data\": {\"completed\": 60,\"remaining\": 40}},{\"type\": \"bar\",\"title\": \"库存情况\",\"data\": {\"productA\": 200,\"productB\": 150,\"productC\": 100}}]}"}, {"instruction": "用 AMis 实现一个智能生产管理系统中的设备维护页面，列出所有设备的信息，包括设备名称、型号、状态等，并提供设备维护的功能，例如故障报修、保养计划等。", "input": "", "output": "{\"status\": 200,\"message\": \"成功\",\"data\": [{\"设备名称\": \"设备1\",\"型号\": \"型号1\",\"状态\": \"正常\"},{\"设备名称\": \"设备2\",\"型号\": \"型号2\",\"状态\": \"故障\"},{\"设备名称\": \"设备3\",\"型号\": \"型号3\",\"状态\": \"正常\"}]}"}, {"instruction": "用 AMis 实现一个智能生产管理系统中的销售订单页面，列出所有的销售订单，包括订单编号、客户名称、订单状态等，并提供添加、修改、删除订单的功能。", "input": "", "output": "{\"status\": \"success\",\"data\": [{\"orderNumber\": \"SO001\",\"customerName\": \"John Smith\",\"orderStatus\": \"Pending\"},{\"orderNumber\": \"SO002\",\"customerName\": \"Jane Doe\",\"orderStatus\": \"Completed\"},{\"orderNumber\": \"SO003\",\"customerName\": \"Mike Johnson\",\"orderStatus\": \"In Progress\"}]}"}, {"instruction": "用 AMis 实现一个智能生产管理系统中的物料拆分页面，展示所有的物料及其相关信息，包括名称、数量、库存状态等，并提供拆分物料的功能。", "input": "", "output": "{\"status\": 200,\"message\": \"成功\",\"data\": {\"materials\": [{\"name\": \"物料A\",\"quantity\": 100,\"stockStatus\": \"充足\"},{\"name\": \"物料B\",\"quantity\": 50,\"stockStatus\": \"不足\"},{\"name\": \"物料C\",\"quantity\": 200,\"stockStatus\": \"充足\"}]}}"}, {"instruction": "用 AMis 实现一个智能生产管理系统中的原料采购页面，列出所有的原料信息，包括名称、供应商、采购价格等，并提供采购原料的功能。", "input": "", "output": "{\"status\": 200,\"message\": \"成功\",\"data\": [{\"name\": \"原料1\",\"supplier\": \"供应商1\",\"price\": 10.5},{\"name\": \"原料2\",\"supplier\": \"供应商2\",\"price\": 15.2},{\"name\": \"原料3\",\"supplier\": \"供应商3\",\"price\": 8.9}]}"}, {"instruction": "用 AMis 实现一个智能生产管理系统中的生产计划页面，展示生产计划的信息，包括生产计划编号、产品名称、生产数量等，并提供创建、修改、删除生产计划的功能。", "input": "", "output": "{\"type\": \"page\",\"body\": {\"type\": \"form\",\"title\": \"生产计划\",\"controls\": [{\"type\": \"text\",\"name\": \"planId\",\"label\": \"生产计划编号\"},{\"type\": \"text\",\"name\": \"productName\",\"label\": \"产品名称\"},{\"type\": \"number\",\"name\": \"quantity\",\"label\": \"生产数量\"}],\"actions\": [{\"type\": \"button\",\"label\": \"创建\",\"actionType\": \"ajax\",\"api\": \"/api/createPlan\",\"method\": \"post\",\"feedback\": {\"type\": \"message\",\"level\": \"success\",\"content\": \"创建成功\"}},{\"type\": \"button\",\"label\": \"修改\",\"actionType\": \"ajax\",\"api\": \"/api/updatePlan\",\"method\": \"post\",\"feedback\": {\"type\": \"message\",\"level\": \"success\",\"content\": \"修改成功\"}},{\"type\": \"button\",\"label\": \"删除\",\"actionType\": \"ajax\",\"api\": \"/api/deletePlan\",\"method\": \"post\",\"feedback\": {\"type\": \"message\",\"level\": \"success\",\"content\": \"删除成功\"}}]}}"}, {"instruction": "用 AMis 实现一个智能生产管理系统中的质量检测页面，列出所有的质量检测信息，包括检测编号、产品名称、检测结果等，并提供添加、修改、删除质量检测信息的功能。", "input": "", "output": "{\"title\": \"质量检测信息\",\"type\": \"page\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"button\",\"label\": \"添加\",\"actionType\": \"dialog\",\"dialog\": {\"title\": \"添加质量检测信息\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"检测编号\",\"label\": \"检测编号\"},{\"type\": \"text\",\"name\": \"产品名称\",\"label\": \"产品名称\"},{\"type\": \"text\",\"name\": \"检测结果\",\"label\": \"检测结果\"}]},\"actions\": [{\"type\": \"submit\",\"label\": \"确定\"}]}},{\"type\": \"table\",\"columns\": [{\"name\": \"检测编号\",\"label\": \"检测编号\"},{\"name\": \"产品名称\",\"label\": \"产品名称\"},{\"name\": \"检测结果\",\"label\": \"检测结果\"},{\"type\": \"operation\",\"label\": \"操作\",\"width\": 100,\"buttons\": [{\"type\": \"button\",\"label\": \"修改\",\"actionType\": \"dialog\",\"dialog\": {\"title\": \"修改质量检测信息\",\"body\": {\"type\": \"form\",\"controls\": [{\"type\": \"text\",\"name\": \"检测编号\",\"label\": \"检测编号\"},{\"type\": \"text\",\"name\": \"产品名称\",\"label\": \"产品名称\"},{\"type\": \"text\",\"name\": \"检测结果\",\"label\": \"检测结果\"}]},\"actions\": [{\"type\": \"submit\",\"label\": \"确定\"}]}},{\"type\": \"button\",\"label\": \"删除\",\"actionType\": \"ajax\",\"confirmText\": \"确定要删除该质量检测信息吗？\",\"api\": \"/api/deleteQualityCheck?id=$id\",\"reload\": true}]}],\"source\": \"/api/getQualityChecks\"}]}}"}, {"instruction": "用 AMis 实现一个智能生产管理系统中的库存管理页面，展示所有的库存信息，包括物料名称、库存数量、库存状态等，并提供修改、删除库存信息的功能。", "input": "", "output": "{\"status\": 200,\"message\": \"成功\",\"data\": [{\"id\": 1,\"materialName\": \"物料1\",\"quantity\": 100,\"status\": \"正常\"},{\"id\": 2,\"materialName\": \"物料2\",\"quantity\": 50,\"status\": \"正常\"},{\"id\": 3,\"materialName\": \"物料3\",\"quantity\": 200,\"status\": \"正常\"}]}"}]